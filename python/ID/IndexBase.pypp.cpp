// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "IndexBase.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "index.h"

#include "index.h"

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireID::IndexBase&){ return "SireID::IndexBase";}

void register_IndexBase_class(){

    { //::SireID::IndexBase
        typedef bp::class_< SireID::IndexBase, boost::noncopyable > IndexBase_exposer_t;
        IndexBase_exposer_t IndexBase_exposer = IndexBase_exposer_t( "IndexBase", bp::no_init );
        bp::scope IndexBase_scope( IndexBase_exposer );
        { //::SireID::IndexBase::hash
        
            typedef ::uint ( ::SireID::IndexBase::*hash_function_type )(  ) const;
            hash_function_type hash_function_value( &::SireID::IndexBase::hash );
            
            IndexBase_exposer.def( 
                "hash"
                , hash_function_value );
        
        }
        { //::SireID::IndexBase::isNull
        
            typedef bool ( ::SireID::IndexBase::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireID::IndexBase::isNull );
            
            IndexBase_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireID::IndexBase::map
        
            typedef ::qint32 ( ::SireID::IndexBase::*map_function_type )( ::qint32 ) const;
            map_function_type map_function_value( &::SireID::IndexBase::map );
            
            IndexBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireID::IndexBase::null
        
            typedef ::qint32 ( *null_function_type )(  );
            null_function_type null_function_value( &::SireID::IndexBase::null );
            
            IndexBase_exposer.def( 
                "null"
                , null_function_value );
        
        }
        { //::SireID::IndexBase::value
        
            typedef ::qint32 ( ::SireID::IndexBase::*value_function_type )(  ) const;
            value_function_type value_function_value( &::SireID::IndexBase::value );
            
            IndexBase_exposer.def( 
                "value"
                , value_function_value );
        
        }
        IndexBase_exposer.staticmethod( "null" );
        IndexBase_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireID::IndexBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        IndexBase_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireID::IndexBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        IndexBase_exposer.def( "__str__", &pvt_get_name);
        IndexBase_exposer.def( "__repr__", &pvt_get_name);
    }

}
