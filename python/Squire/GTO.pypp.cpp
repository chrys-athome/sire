// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "GTO.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "gto.h"

#include "sgto.h"

#include "gto.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GTO_class(){

    { //::Squire::GTO
        typedef bp::class_< Squire::GTO, bp::bases< Squire::OrbitalShell, Squire::Orbital, SireBase::Property >, boost::noncopyable > GTO_exposer_t;
        GTO_exposer_t GTO_exposer = GTO_exposer_t( "GTO", bp::no_init );
        bp::scope GTO_scope( GTO_exposer );
        { //::Squire::GTO::alpha
        
            typedef double ( ::Squire::GTO::*alpha_function_type )(  ) const;
            alpha_function_type alpha_function_value( &::Squire::GTO::alpha );
            
            GTO_exposer.def( 
                "alpha"
                , alpha_function_value );
        
        }
        { //::Squire::GTO::beta
        
            typedef double ( ::Squire::GTO::*beta_function_type )(  ) const;
            beta_function_type beta_function_value( &::Squire::GTO::beta );
            
            GTO_exposer.def( 
                "beta"
                , beta_function_value );
        
        }
        { //::Squire::GTO::isNull
        
            typedef bool ( ::Squire::GTO::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::Squire::GTO::isNull );
            
            GTO_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::Squire::GTO::multiply
        
            typedef ::Squire::GTOPtr ( ::Squire::GTO::*multiply_function_type )( double ) const;
            multiply_function_type multiply_function_value( &::Squire::GTO::multiply );
            
            GTO_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("coefficient") ) );
        
        }
        { //::Squire::GTO::null
        
            typedef ::Squire::GTO const & ( *null_function_type )(  );
            null_function_type null_function_value( &::Squire::GTO::null );
            
            GTO_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::Squire::GTO::scale
        
            typedef double ( ::Squire::GTO::*scale_function_type )(  ) const;
            scale_function_type scale_function_value( &::Squire::GTO::scale );
            
            GTO_exposer.def( 
                "scale"
                , scale_function_value );
        
        }
        { //::Squire::GTO::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Squire::GTO::typeName );
            
            GTO_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        GTO_exposer.staticmethod( "null" );
        GTO_exposer.staticmethod( "typeName" );
        GTO_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Squire::GTO >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GTO_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Squire::GTO >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GTO_exposer.def( "__str__", &__str__< ::Squire::GTO > );
        GTO_exposer.def( "__repr__", &__str__< ::Squire::GTO > );
    }

}
