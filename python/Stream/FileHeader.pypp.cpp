// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "FileHeader.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/errors.h"

#include "SireStream/version_error.h"

#include "shareddatastream.h"

#include "streamdata.hpp"

#include "tostring.h"

#include <QByteArray>

#include <QDataStream>

#include <QDebug>

#include <QFile>

#include <QList>

#include <QMutex>

#include <QProcess>

#include <QSysInfo>

#include <QtGlobal>

#include <cstdlib>

#include <sys/utsname.h>

#include <unistd.h>

#include "streamdata.hpp"

SireStream::FileHeader __copy__(const SireStream::FileHeader &other){ return SireStream::FileHeader(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_FileHeader_class(){

    { //::SireStream::FileHeader
        typedef bp::class_< SireStream::FileHeader > FileHeader_exposer_t;
        FileHeader_exposer_t FileHeader_exposer = FileHeader_exposer_t( "FileHeader", bp::init< >() );
        bp::scope FileHeader_scope( FileHeader_exposer );
        FileHeader_exposer.def( bp::init< SireStream::FileHeader const & >(( bp::arg("other") )) );
        { //::SireStream::FileHeader::assertCompatible
        
            typedef void ( ::SireStream::FileHeader::*assertCompatible_function_type )(  ) const;
            assertCompatible_function_type assertCompatible_function_value( &::SireStream::FileHeader::assertCompatible );
            
            FileHeader_exposer.def( 
                "assertCompatible"
                , assertCompatible_function_value );
        
        }
        { //::SireStream::FileHeader::assertNotCorrupted
        
            typedef void ( ::SireStream::FileHeader::*assertNotCorrupted_function_type )( ::QByteArray const & ) const;
            assertNotCorrupted_function_type assertNotCorrupted_function_value( &::SireStream::FileHeader::assertNotCorrupted );
            
            FileHeader_exposer.def( 
                "assertNotCorrupted"
                , assertNotCorrupted_function_value
                , ( bp::arg("compressed_data") ) );
        
        }
        { //::SireStream::FileHeader::buildVersion
        
            typedef ::QString ( ::SireStream::FileHeader::*buildVersion_function_type )(  ) const;
            buildVersion_function_type buildVersion_function_value( &::SireStream::FileHeader::buildVersion );
            
            FileHeader_exposer.def( 
                "buildVersion"
                , buildVersion_function_value );
        
        }
        { //::SireStream::FileHeader::compressionRatio
        
            typedef double ( ::SireStream::FileHeader::*compressionRatio_function_type )(  ) const;
            compressionRatio_function_type compressionRatio_function_value( &::SireStream::FileHeader::compressionRatio );
            
            FileHeader_exposer.def( 
                "compressionRatio"
                , compressionRatio_function_value );
        
        }
        { //::SireStream::FileHeader::createdBy
        
            typedef ::QString const & ( ::SireStream::FileHeader::*createdBy_function_type )(  ) const;
            createdBy_function_type createdBy_function_value( &::SireStream::FileHeader::createdBy );
            
            FileHeader_exposer.def( 
                "createdBy"
                , createdBy_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireStream::FileHeader::createdWhen
        
            typedef ::QDateTime const & ( ::SireStream::FileHeader::*createdWhen_function_type )(  ) const;
            createdWhen_function_type createdWhen_function_value( &::SireStream::FileHeader::createdWhen );
            
            FileHeader_exposer.def( 
                "createdWhen"
                , createdWhen_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireStream::FileHeader::createdWhere
        
            typedef ::QString const & ( ::SireStream::FileHeader::*createdWhere_function_type )(  ) const;
            createdWhere_function_type createdWhere_function_value( &::SireStream::FileHeader::createdWhere );
            
            FileHeader_exposer.def( 
                "createdWhere"
                , createdWhere_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireStream::FileHeader::dataType
        
            typedef ::QString ( ::SireStream::FileHeader::*dataType_function_type )(  ) const;
            dataType_function_type dataType_function_value( &::SireStream::FileHeader::dataType );
            
            FileHeader_exposer.def( 
                "dataType"
                , dataType_function_value );
        
        }
        { //::SireStream::FileHeader::dataTypes
        
            typedef ::QStringList const & ( ::SireStream::FileHeader::*dataTypes_function_type )(  ) const;
            dataTypes_function_type dataTypes_function_value( &::SireStream::FileHeader::dataTypes );
            
            FileHeader_exposer.def( 
                "dataTypes"
                , dataTypes_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireStream::FileHeader::digest
        
            typedef ::SireStream::MD5Sum const & ( ::SireStream::FileHeader::*digest_function_type )(  ) const;
            digest_function_type digest_function_value( &::SireStream::FileHeader::digest );
            
            FileHeader_exposer.def( 
                "digest"
                , digest_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireStream::FileHeader::locale
        
            typedef ::QLocale const & ( ::SireStream::FileHeader::*locale_function_type )(  ) const;
            locale_function_type locale_function_value( &::SireStream::FileHeader::locale );
            
            FileHeader_exposer.def( 
                "locale"
                , locale_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireStream::FileHeader::operator=
        
            typedef ::SireStream::FileHeader & ( ::SireStream::FileHeader::*assign_function_type )( ::SireStream::FileHeader const & ) ;
            assign_function_type assign_function_value( &::SireStream::FileHeader::operator= );
            
            FileHeader_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::SireStream::FileHeader::repository
        
            typedef ::QString ( ::SireStream::FileHeader::*repository_function_type )(  ) const;
            repository_function_type repository_function_value( &::SireStream::FileHeader::repository );
            
            FileHeader_exposer.def( 
                "repository"
                , repository_function_value );
        
        }
        { //::SireStream::FileHeader::requireLibrary
        
            typedef bool ( ::SireStream::FileHeader::*requireLibrary_function_type )( ::QString const & ) const;
            requireLibrary_function_type requireLibrary_function_value( &::SireStream::FileHeader::requireLibrary );
            
            FileHeader_exposer.def( 
                "requireLibrary"
                , requireLibrary_function_value
                , ( bp::arg("library") ) );
        
        }
        { //::SireStream::FileHeader::requiredLibraries
        
            typedef ::QStringList ( ::SireStream::FileHeader::*requiredLibraries_function_type )(  ) const;
            requiredLibraries_function_type requiredLibraries_function_value( &::SireStream::FileHeader::requiredLibraries );
            
            FileHeader_exposer.def( 
                "requiredLibraries"
                , requiredLibraries_function_value );
        
        }
        { //::SireStream::FileHeader::requiredMemory
        
            typedef ::quint32 ( ::SireStream::FileHeader::*requiredMemory_function_type )(  ) const;
            requiredMemory_function_type requiredMemory_function_value( &::SireStream::FileHeader::requiredMemory );
            
            FileHeader_exposer.def( 
                "requiredMemory"
                , requiredMemory_function_value );
        
        }
        { //::SireStream::FileHeader::requiredVersion
        
            typedef ::quint32 ( ::SireStream::FileHeader::*requiredVersion_function_type )( ::QString const & ) const;
            requiredVersion_function_type requiredVersion_function_value( &::SireStream::FileHeader::requiredVersion );
            
            FileHeader_exposer.def( 
                "requiredVersion"
                , requiredVersion_function_value
                , ( bp::arg("library") ) );
        
        }
        { //::SireStream::FileHeader::systemInfo
        
            typedef ::QString const & ( ::SireStream::FileHeader::*systemInfo_function_type )(  ) const;
            systemInfo_function_type systemInfo_function_value( &::SireStream::FileHeader::systemInfo );
            
            FileHeader_exposer.def( 
                "systemInfo"
                , systemInfo_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireStream::FileHeader::toString
        
            typedef ::QString ( ::SireStream::FileHeader::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireStream::FileHeader::toString );
            
            FileHeader_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireStream::FileHeader::version
        
            typedef ::quint32 ( ::SireStream::FileHeader::*version_function_type )(  ) const;
            version_function_type version_function_value( &::SireStream::FileHeader::version );
            
            FileHeader_exposer.def( 
                "version"
                , version_function_value );
        
        }
        FileHeader_exposer.def( "__copy__", &__copy__);
        FileHeader_exposer.def( "__deepcopy__", &__copy__);
        FileHeader_exposer.def( "clone", &__copy__);
        FileHeader_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireStream::FileHeader >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FileHeader_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireStream::FileHeader >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FileHeader_exposer.def( "__str__", &__str__< ::SireStream::FileHeader > );
        FileHeader_exposer.def( "__repr__", &__str__< ::SireStream::FileHeader > );
    }

}
