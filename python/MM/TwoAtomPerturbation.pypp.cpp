// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "TwoAtomPerturbation.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/values.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "fouratomfunctions.h"

#include "internalperturbation.h"

#include "threeatomfunctions.h"

#include "twoatomfunctions.h"

#include "internalperturbation.h"

SireMM::TwoAtomPerturbation __copy__(const SireMM::TwoAtomPerturbation &other){ return SireMM::TwoAtomPerturbation(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_TwoAtomPerturbation_class(){

    { //::SireMM::TwoAtomPerturbation
        typedef bp::class_< SireMM::TwoAtomPerturbation, bp::bases< SireMM::InternalPerturbation, SireMol::Perturbation, SireBase::Property > > TwoAtomPerturbation_exposer_t;
        TwoAtomPerturbation_exposer_t TwoAtomPerturbation_exposer = TwoAtomPerturbation_exposer_t( "TwoAtomPerturbation", bp::init< >() );
        bp::scope TwoAtomPerturbation_scope( TwoAtomPerturbation_exposer );
        TwoAtomPerturbation_exposer.def( bp::init< SireMol::AtomID const &, SireMol::AtomID const &, SireCAS::Expression const &, SireCAS::Expression const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("initial_form"), bp::arg("final_form"), bp::arg("map")=SireBase::PropertyMap() )) );
        TwoAtomPerturbation_exposer.def( bp::init< SireMol::AtomID const &, SireMol::AtomID const &, SireCAS::Expression const &, SireCAS::Expression const &, SireCAS::Expression const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("initial_form"), bp::arg("final_form"), bp::arg("mapping_function"), bp::arg("map")=SireBase::PropertyMap() )) );
        TwoAtomPerturbation_exposer.def( bp::init< SireMol::AtomID const &, SireMol::AtomID const &, SireCAS::Expression const &, SireCAS::Identities const &, SireCAS::Identities const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("base_expression"), bp::arg("initial_forms"), bp::arg("final_forms"), bp::arg("map")=SireBase::PropertyMap() )) );
        TwoAtomPerturbation_exposer.def( bp::init< SireMol::AtomID const &, SireMol::AtomID const &, SireCAS::Expression const &, SireCAS::Identities const &, SireCAS::Identities const &, SireCAS::Expression const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("base_expression"), bp::arg("initial_forms"), bp::arg("final_forms"), bp::arg("mapping_function"), bp::arg("map")=SireBase::PropertyMap() )) );
        TwoAtomPerturbation_exposer.def( bp::init< SireMM::TwoAtomPerturbation const & >(( bp::arg("other") )) );
        { //::SireMM::TwoAtomPerturbation::atom0
        
            typedef ::SireMol::AtomID const & ( ::SireMM::TwoAtomPerturbation::*atom0_function_type )(  ) const;
            atom0_function_type atom0_function_value( &::SireMM::TwoAtomPerturbation::atom0 );
            
            TwoAtomPerturbation_exposer.def( 
                "atom0"
                , atom0_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMM::TwoAtomPerturbation::atom1
        
            typedef ::SireMol::AtomID const & ( ::SireMM::TwoAtomPerturbation::*atom1_function_type )(  ) const;
            atom1_function_type atom1_function_value( &::SireMM::TwoAtomPerturbation::atom1 );
            
            TwoAtomPerturbation_exposer.def( 
                "atom1"
                , atom1_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        TwoAtomPerturbation_exposer.def( bp::self != bp::self );
        { //::SireMM::TwoAtomPerturbation::operator=
        
            typedef ::SireMM::TwoAtomPerturbation & ( ::SireMM::TwoAtomPerturbation::*assign_function_type )( ::SireMM::TwoAtomPerturbation const & ) ;
            assign_function_type assign_function_value( &::SireMM::TwoAtomPerturbation::operator= );
            
            TwoAtomPerturbation_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        TwoAtomPerturbation_exposer.def( bp::self == bp::self );
        { //::SireMM::TwoAtomPerturbation::requiredProperties
        
            typedef ::QSet< QString > ( ::SireMM::TwoAtomPerturbation::*requiredProperties_function_type )(  ) const;
            requiredProperties_function_type requiredProperties_function_value( &::SireMM::TwoAtomPerturbation::requiredProperties );
            
            TwoAtomPerturbation_exposer.def( 
                "requiredProperties"
                , requiredProperties_function_value );
        
        }
        { //::SireMM::TwoAtomPerturbation::toString
        
            typedef ::QString ( ::SireMM::TwoAtomPerturbation::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMM::TwoAtomPerturbation::toString );
            
            TwoAtomPerturbation_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMM::TwoAtomPerturbation::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::TwoAtomPerturbation::typeName );
            
            TwoAtomPerturbation_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMM::TwoAtomPerturbation::wouldChange
        
            typedef bool ( ::SireMM::TwoAtomPerturbation::*wouldChange_function_type )( ::SireMol::Molecule const &,::SireCAS::Values const & ) const;
            wouldChange_function_type wouldChange_function_value( &::SireMM::TwoAtomPerturbation::wouldChange );
            
            TwoAtomPerturbation_exposer.def( 
                "wouldChange"
                , wouldChange_function_value
                , ( bp::arg("molecule"), bp::arg("values") ) );
        
        }
        TwoAtomPerturbation_exposer.staticmethod( "typeName" );
        TwoAtomPerturbation_exposer.def( "__copy__", &__copy__);
        TwoAtomPerturbation_exposer.def( "__deepcopy__", &__copy__);
        TwoAtomPerturbation_exposer.def( "clone", &__copy__);
        TwoAtomPerturbation_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::TwoAtomPerturbation >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TwoAtomPerturbation_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::TwoAtomPerturbation >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TwoAtomPerturbation_exposer.def( "__str__", &__str__< ::SireMM::TwoAtomPerturbation > );
        TwoAtomPerturbation_exposer.def( "__repr__", &__str__< ::SireMM::TwoAtomPerturbation > );
    }

}
