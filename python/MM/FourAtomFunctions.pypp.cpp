// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "FourAtomFunctions.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbols.h"

#include "SireMol/atommatcher.h"

#include "SireMol/atomselection.h"

#include "SireMol/errors.h"

#include "SireMol/moleculeinfodata.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "fouratomfunctions.h"

#include "sireglobal.h"

#include "fouratomfunctions.h"

#include "SireMol/moleculedata.h"

SireMM::FourAtomFunctions __copy__(const SireMM::FourAtomFunctions &other){ return SireMM::FourAtomFunctions(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_FourAtomFunctions_class(){

    { //::SireMM::FourAtomFunctions
        typedef bp::class_< SireMM::FourAtomFunctions, bp::bases< SireMM::AtomFunctions, SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > FourAtomFunctions_exposer_t;
        FourAtomFunctions_exposer_t FourAtomFunctions_exposer = FourAtomFunctions_exposer_t( "FourAtomFunctions", bp::init< >() );
        bp::scope FourAtomFunctions_scope( FourAtomFunctions_exposer );
        FourAtomFunctions_exposer.def( bp::init< SireMol::MoleculeData const & >(( bp::arg("moldata") )) );
        FourAtomFunctions_exposer.def( bp::init< SireMol::MoleculeInfoData const & >(( bp::arg("molinfo") )) );
        FourAtomFunctions_exposer.def( bp::init< SireMM::FourAtomFunctions const & >(( bp::arg("other") )) );
        { //::SireMM::FourAtomFunctions::clear
        
            typedef void ( ::SireMM::FourAtomFunctions::*clear_function_type )( ::SireMol::AtomIdx ) ;
            clear_function_type clear_function_value( &::SireMM::FourAtomFunctions::clear );
            
            FourAtomFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::FourAtomFunctions::clear
        
            typedef void ( ::SireMM::FourAtomFunctions::*clear_function_type )( ::SireMol::AtomID const & ) ;
            clear_function_type clear_function_value( &::SireMM::FourAtomFunctions::clear );
            
            FourAtomFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::FourAtomFunctions::clear
        
            typedef void ( ::SireMM::FourAtomFunctions::*clear_function_type )( ::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx ) ;
            clear_function_type clear_function_value( &::SireMM::FourAtomFunctions::clear );
            
            FourAtomFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3") ) );
        
        }
        { //::SireMM::FourAtomFunctions::clear
        
            typedef void ( ::SireMM::FourAtomFunctions::*clear_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) ;
            clear_function_type clear_function_value( &::SireMM::FourAtomFunctions::clear );
            
            FourAtomFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3") ) );
        
        }
        { //::SireMM::FourAtomFunctions::clear
        
            typedef void ( ::SireMM::FourAtomFunctions::*clear_function_type )( ::SireMol::DihedralID const & ) ;
            clear_function_type clear_function_value( &::SireMM::FourAtomFunctions::clear );
            
            FourAtomFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("dihedralid") ) );
        
        }
        { //::SireMM::FourAtomFunctions::clear
        
            typedef void ( ::SireMM::FourAtomFunctions::*clear_function_type )( ::SireMol::ImproperID const & ) ;
            clear_function_type clear_function_value( &::SireMM::FourAtomFunctions::clear );
            
            FourAtomFunctions_exposer.def( 
                "clear"
                , clear_function_value
                , ( bp::arg("improperid") ) );
        
        }
        { //::SireMM::FourAtomFunctions::clear
        
            typedef void ( ::SireMM::FourAtomFunctions::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::SireMM::FourAtomFunctions::clear );
            
            FourAtomFunctions_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::SireMM::FourAtomFunctions::force
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*force_function_type )( ::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireCAS::Symbol const & ) const;
            force_function_type force_function_value( &::SireMM::FourAtomFunctions::force );
            
            FourAtomFunctions_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("symbol") ) );
        
        }
        { //::SireMM::FourAtomFunctions::force
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*force_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireCAS::Symbol const & ) const;
            force_function_type force_function_value( &::SireMM::FourAtomFunctions::force );
            
            FourAtomFunctions_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("symbol") ) );
        
        }
        { //::SireMM::FourAtomFunctions::force
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*force_function_type )( ::SireMol::DihedralID const &,::SireCAS::Symbol const & ) const;
            force_function_type force_function_value( &::SireMM::FourAtomFunctions::force );
            
            FourAtomFunctions_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("dihedralid"), bp::arg("symbol") ) );
        
        }
        { //::SireMM::FourAtomFunctions::force
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*force_function_type )( ::SireMol::ImproperID const &,::SireCAS::Symbol const & ) const;
            force_function_type force_function_value( &::SireMM::FourAtomFunctions::force );
            
            FourAtomFunctions_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("improperid"), bp::arg("symbol") ) );
        
        }
        { //::SireMM::FourAtomFunctions::forces
        
            typedef ::QVector< SireMM::FourAtomFunction > ( ::SireMM::FourAtomFunctions::*forces_function_type )( ::SireCAS::Symbol const & ) const;
            forces_function_type forces_function_value( &::SireMM::FourAtomFunctions::forces );
            
            FourAtomFunctions_exposer.def( 
                "forces"
                , forces_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireMM::FourAtomFunctions::includeOnly
        
            typedef ::SireMM::FourAtomFunctions ( ::SireMM::FourAtomFunctions::*includeOnly_function_type )( ::SireMol::AtomSelection const &,bool ) const;
            includeOnly_function_type includeOnly_function_value( &::SireMM::FourAtomFunctions::includeOnly );
            
            FourAtomFunctions_exposer.def( 
                "includeOnly"
                , includeOnly_function_value
                , ( bp::arg("selected_atoms"), bp::arg("isstrict")=(bool)(true) ) );
        
        }
        { //::SireMM::FourAtomFunctions::isEmpty
        
            typedef bool ( ::SireMM::FourAtomFunctions::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMM::FourAtomFunctions::isEmpty );
            
            FourAtomFunctions_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireMM::FourAtomFunctions::nFunctions
        
            typedef int ( ::SireMM::FourAtomFunctions::*nFunctions_function_type )(  ) const;
            nFunctions_function_type nFunctions_function_value( &::SireMM::FourAtomFunctions::nFunctions );
            
            FourAtomFunctions_exposer.def( 
                "nFunctions"
                , nFunctions_function_value );
        
        }
        FourAtomFunctions_exposer.def( bp::self != bp::self );
        { //::SireMM::FourAtomFunctions::operator=
        
            typedef ::SireMM::FourAtomFunctions & ( ::SireMM::FourAtomFunctions::*assign_function_type )( ::SireMM::FourAtomFunctions const & ) ;
            assign_function_type assign_function_value( &::SireMM::FourAtomFunctions::operator= );
            
            FourAtomFunctions_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        FourAtomFunctions_exposer.def( bp::self == bp::self );
        { //::SireMM::FourAtomFunctions::potential
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*potential_function_type )( ::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx ) const;
            potential_function_type potential_function_value( &::SireMM::FourAtomFunctions::potential );
            
            FourAtomFunctions_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3") ) );
        
        }
        { //::SireMM::FourAtomFunctions::potential
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*potential_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            potential_function_type potential_function_value( &::SireMM::FourAtomFunctions::potential );
            
            FourAtomFunctions_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3") ) );
        
        }
        { //::SireMM::FourAtomFunctions::potential
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*potential_function_type )( ::SireMol::DihedralID const & ) const;
            potential_function_type potential_function_value( &::SireMM::FourAtomFunctions::potential );
            
            FourAtomFunctions_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("dihedralid") ) );
        
        }
        { //::SireMM::FourAtomFunctions::potential
        
            typedef ::SireCAS::Expression ( ::SireMM::FourAtomFunctions::*potential_function_type )( ::SireMol::ImproperID const & ) const;
            potential_function_type potential_function_value( &::SireMM::FourAtomFunctions::potential );
            
            FourAtomFunctions_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("improperid") ) );
        
        }
        { //::SireMM::FourAtomFunctions::potentials
        
            typedef ::QVector< SireMM::FourAtomFunction > ( ::SireMM::FourAtomFunctions::*potentials_function_type )(  ) const;
            potentials_function_type potentials_function_value( &::SireMM::FourAtomFunctions::potentials );
            
            FourAtomFunctions_exposer.def( 
                "potentials"
                , potentials_function_value );
        
        }
        { //::SireMM::FourAtomFunctions::set
        
            typedef void ( ::SireMM::FourAtomFunctions::*set_function_type )( ::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireMol::AtomIdx,::SireCAS::Expression const & ) ;
            set_function_type set_function_value( &::SireMM::FourAtomFunctions::set );
            
            FourAtomFunctions_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("expression") ) );
        
        }
        { //::SireMM::FourAtomFunctions::set
        
            typedef void ( ::SireMM::FourAtomFunctions::*set_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireCAS::Expression const & ) ;
            set_function_type set_function_value( &::SireMM::FourAtomFunctions::set );
            
            FourAtomFunctions_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("expression") ) );
        
        }
        { //::SireMM::FourAtomFunctions::set
        
            typedef void ( ::SireMM::FourAtomFunctions::*set_function_type )( ::SireMol::DihedralID const &,::SireCAS::Expression const & ) ;
            set_function_type set_function_value( &::SireMM::FourAtomFunctions::set );
            
            FourAtomFunctions_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("dihedralid"), bp::arg("expression") ) );
        
        }
        { //::SireMM::FourAtomFunctions::set
        
            typedef void ( ::SireMM::FourAtomFunctions::*set_function_type )( ::SireMol::ImproperID const &,::SireCAS::Expression const & ) ;
            set_function_type set_function_value( &::SireMM::FourAtomFunctions::set );
            
            FourAtomFunctions_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("improperid"), bp::arg("expression") ) );
        
        }
        { //::SireMM::FourAtomFunctions::substitute
        
            typedef void ( ::SireMM::FourAtomFunctions::*substitute_function_type )( ::SireCAS::Identities const & ) ;
            substitute_function_type substitute_function_value( &::SireMM::FourAtomFunctions::substitute );
            
            FourAtomFunctions_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") ) );
        
        }
        { //::SireMM::FourAtomFunctions::toString
        
            typedef ::QString ( ::SireMM::FourAtomFunctions::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMM::FourAtomFunctions::toString );
            
            FourAtomFunctions_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMM::FourAtomFunctions::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::FourAtomFunctions::typeName );
            
            FourAtomFunctions_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        FourAtomFunctions_exposer.staticmethod( "typeName" );
        FourAtomFunctions_exposer.def( "__copy__", &__copy__);
        FourAtomFunctions_exposer.def( "__deepcopy__", &__copy__);
        FourAtomFunctions_exposer.def( "clone", &__copy__);
        FourAtomFunctions_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::FourAtomFunctions >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FourAtomFunctions_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::FourAtomFunctions >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FourAtomFunctions_exposer.def( "__str__", &__str__< ::SireMM::FourAtomFunctions > );
        FourAtomFunctions_exposer.def( "__repr__", &__str__< ::SireMM::FourAtomFunctions > );
    }

}
