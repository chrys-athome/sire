// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "CLJGrid.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/multidouble.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "SireVol/cartesian.h"

#include "cljcalculator.h"

#include "cljgrid.h"

#include "cljshiftfunction.h"

#include <QElapsedTimer>

#include <QMutex>

#include "cljgrid.h"

SireMM::CLJGrid __copy__(const SireMM::CLJGrid &other){ return SireMM::CLJGrid(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJGrid_class(){

    { //::SireMM::CLJGrid
        typedef bp::class_< SireMM::CLJGrid > CLJGrid_exposer_t;
        CLJGrid_exposer_t CLJGrid_exposer = CLJGrid_exposer_t( "CLJGrid", bp::init< >() );
        bp::scope CLJGrid_scope( CLJGrid_exposer );
        CLJGrid_exposer.def( bp::init< SireVol::AABox const & >(( bp::arg("grid_dimensions") )) );
        CLJGrid_exposer.def( bp::init< SireVol::AABox const &, SireUnits::Dimension::Length >(( bp::arg("grid_dimensions"), bp::arg("grid_spacing") )) );
        CLJGrid_exposer.def( bp::init< SireVol::GridInfo const & >(( bp::arg("grid") )) );
        CLJGrid_exposer.def( bp::init< SireMM::CLJFunction const & >(( bp::arg("cljfunc") )) );
        CLJGrid_exposer.def( bp::init< SireMM::CLJFunction const &, SireVol::AABox const & >(( bp::arg("cljfunc"), bp::arg("grid_dimensions") )) );
        CLJGrid_exposer.def( bp::init< SireMM::CLJFunction const &, SireVol::AABox const &, SireUnits::Dimension::Length >(( bp::arg("cljfunc"), bp::arg("grid_dimensions"), bp::arg("grid_spacing") )) );
        CLJGrid_exposer.def( bp::init< SireMM::CLJFunction const &, SireVol::GridInfo const & >(( bp::arg("cljfunc"), bp::arg("grid") )) );
        CLJGrid_exposer.def( bp::init< SireMM::CLJGrid const & >(( bp::arg("other") )) );
        { //::SireMM::CLJGrid::addFixedAtoms
        
            typedef void ( ::SireMM::CLJGrid::*addFixedAtoms_function_type )( ::SireMM::CLJAtoms const & ) ;
            addFixedAtoms_function_type addFixedAtoms_function_value( &::SireMM::CLJGrid::addFixedAtoms );
            
            CLJGrid_exposer.def( 
                "addFixedAtoms"
                , addFixedAtoms_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::calculate
        
            typedef ::boost::tuples::tuple< double, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMM::CLJGrid::*calculate_function_type )( ::SireMM::CLJAtoms const & ) const;
            calculate_function_type calculate_function_value( &::SireMM::CLJGrid::calculate );
            
            CLJGrid_exposer.def( 
                "calculate"
                , calculate_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::calculate
        
            typedef ::boost::tuples::tuple< double, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMM::CLJGrid::*calculate_function_type )( ::SireMM::CLJBoxes const & ) const;
            calculate_function_type calculate_function_value( &::SireMM::CLJGrid::calculate );
            
            CLJGrid_exposer.def( 
                "calculate"
                , calculate_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::cljFunction
        
            typedef ::SireMM::CLJFunction const & ( ::SireMM::CLJGrid::*cljFunction_function_type )(  ) const;
            cljFunction_function_type cljFunction_function_value( &::SireMM::CLJGrid::cljFunction );
            
            CLJGrid_exposer.def( 
                "cljFunction"
                , cljFunction_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMM::CLJGrid::coulomb
        
            typedef double ( ::SireMM::CLJGrid::*coulomb_function_type )( ::SireMM::CLJAtoms const & ) const;
            coulomb_function_type coulomb_function_value( &::SireMM::CLJGrid::coulomb );
            
            CLJGrid_exposer.def( 
                "coulomb"
                , coulomb_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::coulomb
        
            typedef double ( ::SireMM::CLJGrid::*coulomb_function_type )( ::SireMM::CLJBoxes const & ) const;
            coulomb_function_type coulomb_function_value( &::SireMM::CLJGrid::coulomb );
            
            CLJGrid_exposer.def( 
                "coulomb"
                , coulomb_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::disableGrid
        
            typedef void ( ::SireMM::CLJGrid::*disableGrid_function_type )(  ) ;
            disableGrid_function_type disableGrid_function_value( &::SireMM::CLJGrid::disableGrid );
            
            CLJGrid_exposer.def( 
                "disableGrid"
                , disableGrid_function_value );
        
        }
        { //::SireMM::CLJGrid::enableGrid
        
            typedef void ( ::SireMM::CLJGrid::*enableGrid_function_type )(  ) ;
            enableGrid_function_type enableGrid_function_value( &::SireMM::CLJGrid::enableGrid );
            
            CLJGrid_exposer.def( 
                "enableGrid"
                , enableGrid_function_value );
        
        }
        { //::SireMM::CLJGrid::fixedAtoms
        
            typedef ::SireMM::CLJAtoms ( ::SireMM::CLJGrid::*fixedAtoms_function_type )(  ) const;
            fixedAtoms_function_type fixedAtoms_function_value( &::SireMM::CLJGrid::fixedAtoms );
            
            CLJGrid_exposer.def( 
                "fixedAtoms"
                , fixedAtoms_function_value );
        
        }
        { //::SireMM::CLJGrid::functionSupportsGrid
        
            typedef bool ( ::SireMM::CLJGrid::*functionSupportsGrid_function_type )(  ) const;
            functionSupportsGrid_function_type functionSupportsGrid_function_value( &::SireMM::CLJGrid::functionSupportsGrid );
            
            CLJGrid_exposer.def( 
                "functionSupportsGrid"
                , functionSupportsGrid_function_value );
        
        }
        { //::SireMM::CLJGrid::grid
        
            typedef ::SireVol::GridInfo ( ::SireMM::CLJGrid::*grid_function_type )(  ) const;
            grid_function_type grid_function_value( &::SireMM::CLJGrid::grid );
            
            CLJGrid_exposer.def( 
                "grid"
                , grid_function_value );
        
        }
        { //::SireMM::CLJGrid::gridBuffer
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::CLJGrid::*gridBuffer_function_type )(  ) const;
            gridBuffer_function_type gridBuffer_function_value( &::SireMM::CLJGrid::gridBuffer );
            
            CLJGrid_exposer.def( 
                "gridBuffer"
                , gridBuffer_function_value );
        
        }
        { //::SireMM::CLJGrid::gridDimensions
        
            typedef ::SireVol::AABox ( ::SireMM::CLJGrid::*gridDimensions_function_type )(  ) const;
            gridDimensions_function_type gridDimensions_function_value( &::SireMM::CLJGrid::gridDimensions );
            
            CLJGrid_exposer.def( 
                "gridDimensions"
                , gridDimensions_function_value );
        
        }
        { //::SireMM::CLJGrid::gridSpacing
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::CLJGrid::*gridSpacing_function_type )(  ) const;
            gridSpacing_function_type gridSpacing_function_value( &::SireMM::CLJGrid::gridSpacing );
            
            CLJGrid_exposer.def( 
                "gridSpacing"
                , gridSpacing_function_value );
        
        }
        { //::SireMM::CLJGrid::idOfFixedAtom
        
            typedef ::qint32 ( *idOfFixedAtom_function_type )(  );
            idOfFixedAtom_function_type idOfFixedAtom_function_value( &::SireMM::CLJGrid::idOfFixedAtom );
            
            CLJGrid_exposer.def( 
                "idOfFixedAtom"
                , idOfFixedAtom_function_value );
        
        }
        { //::SireMM::CLJGrid::isEmpty
        
            typedef bool ( ::SireMM::CLJGrid::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMM::CLJGrid::isEmpty );
            
            CLJGrid_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireMM::CLJGrid::lj
        
            typedef double ( ::SireMM::CLJGrid::*lj_function_type )( ::SireMM::CLJAtoms const & ) const;
            lj_function_type lj_function_value( &::SireMM::CLJGrid::lj );
            
            CLJGrid_exposer.def( 
                "lj"
                , lj_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::lj
        
            typedef double ( ::SireMM::CLJGrid::*lj_function_type )( ::SireMM::CLJBoxes const & ) const;
            lj_function_type lj_function_value( &::SireMM::CLJGrid::lj );
            
            CLJGrid_exposer.def( 
                "lj"
                , lj_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::nFixedAtoms
        
            typedef int ( ::SireMM::CLJGrid::*nFixedAtoms_function_type )(  ) const;
            nFixedAtoms_function_type nFixedAtoms_function_value( &::SireMM::CLJGrid::nFixedAtoms );
            
            CLJGrid_exposer.def( 
                "nFixedAtoms"
                , nFixedAtoms_function_value );
        
        }
        CLJGrid_exposer.def( bp::self != bp::self );
        { //::SireMM::CLJGrid::operator=
        
            typedef ::SireMM::CLJGrid & ( ::SireMM::CLJGrid::*assign_function_type )( ::SireMM::CLJGrid const & ) ;
            assign_function_type assign_function_value( &::SireMM::CLJGrid::operator= );
            
            CLJGrid_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        CLJGrid_exposer.def( bp::self == bp::self );
        { //::SireMM::CLJGrid::setCLJFunction
        
            typedef void ( ::SireMM::CLJGrid::*setCLJFunction_function_type )( ::SireMM::CLJFunction const & ) ;
            setCLJFunction_function_type setCLJFunction_function_value( &::SireMM::CLJGrid::setCLJFunction );
            
            CLJGrid_exposer.def( 
                "setCLJFunction"
                , setCLJFunction_function_value
                , ( bp::arg("function") ) );
        
        }
        { //::SireMM::CLJGrid::setFixedAtoms
        
            typedef void ( ::SireMM::CLJGrid::*setFixedAtoms_function_type )( ::SireMM::CLJAtoms const & ) ;
            setFixedAtoms_function_type setFixedAtoms_function_value( &::SireMM::CLJGrid::setFixedAtoms );
            
            CLJGrid_exposer.def( 
                "setFixedAtoms"
                , setFixedAtoms_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::setFixedAtoms
        
            typedef void ( ::SireMM::CLJGrid::*setFixedAtoms_function_type )( ::SireMM::CLJBoxes const & ) ;
            setFixedAtoms_function_type setFixedAtoms_function_value( &::SireMM::CLJGrid::setFixedAtoms );
            
            CLJGrid_exposer.def( 
                "setFixedAtoms"
                , setFixedAtoms_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::setGrid
        
            typedef void ( ::SireMM::CLJGrid::*setGrid_function_type )( ::SireVol::GridInfo const & ) ;
            setGrid_function_type setGrid_function_value( &::SireMM::CLJGrid::setGrid );
            
            CLJGrid_exposer.def( 
                "setGrid"
                , setGrid_function_value
                , ( bp::arg("grid") ) );
        
        }
        { //::SireMM::CLJGrid::setGridBuffer
        
            typedef void ( ::SireMM::CLJGrid::*setGridBuffer_function_type )( ::SireUnits::Dimension::Length ) ;
            setGridBuffer_function_type setGridBuffer_function_value( &::SireMM::CLJGrid::setGridBuffer );
            
            CLJGrid_exposer.def( 
                "setGridBuffer"
                , setGridBuffer_function_value
                , ( bp::arg("grid_buffer") ) );
        
        }
        { //::SireMM::CLJGrid::setGridDimensions
        
            typedef void ( ::SireMM::CLJGrid::*setGridDimensions_function_type )( ::SireVol::AABox const & ) ;
            setGridDimensions_function_type setGridDimensions_function_value( &::SireMM::CLJGrid::setGridDimensions );
            
            CLJGrid_exposer.def( 
                "setGridDimensions"
                , setGridDimensions_function_value
                , ( bp::arg("grid_dimensions") ) );
        
        }
        { //::SireMM::CLJGrid::setGridDimensions
        
            typedef void ( ::SireMM::CLJGrid::*setGridDimensions_function_type )( ::SireMM::CLJAtoms const & ) ;
            setGridDimensions_function_type setGridDimensions_function_value( &::SireMM::CLJGrid::setGridDimensions );
            
            CLJGrid_exposer.def( 
                "setGridDimensions"
                , setGridDimensions_function_value
                , ( bp::arg("atoms") ) );
        
        }
        { //::SireMM::CLJGrid::setGridDimensions
        
            typedef void ( ::SireMM::CLJGrid::*setGridDimensions_function_type )( ::SireMM::CLJAtoms const &,::SireUnits::Dimension::Length ) ;
            setGridDimensions_function_type setGridDimensions_function_value( &::SireMM::CLJGrid::setGridDimensions );
            
            CLJGrid_exposer.def( 
                "setGridDimensions"
                , setGridDimensions_function_value
                , ( bp::arg("atoms"), bp::arg("grid_spacing") ) );
        
        }
        { //::SireMM::CLJGrid::setGridDimensions
        
            typedef void ( ::SireMM::CLJGrid::*setGridDimensions_function_type )( ::SireMM::CLJAtoms const &,::SireUnits::Dimension::Length,::SireUnits::Dimension::Length ) ;
            setGridDimensions_function_type setGridDimensions_function_value( &::SireMM::CLJGrid::setGridDimensions );
            
            CLJGrid_exposer.def( 
                "setGridDimensions"
                , setGridDimensions_function_value
                , ( bp::arg("atoms"), bp::arg("grid_spacing"), bp::arg("buffer") ) );
        
        }
        { //::SireMM::CLJGrid::setGridSpacing
        
            typedef void ( ::SireMM::CLJGrid::*setGridSpacing_function_type )( ::SireUnits::Dimension::Length ) ;
            setGridSpacing_function_type setGridSpacing_function_value( &::SireMM::CLJGrid::setGridSpacing );
            
            CLJGrid_exposer.def( 
                "setGridSpacing"
                , setGridSpacing_function_value
                , ( bp::arg("grid_spacing") ) );
        
        }
        { //::SireMM::CLJGrid::setUseGrid
        
            typedef void ( ::SireMM::CLJGrid::*setUseGrid_function_type )( bool ) ;
            setUseGrid_function_type setUseGrid_function_value( &::SireMM::CLJGrid::setUseGrid );
            
            CLJGrid_exposer.def( 
                "setUseGrid"
                , setUseGrid_function_value
                , ( bp::arg("on") ) );
        
        }
        { //::SireMM::CLJGrid::toString
        
            typedef ::QString ( ::SireMM::CLJGrid::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMM::CLJGrid::toString );
            
            CLJGrid_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMM::CLJGrid::total
        
            typedef void ( ::SireMM::CLJGrid::*total_function_type )( ::SireMM::CLJAtoms const &,double &,double & ) const;
            total_function_type total_function_value( &::SireMM::CLJGrid::total );
            
            CLJGrid_exposer.def( 
                "total"
                , total_function_value
                , ( bp::arg("atoms"), bp::arg("cnrg"), bp::arg("ljnrg") ) );
        
        }
        { //::SireMM::CLJGrid::total
        
            typedef void ( ::SireMM::CLJGrid::*total_function_type )( ::SireMM::CLJBoxes const &,double &,double & ) const;
            total_function_type total_function_value( &::SireMM::CLJGrid::total );
            
            CLJGrid_exposer.def( 
                "total"
                , total_function_value
                , ( bp::arg("atoms"), bp::arg("cnrg"), bp::arg("ljnrg") ) );
        
        }
        { //::SireMM::CLJGrid::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJGrid::typeName );
            
            CLJGrid_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMM::CLJGrid::usesGrid
        
            typedef bool ( ::SireMM::CLJGrid::*usesGrid_function_type )(  ) const;
            usesGrid_function_type usesGrid_function_value( &::SireMM::CLJGrid::usesGrid );
            
            CLJGrid_exposer.def( 
                "usesGrid"
                , usesGrid_function_value );
        
        }
        { //::SireMM::CLJGrid::what
        
            typedef char const * ( ::SireMM::CLJGrid::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMM::CLJGrid::what );
            
            CLJGrid_exposer.def( 
                "what"
                , what_function_value );
        
        }
        CLJGrid_exposer.staticmethod( "idOfFixedAtom" );
        CLJGrid_exposer.staticmethod( "typeName" );
        CLJGrid_exposer.def( "__copy__", &__copy__);
        CLJGrid_exposer.def( "__deepcopy__", &__copy__);
        CLJGrid_exposer.def( "clone", &__copy__);
        CLJGrid_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJGrid >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJGrid_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJGrid >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJGrid_exposer.def( "__str__", &__str__< ::SireMM::CLJGrid > );
        CLJGrid_exposer.def( "__repr__", &__str__< ::SireMM::CLJGrid > );
    }

}
