// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NotEqualTo.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireError/errors.h"

#include "SireMaths/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "complexvalues.h"

#include "conditional.h"

#include "expressions.h"

#include "functions.h"

#include "identities.h"

#include "symbols.h"

#include "values.h"

#include "conditional.h"

SireCAS::NotEqualTo __copy__(const SireCAS::NotEqualTo &other){ return SireCAS::NotEqualTo(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_NotEqualTo_class(){

    { //::SireCAS::NotEqualTo
        typedef bp::class_< SireCAS::NotEqualTo, bp::bases< SireCAS::Condition, SireCAS::ExBase > > NotEqualTo_exposer_t;
        NotEqualTo_exposer_t NotEqualTo_exposer = NotEqualTo_exposer_t( "NotEqualTo", bp::init< >() );
        bp::scope NotEqualTo_scope( NotEqualTo_exposer );
        NotEqualTo_exposer.def( bp::init< SireCAS::Expression const &, SireCAS::Expression const & >(( bp::arg("left_hand_side"), bp::arg("right_hand_side") )) );
        NotEqualTo_exposer.def( bp::init< SireCAS::NotEqualTo const & >(( bp::arg("other") )) );
        { //::SireCAS::NotEqualTo::alwaysFalse
        
            typedef bool ( ::SireCAS::NotEqualTo::*alwaysFalse_function_type )(  ) const;
            alwaysFalse_function_type alwaysFalse_function_value( &::SireCAS::NotEqualTo::alwaysFalse );
            
            NotEqualTo_exposer.def( 
                "alwaysFalse"
                , alwaysFalse_function_value );
        
        }
        { //::SireCAS::NotEqualTo::alwaysTrue
        
            typedef bool ( ::SireCAS::NotEqualTo::*alwaysTrue_function_type )(  ) const;
            alwaysTrue_function_type alwaysTrue_function_value( &::SireCAS::NotEqualTo::alwaysTrue );
            
            NotEqualTo_exposer.def( 
                "alwaysTrue"
                , alwaysTrue_function_value );
        
        }
        { //::SireCAS::NotEqualTo::operator=
        
            typedef ::SireCAS::NotEqualTo & ( ::SireCAS::NotEqualTo::*assign_function_type )( ::SireCAS::NotEqualTo const & ) ;
            assign_function_type assign_function_value( &::SireCAS::NotEqualTo::operator= );
            
            NotEqualTo_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        NotEqualTo_exposer.def( bp::self == bp::self );
        NotEqualTo_exposer.def( bp::self == bp::other< SireCAS::ExBase >() );
        { //::SireCAS::NotEqualTo::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::NotEqualTo::typeName );
            
            NotEqualTo_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireCAS::NotEqualTo::what
        
            typedef char const * ( ::SireCAS::NotEqualTo::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireCAS::NotEqualTo::what );
            
            NotEqualTo_exposer.def( 
                "what"
                , what_function_value );
        
        }
        NotEqualTo_exposer.staticmethod( "typeName" );
        NotEqualTo_exposer.def( "__copy__", &__copy__);
        NotEqualTo_exposer.def( "__deepcopy__", &__copy__);
        NotEqualTo_exposer.def( "clone", &__copy__);
        NotEqualTo_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCAS::NotEqualTo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NotEqualTo_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCAS::NotEqualTo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NotEqualTo_exposer.def( "__str__", &__str__< ::SireCAS::NotEqualTo > );
        NotEqualTo_exposer.def( "__repr__", &__str__< ::SireCAS::NotEqualTo > );
    }

}
