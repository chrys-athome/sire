// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "QFileInfo.pypp.hpp"

namespace bp = boost::python;

QFileInfo __copy__(const QFileInfo &other){ return QFileInfo(other); }

void register_QFileInfo_class(){

    { //::QFileInfo
        typedef bp::class_< QFileInfo > QFileInfo_exposer_t;
        QFileInfo_exposer_t QFileInfo_exposer = QFileInfo_exposer_t( "QFileInfo" );
        bp::scope QFileInfo_scope( QFileInfo_exposer );
        QFileInfo_exposer.def( bp::init< >() );
        QFileInfo_exposer.def( bp::init< QString const & >(( bp::arg("file") )) );
        QFileInfo_exposer.def( bp::init< QFile const & >(( bp::arg("file") )) );
        QFileInfo_exposer.def( bp::init< QDir const &, QString const & >(( bp::arg("dir"), bp::arg("file") )) );
        QFileInfo_exposer.def( bp::init< QFileInfo const & >(( bp::arg("fileinfo") )) );
        { //::QFileInfo::absoluteDir
        
            typedef ::QDir ( ::QFileInfo::*absoluteDir_function_type )(  ) const;
            absoluteDir_function_type absoluteDir_function_value( &::QFileInfo::absoluteDir );
            
            QFileInfo_exposer.def( 
                "absoluteDir"
                , absoluteDir_function_value );
        
        }
        { //::QFileInfo::absoluteFilePath
        
            typedef ::QString ( ::QFileInfo::*absoluteFilePath_function_type )(  ) const;
            absoluteFilePath_function_type absoluteFilePath_function_value( &::QFileInfo::absoluteFilePath );
            
            QFileInfo_exposer.def( 
                "absoluteFilePath"
                , absoluteFilePath_function_value );
        
        }
        { //::QFileInfo::absolutePath
        
            typedef ::QString ( ::QFileInfo::*absolutePath_function_type )(  ) const;
            absolutePath_function_type absolutePath_function_value( &::QFileInfo::absolutePath );
            
            QFileInfo_exposer.def( 
                "absolutePath"
                , absolutePath_function_value );
        
        }
        { //::QFileInfo::baseName
        
            typedef ::QString ( ::QFileInfo::*baseName_function_type )(  ) const;
            baseName_function_type baseName_function_value( &::QFileInfo::baseName );
            
            QFileInfo_exposer.def( 
                "baseName"
                , baseName_function_value );
        
        }
        { //::QFileInfo::caching
        
            typedef bool ( ::QFileInfo::*caching_function_type )(  ) const;
            caching_function_type caching_function_value( &::QFileInfo::caching );
            
            QFileInfo_exposer.def( 
                "caching"
                , caching_function_value );
        
        }
        { //::QFileInfo::canonicalFilePath
        
            typedef ::QString ( ::QFileInfo::*canonicalFilePath_function_type )(  ) const;
            canonicalFilePath_function_type canonicalFilePath_function_value( &::QFileInfo::canonicalFilePath );
            
            QFileInfo_exposer.def( 
                "canonicalFilePath"
                , canonicalFilePath_function_value );
        
        }
        { //::QFileInfo::canonicalPath
        
            typedef ::QString ( ::QFileInfo::*canonicalPath_function_type )(  ) const;
            canonicalPath_function_type canonicalPath_function_value( &::QFileInfo::canonicalPath );
            
            QFileInfo_exposer.def( 
                "canonicalPath"
                , canonicalPath_function_value );
        
        }
        { //::QFileInfo::completeBaseName
        
            typedef ::QString ( ::QFileInfo::*completeBaseName_function_type )(  ) const;
            completeBaseName_function_type completeBaseName_function_value( &::QFileInfo::completeBaseName );
            
            QFileInfo_exposer.def( 
                "completeBaseName"
                , completeBaseName_function_value );
        
        }
        { //::QFileInfo::completeSuffix
        
            typedef ::QString ( ::QFileInfo::*completeSuffix_function_type )(  ) const;
            completeSuffix_function_type completeSuffix_function_value( &::QFileInfo::completeSuffix );
            
            QFileInfo_exposer.def( 
                "completeSuffix"
                , completeSuffix_function_value );
        
        }
        { //::QFileInfo::created
        
            typedef ::QDateTime ( ::QFileInfo::*created_function_type )(  ) const;
            created_function_type created_function_value( &::QFileInfo::created );
            
            QFileInfo_exposer.def( 
                "created"
                , created_function_value );
        
        }
        { //::QFileInfo::dir
        
            typedef ::QDir ( ::QFileInfo::*dir_function_type )(  ) const;
            dir_function_type dir_function_value( &::QFileInfo::dir );
            
            QFileInfo_exposer.def( 
                "dir"
                , dir_function_value );
        
        }
        { //::QFileInfo::exists
        
            typedef bool ( ::QFileInfo::*exists_function_type )(  ) const;
            exists_function_type exists_function_value( &::QFileInfo::exists );
            
            QFileInfo_exposer.def( 
                "exists"
                , exists_function_value );
        
        }
        { //::QFileInfo::fileName
        
            typedef ::QString ( ::QFileInfo::*fileName_function_type )(  ) const;
            fileName_function_type fileName_function_value( &::QFileInfo::fileName );
            
            QFileInfo_exposer.def( 
                "fileName"
                , fileName_function_value );
        
        }
        { //::QFileInfo::filePath
        
            typedef ::QString ( ::QFileInfo::*filePath_function_type )(  ) const;
            filePath_function_type filePath_function_value( &::QFileInfo::filePath );
            
            QFileInfo_exposer.def( 
                "filePath"
                , filePath_function_value );
        
        }
        { //::QFileInfo::group
        
            typedef ::QString ( ::QFileInfo::*group_function_type )(  ) const;
            group_function_type group_function_value( &::QFileInfo::group );
            
            QFileInfo_exposer.def( 
                "group"
                , group_function_value );
        
        }
        { //::QFileInfo::groupId
        
            typedef ::uint ( ::QFileInfo::*groupId_function_type )(  ) const;
            groupId_function_type groupId_function_value( &::QFileInfo::groupId );
            
            QFileInfo_exposer.def( 
                "groupId"
                , groupId_function_value );
        
        }
        { //::QFileInfo::isAbsolute
        
            typedef bool ( ::QFileInfo::*isAbsolute_function_type )(  ) const;
            isAbsolute_function_type isAbsolute_function_value( &::QFileInfo::isAbsolute );
            
            QFileInfo_exposer.def( 
                "isAbsolute"
                , isAbsolute_function_value );
        
        }
        { //::QFileInfo::isDir
        
            typedef bool ( ::QFileInfo::*isDir_function_type )(  ) const;
            isDir_function_type isDir_function_value( &::QFileInfo::isDir );
            
            QFileInfo_exposer.def( 
                "isDir"
                , isDir_function_value );
        
        }
        { //::QFileInfo::isExecutable
        
            typedef bool ( ::QFileInfo::*isExecutable_function_type )(  ) const;
            isExecutable_function_type isExecutable_function_value( &::QFileInfo::isExecutable );
            
            QFileInfo_exposer.def( 
                "isExecutable"
                , isExecutable_function_value );
        
        }
        { //::QFileInfo::isFile
        
            typedef bool ( ::QFileInfo::*isFile_function_type )(  ) const;
            isFile_function_type isFile_function_value( &::QFileInfo::isFile );
            
            QFileInfo_exposer.def( 
                "isFile"
                , isFile_function_value );
        
        }
        { //::QFileInfo::isHidden
        
            typedef bool ( ::QFileInfo::*isHidden_function_type )(  ) const;
            isHidden_function_type isHidden_function_value( &::QFileInfo::isHidden );
            
            QFileInfo_exposer.def( 
                "isHidden"
                , isHidden_function_value );
        
        }
        { //::QFileInfo::isReadable
        
            typedef bool ( ::QFileInfo::*isReadable_function_type )(  ) const;
            isReadable_function_type isReadable_function_value( &::QFileInfo::isReadable );
            
            QFileInfo_exposer.def( 
                "isReadable"
                , isReadable_function_value );
        
        }
        { //::QFileInfo::isRelative
        
            typedef bool ( ::QFileInfo::*isRelative_function_type )(  ) const;
            isRelative_function_type isRelative_function_value( &::QFileInfo::isRelative );
            
            QFileInfo_exposer.def( 
                "isRelative"
                , isRelative_function_value );
        
        }
        { //::QFileInfo::isRoot
        
            typedef bool ( ::QFileInfo::*isRoot_function_type )(  ) const;
            isRoot_function_type isRoot_function_value( &::QFileInfo::isRoot );
            
            QFileInfo_exposer.def( 
                "isRoot"
                , isRoot_function_value );
        
        }
        { //::QFileInfo::isSymLink
        
            typedef bool ( ::QFileInfo::*isSymLink_function_type )(  ) const;
            isSymLink_function_type isSymLink_function_value( &::QFileInfo::isSymLink );
            
            QFileInfo_exposer.def( 
                "isSymLink"
                , isSymLink_function_value );
        
        }
        { //::QFileInfo::isWritable
        
            typedef bool ( ::QFileInfo::*isWritable_function_type )(  ) const;
            isWritable_function_type isWritable_function_value( &::QFileInfo::isWritable );
            
            QFileInfo_exposer.def( 
                "isWritable"
                , isWritable_function_value );
        
        }
        { //::QFileInfo::lastModified
        
            typedef ::QDateTime ( ::QFileInfo::*lastModified_function_type )(  ) const;
            lastModified_function_type lastModified_function_value( &::QFileInfo::lastModified );
            
            QFileInfo_exposer.def( 
                "lastModified"
                , lastModified_function_value );
        
        }
        { //::QFileInfo::lastRead
        
            typedef ::QDateTime ( ::QFileInfo::*lastRead_function_type )(  ) const;
            lastRead_function_type lastRead_function_value( &::QFileInfo::lastRead );
            
            QFileInfo_exposer.def( 
                "lastRead"
                , lastRead_function_value );
        
        }
        { //::QFileInfo::makeAbsolute
        
            typedef bool ( ::QFileInfo::*makeAbsolute_function_type )(  ) ;
            makeAbsolute_function_type makeAbsolute_function_value( &::QFileInfo::makeAbsolute );
            
            QFileInfo_exposer.def( 
                "makeAbsolute"
                , makeAbsolute_function_value );
        
        }
        QFileInfo_exposer.def( bp::self != bp::self );
        { //::QFileInfo::operator=
        
            typedef ::QFileInfo & ( ::QFileInfo::*assign_function_type )( ::QFileInfo const & ) ;
            assign_function_type assign_function_value( &::QFileInfo::operator= );
            
            QFileInfo_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("fileinfo") )
                , bp::return_self< >() );
        
        }
        QFileInfo_exposer.def( bp::self == bp::self );
        { //::QFileInfo::owner
        
            typedef ::QString ( ::QFileInfo::*owner_function_type )(  ) const;
            owner_function_type owner_function_value( &::QFileInfo::owner );
            
            QFileInfo_exposer.def( 
                "owner"
                , owner_function_value );
        
        }
        { //::QFileInfo::ownerId
        
            typedef ::uint ( ::QFileInfo::*ownerId_function_type )(  ) const;
            ownerId_function_type ownerId_function_value( &::QFileInfo::ownerId );
            
            QFileInfo_exposer.def( 
                "ownerId"
                , ownerId_function_value );
        
        }
        { //::QFileInfo::path
        
            typedef ::QString ( ::QFileInfo::*path_function_type )(  ) const;
            path_function_type path_function_value( &::QFileInfo::path );
            
            QFileInfo_exposer.def( 
                "path"
                , path_function_value );
        
        }
        { //::QFileInfo::permission
        
            typedef bool ( ::QFileInfo::*permission_function_type )( ::QFlags< QFile::Permission > ) const;
            permission_function_type permission_function_value( &::QFileInfo::permission );
            
            QFileInfo_exposer.def( 
                "permission"
                , permission_function_value
                , ( bp::arg("permissions") ) );
        
        }
        { //::QFileInfo::permissions
        
            typedef ::QFlags< QFile::Permission > ( ::QFileInfo::*permissions_function_type )(  ) const;
            permissions_function_type permissions_function_value( &::QFileInfo::permissions );
            
            QFileInfo_exposer.def( 
                "permissions"
                , permissions_function_value );
        
        }
        { //::QFileInfo::readLink
        
            typedef ::QString ( ::QFileInfo::*readLink_function_type )(  ) const;
            readLink_function_type readLink_function_value( &::QFileInfo::readLink );
            
            QFileInfo_exposer.def( 
                "readLink"
                , readLink_function_value );
        
        }
        { //::QFileInfo::refresh
        
            typedef void ( ::QFileInfo::*refresh_function_type )(  ) ;
            refresh_function_type refresh_function_value( &::QFileInfo::refresh );
            
            QFileInfo_exposer.def( 
                "refresh"
                , refresh_function_value );
        
        }
        { //::QFileInfo::setCaching
        
            typedef void ( ::QFileInfo::*setCaching_function_type )( bool ) ;
            setCaching_function_type setCaching_function_value( &::QFileInfo::setCaching );
            
            QFileInfo_exposer.def( 
                "setCaching"
                , setCaching_function_value
                , ( bp::arg("on") ) );
        
        }
        { //::QFileInfo::setFile
        
            typedef void ( ::QFileInfo::*setFile_function_type )( ::QString const & ) ;
            setFile_function_type setFile_function_value( &::QFileInfo::setFile );
            
            QFileInfo_exposer.def( 
                "setFile"
                , setFile_function_value
                , ( bp::arg("file") ) );
        
        }
        { //::QFileInfo::setFile
        
            typedef void ( ::QFileInfo::*setFile_function_type )( ::QFile const & ) ;
            setFile_function_type setFile_function_value( &::QFileInfo::setFile );
            
            QFileInfo_exposer.def( 
                "setFile"
                , setFile_function_value
                , ( bp::arg("file") ) );
        
        }
        { //::QFileInfo::setFile
        
            typedef void ( ::QFileInfo::*setFile_function_type )( ::QDir const &,::QString const & ) ;
            setFile_function_type setFile_function_value( &::QFileInfo::setFile );
            
            QFileInfo_exposer.def( 
                "setFile"
                , setFile_function_value
                , ( bp::arg("dir"), bp::arg("file") ) );
        
        }
        { //::QFileInfo::size
        
            typedef ::qint64 ( ::QFileInfo::*size_function_type )(  ) const;
            size_function_type size_function_value( &::QFileInfo::size );
            
            QFileInfo_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::QFileInfo::suffix
        
            typedef ::QString ( ::QFileInfo::*suffix_function_type )(  ) const;
            suffix_function_type suffix_function_value( &::QFileInfo::suffix );
            
            QFileInfo_exposer.def( 
                "suffix"
                , suffix_function_value );
        
        }
        { //::QFileInfo::symLinkTarget
        
            typedef ::QString ( ::QFileInfo::*symLinkTarget_function_type )(  ) const;
            symLinkTarget_function_type symLinkTarget_function_value( &::QFileInfo::symLinkTarget );
            
            QFileInfo_exposer.def( 
                "symLinkTarget"
                , symLinkTarget_function_value );
        
        }
        QFileInfo_exposer.def( "__copy__", &__copy__);
        QFileInfo_exposer.def( "__deepcopy__", &__copy__);
        QFileInfo_exposer.def( "clone", &__copy__);
    }

}
