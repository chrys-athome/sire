// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "__array_1.pypp.hpp"
#include <QByteArray>
#include <QDateTime>
#include <QUuid>
#include <QBitArray>
#include "QUuid.pypp.hpp"

namespace bp = boost::python;

struct QUuid_wrapper : QUuid, bp::wrapper< QUuid > {

    QUuid_wrapper(QUuid const & arg )
    : QUuid( arg )
      , bp::wrapper< QUuid >(){
        // copy constructor
        
    }

    QUuid_wrapper( )
    : QUuid( )
      , bp::wrapper< QUuid >(){
        // null constructor
    
    }

    QUuid_wrapper(::uint l, ::ushort w1, ::ushort w2, ::uchar b1, ::uchar b2, ::uchar b3, ::uchar b4, ::uchar b5, ::uchar b6, ::uchar b7, ::uchar b8 )
    : QUuid( l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8 )
      , bp::wrapper< QUuid >(){
        // constructor
    
    }

    QUuid_wrapper(::QString const & arg0 )
    : QUuid( boost::ref(arg0) )
      , bp::wrapper< QUuid >(){
        // constructor
    
    }

    QUuid_wrapper(char const * arg0 )
    : QUuid( arg0 )
      , bp::wrapper< QUuid >(){
        // constructor
    
    }

    QUuid_wrapper(::QByteArray const & arg0 )
    : QUuid( boost::ref(arg0) )
      , bp::wrapper< QUuid >(){
        // constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< unsigned char, 8>
    pyplusplus_data4_wrapper( ::QUuid & inst ){
        return pyplusplus::containers::static_sized::array_1_t< unsigned char, 8>( inst.data4 );
    }

};

QUuid __copy__(const QUuid &other){ return QUuid(other); }

#include "Qt/qdatastream.hpp"

void register_QUuid_class(){

    { //::QUuid
        typedef bp::class_< QUuid_wrapper > QUuid_exposer_t;
        QUuid_exposer_t QUuid_exposer = QUuid_exposer_t( "QUuid", bp::init< >() );
        bp::scope QUuid_scope( QUuid_exposer );
        bp::enum_< QUuid::Variant>("Variant")
            .value("VarUnknown", QUuid::VarUnknown)
            .value("NCS", QUuid::NCS)
            .value("DCE", QUuid::DCE)
            .value("Microsoft", QUuid::Microsoft)
            .value("Reserved", QUuid::Reserved)
            .export_values()
            ;
        bp::enum_< QUuid::Version>("Version")
            .value("VerUnknown", QUuid::VerUnknown)
            .value("Time", QUuid::Time)
            .value("EmbeddedPOSIX", QUuid::EmbeddedPOSIX)
            .value("Md5", QUuid::Md5)
            .value("Name", QUuid::Name)
            .value("Random", QUuid::Random)
            .value("Sha1", QUuid::Sha1)
            .export_values()
            ;
        QUuid_exposer.def( bp::init< uint, ushort, ushort, uchar, uchar, uchar, uchar, uchar, uchar, uchar, uchar >(( bp::arg("l"), bp::arg("w1"), bp::arg("w2"), bp::arg("b1"), bp::arg("b2"), bp::arg("b3"), bp::arg("b4"), bp::arg("b5"), bp::arg("b6"), bp::arg("b7"), bp::arg("b8") )) );
        QUuid_exposer.def( bp::init< QString const & >(( bp::arg("arg0") )) );
        QUuid_exposer.def( bp::init< char const * >(( bp::arg("arg0") )) );
        QUuid_exposer.def( bp::init< QByteArray const & >(( bp::arg("arg0") )) );
        { //::QUuid::createUuid
        
            typedef ::QUuid ( *createUuid_function_type )(  );
            createUuid_function_type createUuid_function_value( &::QUuid::createUuid );
            
            QUuid_exposer.def( 
                "createUuid"
                , createUuid_function_value );
        
        }
        { //::QUuid::createUuidV3
        
            typedef ::QUuid ( *createUuidV3_function_type )( ::QUuid const &,::QByteArray const & );
            createUuidV3_function_type createUuidV3_function_value( &::QUuid::createUuidV3 );
            
            QUuid_exposer.def( 
                "createUuidV3"
                , createUuidV3_function_value
                , ( bp::arg("ns"), bp::arg("baseData") ) );
        
        }
        { //::QUuid::createUuidV3
        
            typedef ::QUuid ( *createUuidV3_function_type )( ::QUuid const &,::QString const & );
            createUuidV3_function_type createUuidV3_function_value( &::QUuid::createUuidV3 );
            
            QUuid_exposer.def( 
                "createUuidV3"
                , createUuidV3_function_value
                , ( bp::arg("ns"), bp::arg("baseData") ) );
        
        }
        { //::QUuid::createUuidV5
        
            typedef ::QUuid ( *createUuidV5_function_type )( ::QUuid const &,::QByteArray const & );
            createUuidV5_function_type createUuidV5_function_value( &::QUuid::createUuidV5 );
            
            QUuid_exposer.def( 
                "createUuidV5"
                , createUuidV5_function_value
                , ( bp::arg("ns"), bp::arg("baseData") ) );
        
        }
        { //::QUuid::createUuidV5
        
            typedef ::QUuid ( *createUuidV5_function_type )( ::QUuid const &,::QString const & );
            createUuidV5_function_type createUuidV5_function_value( &::QUuid::createUuidV5 );
            
            QUuid_exposer.def( 
                "createUuidV5"
                , createUuidV5_function_value
                , ( bp::arg("ns"), bp::arg("baseData") ) );
        
        }
        { //::QUuid::fromRfc4122
        
            typedef ::QUuid ( *fromRfc4122_function_type )( ::QByteArray const & );
            fromRfc4122_function_type fromRfc4122_function_value( &::QUuid::fromRfc4122 );
            
            QUuid_exposer.def( 
                "fromRfc4122"
                , fromRfc4122_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::QUuid::isNull
        
            typedef bool ( ::QUuid::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::QUuid::isNull );
            
            QUuid_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        QUuid_exposer.def( bp::self != bp::self );
        QUuid_exposer.def( bp::self < bp::self );
        QUuid_exposer.def( bp::self == bp::self );
        QUuid_exposer.def( bp::self > bp::self );
        { //::QUuid::toByteArray
        
            typedef ::QByteArray ( ::QUuid::*toByteArray_function_type )(  ) const;
            toByteArray_function_type toByteArray_function_value( &::QUuid::toByteArray );
            
            QUuid_exposer.def( 
                "toByteArray"
                , toByteArray_function_value );
        
        }
        { //::QUuid::toRfc4122
        
            typedef ::QByteArray ( ::QUuid::*toRfc4122_function_type )(  ) const;
            toRfc4122_function_type toRfc4122_function_value( &::QUuid::toRfc4122 );
            
            QUuid_exposer.def( 
                "toRfc4122"
                , toRfc4122_function_value );
        
        }
        { //::QUuid::toString
        
            typedef ::QString ( ::QUuid::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::QUuid::toString );
            
            QUuid_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::QUuid::variant
        
            typedef ::QUuid::Variant ( ::QUuid::*variant_function_type )(  ) const;
            variant_function_type variant_function_value( &::QUuid::variant );
            
            QUuid_exposer.def( 
                "variant"
                , variant_function_value );
        
        }
        { //::QUuid::version
        
            typedef ::QUuid::Version ( ::QUuid::*version_function_type )(  ) const;
            version_function_type version_function_value( &::QUuid::version );
            
            QUuid_exposer.def( 
                "version"
                , version_function_value );
        
        }
        QUuid_exposer.def_readwrite( "data1", &QUuid::data1 );
        QUuid_exposer.def_readwrite( "data2", &QUuid::data2 );
        QUuid_exposer.def_readwrite( "data3", &QUuid::data3 );
        pyplusplus::containers::static_sized::register_array_1< unsigned char, 8 >( "__array_1_unsigned_char_8" );
        { //QUuid::data4 [variable], type=uchar[8]
        
            typedef pyplusplus::containers::static_sized::array_1_t< unsigned char, 8> ( *array_wrapper_creator )( ::QUuid & );
            
            QUuid_exposer.add_property( "data4"
                , bp::make_function( array_wrapper_creator(&QUuid_wrapper::pyplusplus_data4_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        QUuid_exposer.staticmethod( "createUuid" );
        QUuid_exposer.staticmethod( "createUuidV3" );
        QUuid_exposer.staticmethod( "createUuidV5" );
        QUuid_exposer.staticmethod( "fromRfc4122" );
        QUuid_exposer.def( "__copy__", &__copy__);
        QUuid_exposer.def( "__deepcopy__", &__copy__);
        QUuid_exposer.def( "clone", &__copy__);
        QUuid_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::QUuid >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QUuid_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::QUuid >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
    }

}
