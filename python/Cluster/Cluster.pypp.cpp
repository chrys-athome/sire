// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Cluster.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireError/printerror.h"

#include "backend.h"

#include "cluster.h"

#include "frontend.h"

#include "nodes.h"

#include <QDebug>

#include <QHash>

#include <QMutex>

#include <QTime>

#include <QWaitCondition>

#include "cluster.h"

SireCluster::Cluster __copy__(const SireCluster::Cluster &other){ return SireCluster::Cluster(other); }

const char* pvt_get_name(const SireCluster::Cluster&){ return "SireCluster::Cluster";}

void register_Cluster_class(){

    { //::SireCluster::Cluster
        typedef bp::class_< SireCluster::Cluster > Cluster_exposer_t;
        Cluster_exposer_t Cluster_exposer = Cluster_exposer_t( "Cluster" );
        bp::scope Cluster_scope( Cluster_exposer );
        { //::SireCluster::Cluster::UIDs
        
            typedef ::QList< QUuid > ( *UIDs_function_type )(  );
            UIDs_function_type UIDs_function_value( &::SireCluster::Cluster::UIDs );
            
            Cluster_exposer.def( 
                "UIDs"
                , UIDs_function_value );
        
        }
        { //::SireCluster::Cluster::getAllNodes
        
            typedef ::SireCluster::Nodes ( *getAllNodes_function_type )(  );
            getAllNodes_function_type getAllNodes_function_value( &::SireCluster::Cluster::getAllNodes );
            
            Cluster_exposer.def( 
                "getAllNodes"
                , getAllNodes_function_value );
        
        }
        { //::SireCluster::Cluster::getAllNodes
        
            typedef ::SireCluster::Nodes ( *getAllNodes_function_type )( int );
            getAllNodes_function_type getAllNodes_function_value( &::SireCluster::Cluster::getAllNodes );
            
            Cluster_exposer.def( 
                "getAllNodes"
                , getAllNodes_function_value
                , ( bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getCount
        
            typedef int ( *getCount_function_type )(  );
            getCount_function_type getCount_function_value( &::SireCluster::Cluster::getCount );
            
            Cluster_exposer.def( 
                "getCount"
                , getCount_function_value );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Nodes ( *getNode_function_type )(  );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Nodes ( *getNode_function_type )( int );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value
                , ( bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Nodes ( *getNode_function_type )( ::QUuid const & );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value
                , ( bp::arg("uid") ) );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Nodes ( *getNode_function_type )( ::QUuid const &,int );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value
                , ( bp::arg("uid"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( int );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("nnodes") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( int,int );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("nnodes"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( ::QList< QUuid > const & );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("uids") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( ::QList< QUuid > const &,int );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("uids"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getRank
        
            typedef int ( *getRank_function_type )(  );
            getRank_function_type getRank_function_value( &::SireCluster::Cluster::getRank );
            
            Cluster_exposer.def( 
                "getRank"
                , getRank_function_value );
        
        }
        { //::SireCluster::Cluster::isLocal
        
            typedef bool ( *isLocal_function_type )( ::QUuid const & );
            isLocal_function_type isLocal_function_value( &::SireCluster::Cluster::isLocal );
            
            Cluster_exposer.def( 
                "isLocal"
                , isLocal_function_value
                , ( bp::arg("uid") ) );
        
        }
        { //::SireCluster::Cluster::isRunning
        
            typedef bool ( *isRunning_function_type )(  );
            isRunning_function_type isRunning_function_value( &::SireCluster::Cluster::isRunning );
            
            Cluster_exposer.def( 
                "isRunning"
                , isRunning_function_value );
        
        }
        { //::SireCluster::Cluster::localUIDs
        
            typedef ::QList< QUuid > ( *localUIDs_function_type )(  );
            localUIDs_function_type localUIDs_function_value( &::SireCluster::Cluster::localUIDs );
            
            Cluster_exposer.def( 
                "localUIDs"
                , localUIDs_function_value );
        
        }
        { //::SireCluster::Cluster::shutdown
        
            typedef void ( *shutdown_function_type )(  );
            shutdown_function_type shutdown_function_value( &::SireCluster::Cluster::shutdown );
            
            Cluster_exposer.def( 
                "shutdown"
                , shutdown_function_value );
        
        }
        { //::SireCluster::Cluster::start
        
            typedef void ( *start_function_type )( int );
            start_function_type start_function_value( &::SireCluster::Cluster::start );
            
            Cluster_exposer.def( 
                "start"
                , start_function_value
                , ( bp::arg("ppn")=(int)(1) ) );
        
        }
        { //::SireCluster::Cluster::supportsMPI
        
            typedef bool ( *supportsMPI_function_type )(  );
            supportsMPI_function_type supportsMPI_function_value( &::SireCluster::Cluster::supportsMPI );
            
            Cluster_exposer.def( 
                "supportsMPI"
                , supportsMPI_function_value );
        
        }
        { //::SireCluster::Cluster::wait
        
            typedef void ( *wait_function_type )(  );
            wait_function_type wait_function_value( &::SireCluster::Cluster::wait );
            
            Cluster_exposer.def( 
                "wait"
                , wait_function_value );
        
        }
        Cluster_exposer.staticmethod( "UIDs" );
        Cluster_exposer.staticmethod( "getAllNodes" );
        Cluster_exposer.staticmethod( "getCount" );
        Cluster_exposer.staticmethod( "getNode" );
        Cluster_exposer.staticmethod( "getNodes" );
        Cluster_exposer.staticmethod( "getRank" );
        Cluster_exposer.staticmethod( "isLocal" );
        Cluster_exposer.staticmethod( "isRunning" );
        Cluster_exposer.staticmethod( "localUIDs" );
        Cluster_exposer.staticmethod( "shutdown" );
        Cluster_exposer.staticmethod( "start" );
        Cluster_exposer.staticmethod( "supportsMPI" );
        Cluster_exposer.staticmethod( "wait" );
        Cluster_exposer.def( "__copy__", &__copy__);
        Cluster_exposer.def( "__deepcopy__", &__copy__);
        Cluster_exposer.def( "clone", &__copy__);
        Cluster_exposer.def( "__str__", &pvt_get_name);
        Cluster_exposer.def( "__repr__", &pvt_get_name);
    }

}
