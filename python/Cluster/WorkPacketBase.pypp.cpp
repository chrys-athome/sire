// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "WorkPacketBase.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "workpacket.h"

#include <QDebug>

#include <QTextStream>

#include "workpacket.h"

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireCluster::WorkPacketBase&){ return "SireCluster::WorkPacketBase";}

void register_WorkPacketBase_class(){

    { //::SireCluster::WorkPacketBase
        typedef bp::class_< SireCluster::WorkPacketBase, boost::noncopyable > WorkPacketBase_exposer_t;
        WorkPacketBase_exposer_t WorkPacketBase_exposer = WorkPacketBase_exposer_t( "WorkPacketBase", bp::no_init );
        bp::scope WorkPacketBase_scope( WorkPacketBase_exposer );
        { //::SireCluster::WorkPacketBase::approximatePacketSize
        
            typedef int ( ::SireCluster::WorkPacketBase::*approximatePacketSize_function_type )(  ) const;
            approximatePacketSize_function_type approximatePacketSize_function_value( &::SireCluster::WorkPacketBase::approximatePacketSize );
            
            WorkPacketBase_exposer.def( 
                "approximatePacketSize"
                , approximatePacketSize_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::hasFinished
        
            typedef bool ( ::SireCluster::WorkPacketBase::*hasFinished_function_type )(  ) const;
            hasFinished_function_type hasFinished_function_value( &::SireCluster::WorkPacketBase::hasFinished );
            
            WorkPacketBase_exposer.def( 
                "hasFinished"
                , hasFinished_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::isError
        
            typedef bool ( ::SireCluster::WorkPacketBase::*isError_function_type )(  ) const;
            isError_function_type isError_function_value( &::SireCluster::WorkPacketBase::isError );
            
            WorkPacketBase_exposer.def( 
                "isError"
                , isError_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::progress
        
            typedef float ( ::SireCluster::WorkPacketBase::*progress_function_type )(  ) const;
            progress_function_type progress_function_value( &::SireCluster::WorkPacketBase::progress );
            
            WorkPacketBase_exposer.def( 
                "progress"
                , progress_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::runChunk
        
            typedef void ( ::SireCluster::WorkPacketBase::*runChunk_function_type )(  ) ;
            runChunk_function_type runChunk_function_value( &::SireCluster::WorkPacketBase::runChunk );
            
            WorkPacketBase_exposer.def( 
                "runChunk"
                , runChunk_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::shouldPack
        
            typedef bool ( ::SireCluster::WorkPacketBase::*shouldPack_function_type )(  ) const;
            shouldPack_function_type shouldPack_function_value( &::SireCluster::WorkPacketBase::shouldPack );
            
            WorkPacketBase_exposer.def( 
                "shouldPack"
                , shouldPack_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::throwError
        
            typedef void ( ::SireCluster::WorkPacketBase::*throwError_function_type )(  ) const;
            throwError_function_type throwError_function_value( &::SireCluster::WorkPacketBase::throwError );
            
            WorkPacketBase_exposer.def( 
                "throwError"
                , throwError_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCluster::WorkPacketBase::typeName );
            
            WorkPacketBase_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::wasAborted
        
            typedef bool ( ::SireCluster::WorkPacketBase::*wasAborted_function_type )(  ) const;
            wasAborted_function_type wasAborted_function_value( &::SireCluster::WorkPacketBase::wasAborted );
            
            WorkPacketBase_exposer.def( 
                "wasAborted"
                , wasAborted_function_value );
        
        }
        { //::SireCluster::WorkPacketBase::what
        
            typedef char const * ( ::SireCluster::WorkPacketBase::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireCluster::WorkPacketBase::what );
            
            WorkPacketBase_exposer.def( 
                "what"
                , what_function_value );
        
        }
        WorkPacketBase_exposer.staticmethod( "typeName" );
        WorkPacketBase_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCluster::WorkPacketBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        WorkPacketBase_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCluster::WorkPacketBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        WorkPacketBase_exposer.def( "__str__", &pvt_get_name);
        WorkPacketBase_exposer.def( "__repr__", &pvt_get_name);
    }

}
