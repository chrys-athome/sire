// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ErrorPacket.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "workpacket.h"

#include <QDebug>

#include <QTextStream>

#include "workpacket.h"

SireCluster::ErrorPacket __copy__(const SireCluster::ErrorPacket &other){ return SireCluster::ErrorPacket(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireCluster::ErrorPacket&){ return "SireCluster::ErrorPacket";}

void register_ErrorPacket_class(){

    { //::SireCluster::ErrorPacket
        typedef bp::class_< SireCluster::ErrorPacket, bp::bases< SireCluster::WorkPacketBase > > ErrorPacket_exposer_t;
        ErrorPacket_exposer_t ErrorPacket_exposer = ErrorPacket_exposer_t( "ErrorPacket", bp::init< >() );
        bp::scope ErrorPacket_scope( ErrorPacket_exposer );
        ErrorPacket_exposer.def( bp::init< SireError::exception const & >(( bp::arg("e") )) );
        ErrorPacket_exposer.def( bp::init< SireCluster::ErrorPacket const & >(( bp::arg("other") )) );
        { //::SireCluster::ErrorPacket::approximatePacketSize
        
            typedef int ( ::SireCluster::ErrorPacket::*approximatePacketSize_function_type )(  ) const;
            approximatePacketSize_function_type approximatePacketSize_function_value( &::SireCluster::ErrorPacket::approximatePacketSize );
            
            ErrorPacket_exposer.def( 
                "approximatePacketSize"
                , approximatePacketSize_function_value );
        
        }
        { //::SireCluster::ErrorPacket::hasFinished
        
            typedef bool ( ::SireCluster::ErrorPacket::*hasFinished_function_type )(  ) const;
            hasFinished_function_type hasFinished_function_value( &::SireCluster::ErrorPacket::hasFinished );
            
            ErrorPacket_exposer.def( 
                "hasFinished"
                , hasFinished_function_value );
        
        }
        { //::SireCluster::ErrorPacket::isError
        
            typedef bool ( ::SireCluster::ErrorPacket::*isError_function_type )(  ) const;
            isError_function_type isError_function_value( &::SireCluster::ErrorPacket::isError );
            
            ErrorPacket_exposer.def( 
                "isError"
                , isError_function_value );
        
        }
        { //::SireCluster::ErrorPacket::operator=
        
            typedef ::SireCluster::ErrorPacket & ( ::SireCluster::ErrorPacket::*assign_function_type )( ::SireCluster::ErrorPacket const & ) ;
            assign_function_type assign_function_value( &::SireCluster::ErrorPacket::operator= );
            
            ErrorPacket_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::SireCluster::ErrorPacket::throwError
        
            typedef void ( ::SireCluster::ErrorPacket::*throwError_function_type )(  ) const;
            throwError_function_type throwError_function_value( &::SireCluster::ErrorPacket::throwError );
            
            ErrorPacket_exposer.def( 
                "throwError"
                , throwError_function_value );
        
        }
        { //::SireCluster::ErrorPacket::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCluster::ErrorPacket::typeName );
            
            ErrorPacket_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireCluster::ErrorPacket::what
        
            typedef char const * ( ::SireCluster::ErrorPacket::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireCluster::ErrorPacket::what );
            
            ErrorPacket_exposer.def( 
                "what"
                , what_function_value );
        
        }
        ErrorPacket_exposer.staticmethod( "typeName" );
        ErrorPacket_exposer.def( "__copy__", &__copy__);
        ErrorPacket_exposer.def( "__deepcopy__", &__copy__);
        ErrorPacket_exposer.def( "clone", &__copy__);
        ErrorPacket_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireCluster::ErrorPacket >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ErrorPacket_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireCluster::ErrorPacket >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ErrorPacket_exposer.def( "__str__", &pvt_get_name);
        ErrorPacket_exposer.def( "__repr__", &pvt_get_name);
    }

}
