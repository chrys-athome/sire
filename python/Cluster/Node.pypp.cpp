// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Node.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "frontend.h"

#include "node.h"

#include "nodes.h"

#include "promise.h"

#include "workpacket.h"

#include <QMutex>

#include <QUuid>

#include <QWaitCondition>

#include "node.h"

SireCluster::Node __copy__(const SireCluster::Node &other){ return SireCluster::Node(other); }

#include "Helpers/str.hpp"

void register_Node_class(){

    { //::SireCluster::Node
        typedef bp::class_< SireCluster::Node > Node_exposer_t;
        Node_exposer_t Node_exposer = Node_exposer_t( "Node", bp::init< >() );
        bp::scope Node_scope( Node_exposer );
        Node_exposer.def( bp::init< SireCluster::Node const & >(( bp::arg("other") )) );
        { //::SireCluster::Node::UID
        
            typedef ::QUuid ( ::SireCluster::Node::*UID_function_type )(  ) ;
            UID_function_type UID_function_value( &::SireCluster::Node::UID );
            
            Node_exposer.def( 
                "UID"
                , UID_function_value );
        
        }
        { //::SireCluster::Node::abortJob
        
            typedef void ( ::SireCluster::Node::*abortJob_function_type )(  ) ;
            abortJob_function_type abortJob_function_value( &::SireCluster::Node::abortJob );
            
            Node_exposer.def( 
                "abortJob"
                , abortJob_function_value );
        
        }
        { //::SireCluster::Node::forceRelease
        
            typedef void ( ::SireCluster::Node::*forceRelease_function_type )(  ) ;
            forceRelease_function_type forceRelease_function_value( &::SireCluster::Node::forceRelease );
            
            Node_exposer.def( 
                "forceRelease"
                , forceRelease_function_value );
        
        }
        { //::SireCluster::Node::isHomeless
        
            typedef bool ( ::SireCluster::Node::*isHomeless_function_type )(  ) ;
            isHomeless_function_type isHomeless_function_value( &::SireCluster::Node::isHomeless );
            
            Node_exposer.def( 
                "isHomeless"
                , isHomeless_function_value );
        
        }
        { //::SireCluster::Node::isLocal
        
            typedef bool ( ::SireCluster::Node::*isLocal_function_type )(  ) ;
            isLocal_function_type isLocal_function_value( &::SireCluster::Node::isLocal );
            
            Node_exposer.def( 
                "isLocal"
                , isLocal_function_value );
        
        }
        { //::SireCluster::Node::isNull
        
            typedef bool ( ::SireCluster::Node::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireCluster::Node::isNull );
            
            Node_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireCluster::Node::nodes
        
            typedef ::SireCluster::Nodes ( ::SireCluster::Node::*nodes_function_type )(  ) ;
            nodes_function_type nodes_function_value( &::SireCluster::Node::nodes );
            
            Node_exposer.def( 
                "nodes"
                , nodes_function_value );
        
        }
        Node_exposer.def( bp::self != bp::self );
        { //::SireCluster::Node::operator=
        
            typedef ::SireCluster::Node & ( ::SireCluster::Node::*assign_function_type )( ::SireCluster::Node const & ) ;
            assign_function_type assign_function_value( &::SireCluster::Node::operator= );
            
            Node_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Node_exposer.def( bp::self == bp::self );
        { //::SireCluster::Node::progress
        
            typedef float ( ::SireCluster::Node::*progress_function_type )(  ) ;
            progress_function_type progress_function_value( &::SireCluster::Node::progress );
            
            Node_exposer.def( 
                "progress"
                , progress_function_value );
        
        }
        { //::SireCluster::Node::release
        
            typedef bool ( ::SireCluster::Node::*release_function_type )(  ) ;
            release_function_type release_function_value( &::SireCluster::Node::release );
            
            Node_exposer.def( 
                "release"
                , release_function_value );
        
        }
        { //::SireCluster::Node::startJob
        
            typedef ::SireCluster::Promise ( ::SireCluster::Node::*startJob_function_type )( ::SireCluster::WorkPacket const & ) ;
            startJob_function_type startJob_function_value( &::SireCluster::Node::startJob );
            
            Node_exposer.def( 
                "startJob"
                , startJob_function_value
                , ( bp::arg("workpacket") ) );
        
        }
        { //::SireCluster::Node::startJob
        
            typedef ::SireCluster::Promise ( ::SireCluster::Node::*startJob_function_type )( ::SireCluster::WorkPacket const &,bool ) ;
            startJob_function_type startJob_function_value( &::SireCluster::Node::startJob );
            
            Node_exposer.def( 
                "startJob"
                , startJob_function_value
                , ( bp::arg("workpacket"), bp::arg("autodelete") ) );
        
        }
        { //::SireCluster::Node::stopJob
        
            typedef void ( ::SireCluster::Node::*stopJob_function_type )(  ) ;
            stopJob_function_type stopJob_function_value( &::SireCluster::Node::stopJob );
            
            Node_exposer.def( 
                "stopJob"
                , stopJob_function_value );
        
        }
        { //::SireCluster::Node::toString
        
            typedef ::QString ( ::SireCluster::Node::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCluster::Node::toString );
            
            Node_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireCluster::Node::wait
        
            typedef void ( ::SireCluster::Node::*wait_function_type )(  ) ;
            wait_function_type wait_function_value( &::SireCluster::Node::wait );
            
            Node_exposer.def( 
                "wait"
                , wait_function_value );
        
        }
        { //::SireCluster::Node::wait
        
            typedef bool ( ::SireCluster::Node::*wait_function_type )( int ) ;
            wait_function_type wait_function_value( &::SireCluster::Node::wait );
            
            Node_exposer.def( 
                "wait"
                , wait_function_value
                , ( bp::arg("timeout") ) );
        
        }
        Node_exposer.def( "__copy__", &__copy__);
        Node_exposer.def( "__deepcopy__", &__copy__);
        Node_exposer.def( "clone", &__copy__);
        Node_exposer.def( "__str__", &__str__< ::SireCluster::Node > );
        Node_exposer.def( "__repr__", &__str__< ::SireCluster::Node > );
    }

}
