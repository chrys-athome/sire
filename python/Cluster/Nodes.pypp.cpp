// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Nodes.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireError/printerror.h"

#include "backend.h"

#include "cluster.h"

#include "frontend.h"

#include "node.h"

#include "nodes.h"

#include <QDebug>

#include <QHash>

#include <QList>

#include <QMutex>

#include <QSemaphore>

#include <QSet>

#include <QThreadStorage>

#include <QTime>

#include <QUuid>

#include <QWaitCondition>

#include "nodes.h"

SireCluster::Nodes __copy__(const SireCluster::Nodes &other){ return SireCluster::Nodes(other); }

#include "Helpers/str.hpp"

void register_Nodes_class(){

    { //::SireCluster::Nodes
        typedef bp::class_< SireCluster::Nodes > Nodes_exposer_t;
        Nodes_exposer_t Nodes_exposer = Nodes_exposer_t( "Nodes", bp::init< >() );
        bp::scope Nodes_scope( Nodes_exposer );
        Nodes_exposer.def( bp::init< SireCluster::Nodes const & >(( bp::arg("other") )) );
        { //::SireCluster::Nodes::add
        
            typedef void ( ::SireCluster::Nodes::*add_function_type )( ::SireCluster::Node ) ;
            add_function_type add_function_value( &::SireCluster::Nodes::add );
            
            Nodes_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("node") ) );
        
        }
        { //::SireCluster::Nodes::add
        
            typedef void ( ::SireCluster::Nodes::*add_function_type )( ::SireCluster::Nodes & ) ;
            add_function_type add_function_value( &::SireCluster::Nodes::add );
            
            Nodes_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("nodes") ) );
        
        }
        { //::SireCluster::Nodes::addNode
        
            typedef void ( ::SireCluster::Nodes::*addNode_function_type )(  ) ;
            addNode_function_type addNode_function_value( &::SireCluster::Nodes::addNode );
            
            Nodes_exposer.def( 
                "addNode"
                , addNode_function_value );
        
        }
        { //::SireCluster::Nodes::addNode
        
            typedef void ( ::SireCluster::Nodes::*addNode_function_type )( int ) ;
            addNode_function_type addNode_function_value( &::SireCluster::Nodes::addNode );
            
            Nodes_exposer.def( 
                "addNode"
                , addNode_function_value
                , ( bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Nodes::addNodes
        
            typedef void ( ::SireCluster::Nodes::*addNodes_function_type )( int ) ;
            addNodes_function_type addNodes_function_value( &::SireCluster::Nodes::addNodes );
            
            Nodes_exposer.def( 
                "addNodes"
                , addNodes_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCluster::Nodes::addNodes
        
            typedef void ( ::SireCluster::Nodes::*addNodes_function_type )( int,int ) ;
            addNodes_function_type addNodes_function_value( &::SireCluster::Nodes::addNodes );
            
            Nodes_exposer.def( 
                "addNodes"
                , addNodes_function_value
                , ( bp::arg("n"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Nodes::borrowThisThread
        
            typedef ::SireCluster::ThisThread ( ::SireCluster::Nodes::*borrowThisThread_function_type )(  ) ;
            borrowThisThread_function_type borrowThisThread_function_value( &::SireCluster::Nodes::borrowThisThread );
            
            Nodes_exposer.def( 
                "borrowThisThread"
                , borrowThisThread_function_value );
        
        }
        { //::SireCluster::Nodes::count
        
            typedef int ( ::SireCluster::Nodes::*count_function_type )(  ) ;
            count_function_type count_function_value( &::SireCluster::Nodes::count );
            
            Nodes_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireCluster::Nodes::getAllNodes
        
            typedef ::QList< SireCluster::Node > ( ::SireCluster::Nodes::*getAllNodes_function_type )(  ) ;
            getAllNodes_function_type getAllNodes_function_value( &::SireCluster::Nodes::getAllNodes );
            
            Nodes_exposer.def( 
                "getAllNodes"
                , getAllNodes_function_value );
        
        }
        { //::SireCluster::Nodes::getAllNodes
        
            typedef ::QList< SireCluster::Node > ( ::SireCluster::Nodes::*getAllNodes_function_type )( int ) ;
            getAllNodes_function_type getAllNodes_function_value( &::SireCluster::Nodes::getAllNodes );
            
            Nodes_exposer.def( 
                "getAllNodes"
                , getAllNodes_function_value
                , ( bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Nodes::getNode
        
            typedef ::SireCluster::Node ( ::SireCluster::Nodes::*getNode_function_type )(  ) ;
            getNode_function_type getNode_function_value( &::SireCluster::Nodes::getNode );
            
            Nodes_exposer.def( 
                "getNode"
                , getNode_function_value );
        
        }
        { //::SireCluster::Nodes::getNode
        
            typedef ::SireCluster::Node ( ::SireCluster::Nodes::*getNode_function_type )( int ) ;
            getNode_function_type getNode_function_value( &::SireCluster::Nodes::getNode );
            
            Nodes_exposer.def( 
                "getNode"
                , getNode_function_value
                , ( bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Nodes::getNodes
        
            typedef ::QList< SireCluster::Node > ( ::SireCluster::Nodes::*getNodes_function_type )( int ) ;
            getNodes_function_type getNodes_function_value( &::SireCluster::Nodes::getNodes );
            
            Nodes_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCluster::Nodes::getNodes
        
            typedef ::QList< SireCluster::Node > ( ::SireCluster::Nodes::*getNodes_function_type )( int,int ) ;
            getNodes_function_type getNodes_function_value( &::SireCluster::Nodes::getNodes );
            
            Nodes_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("n"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Nodes::isEmpty
        
            typedef bool ( ::SireCluster::Nodes::*isEmpty_function_type )(  ) ;
            isEmpty_function_type isEmpty_function_value( &::SireCluster::Nodes::isEmpty );
            
            Nodes_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireCluster::Nodes::nBusy
        
            typedef int ( ::SireCluster::Nodes::*nBusy_function_type )(  ) ;
            nBusy_function_type nBusy_function_value( &::SireCluster::Nodes::nBusy );
            
            Nodes_exposer.def( 
                "nBusy"
                , nBusy_function_value );
        
        }
        { //::SireCluster::Nodes::nFree
        
            typedef int ( ::SireCluster::Nodes::*nFree_function_type )(  ) ;
            nFree_function_type nFree_function_value( &::SireCluster::Nodes::nFree );
            
            Nodes_exposer.def( 
                "nFree"
                , nFree_function_value );
        
        }
        { //::SireCluster::Nodes::nNodes
        
            typedef int ( ::SireCluster::Nodes::*nNodes_function_type )(  ) ;
            nNodes_function_type nNodes_function_value( &::SireCluster::Nodes::nNodes );
            
            Nodes_exposer.def( 
                "nNodes"
                , nNodes_function_value );
        
        }
        Nodes_exposer.def( bp::self != bp::self );
        { //::SireCluster::Nodes::operator=
        
            typedef ::SireCluster::Nodes & ( ::SireCluster::Nodes::*assign_function_type )( ::SireCluster::Nodes const & ) ;
            assign_function_type assign_function_value( &::SireCluster::Nodes::operator= );
            
            Nodes_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Nodes_exposer.def( bp::self == bp::self );
        { //::SireCluster::Nodes::remove
        
            typedef void ( ::SireCluster::Nodes::*remove_function_type )( ::SireCluster::Node ) ;
            remove_function_type remove_function_value( &::SireCluster::Nodes::remove );
            
            Nodes_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("node") ) );
        
        }
        { //::SireCluster::Nodes::removeAll
        
            typedef void ( ::SireCluster::Nodes::*removeAll_function_type )(  ) ;
            removeAll_function_type removeAll_function_value( &::SireCluster::Nodes::removeAll );
            
            Nodes_exposer.def( 
                "removeAll"
                , removeAll_function_value );
        
        }
        { //::SireCluster::Nodes::toString
        
            typedef ::QString ( ::SireCluster::Nodes::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCluster::Nodes::toString );
            
            Nodes_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireCluster::Nodes::waitUntilAllFree
        
            typedef void ( ::SireCluster::Nodes::*waitUntilAllFree_function_type )(  ) ;
            waitUntilAllFree_function_type waitUntilAllFree_function_value( &::SireCluster::Nodes::waitUntilAllFree );
            
            Nodes_exposer.def( 
                "waitUntilAllFree"
                , waitUntilAllFree_function_value );
        
        }
        { //::SireCluster::Nodes::waitUntilAllFree
        
            typedef bool ( ::SireCluster::Nodes::*waitUntilAllFree_function_type )( int ) ;
            waitUntilAllFree_function_type waitUntilAllFree_function_value( &::SireCluster::Nodes::waitUntilAllFree );
            
            Nodes_exposer.def( 
                "waitUntilAllFree"
                , waitUntilAllFree_function_value
                , ( bp::arg("timeout") ) );
        
        }
        Nodes_exposer.def( "__copy__", &__copy__);
        Nodes_exposer.def( "__deepcopy__", &__copy__);
        Nodes_exposer.def( "clone", &__copy__);
        Nodes_exposer.def( "__str__", &__str__< ::SireCluster::Nodes > );
        Nodes_exposer.def( "__repr__", &__str__< ::SireCluster::Nodes > );
    }

}
