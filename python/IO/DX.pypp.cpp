// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "DX.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireIO/dx.h"

#include "SireMol/volumemap.h"

#include "SireStream/datastream.h"

#include "dx.h"

#include <QFile>

#include <QTextStream>

#include "dx.h"

SireIO::DX __copy__(const SireIO::DX &other){ return SireIO::DX(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_DX_class(){

    { //::SireIO::DX
        typedef bp::class_< SireIO::DX, bp::bases< SireBase::Property > > DX_exposer_t;
        DX_exposer_t DX_exposer = DX_exposer_t( "DX", bp::init< >() );
        bp::scope DX_scope( DX_exposer );
        DX_exposer.def( bp::init< SireIO::DX const & >(( bp::arg("other") )) );
        DX_exposer.def( bp::self != bp::self );
        { //::SireIO::DX::operator=
        
            typedef ::SireIO::DX & ( ::SireIO::DX::*assign_function_type )( ::SireIO::DX const & ) ;
            assign_function_type assign_function_value( &::SireIO::DX::operator= );
            
            DX_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        DX_exposer.def( bp::self == bp::self );
        { //::SireIO::DX::toString
        
            typedef ::QString ( ::SireIO::DX::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireIO::DX::toString );
            
            DX_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireIO::DX::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::DX::typeName );
            
            DX_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireIO::DX::what
        
            typedef char const * ( ::SireIO::DX::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireIO::DX::what );
            
            DX_exposer.def( 
                "what"
                , what_function_value );
        
        }
        { //::SireIO::DX::write
        
            typedef void ( ::SireIO::DX::*write_function_type )( ::SireVol::GridInfo const &,::QVector< float > const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::DX::write );
            
            DX_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("gridinfo"), bp::arg("values"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireIO::DX::write
        
            typedef void ( ::SireIO::DX::*write_function_type )( ::SireMol::VolumeMap const &,::QString const &,::SireBase::PropertyMap const & ) const;
            write_function_type write_function_value( &::SireIO::DX::write );
            
            DX_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("volumemap"), bp::arg("filename"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        DX_exposer.staticmethod( "typeName" );
        DX_exposer.def( "__copy__", &__copy__);
        DX_exposer.def( "__deepcopy__", &__copy__);
        DX_exposer.def( "clone", &__copy__);
        DX_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::DX >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        DX_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::DX >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        DX_exposer.def( "__str__", &__str__< ::SireIO::DX > );
        DX_exposer.def( "__repr__", &__str__< ::SireIO::DX > );
    }

}
