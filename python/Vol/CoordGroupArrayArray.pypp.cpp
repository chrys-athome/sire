// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CoordGroupArrayArray.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/quickcopy.hpp"

#include "SireError/errors.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "coordgroup.h"

#include <QDebug>

#include "coordgroup.h"

SireVol::CoordGroupArrayArray __copy__(const SireVol::CoordGroupArrayArray &other){ return SireVol::CoordGroupArrayArray(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_CoordGroupArrayArray_class(){

    { //::SireVol::CoordGroupArrayArray
        typedef bp::class_< SireVol::CoordGroupArrayArray > CoordGroupArrayArray_exposer_t;
        CoordGroupArrayArray_exposer_t CoordGroupArrayArray_exposer = CoordGroupArrayArray_exposer_t( "CoordGroupArrayArray", bp::init< >() );
        bp::scope CoordGroupArrayArray_scope( CoordGroupArrayArray_exposer );
        CoordGroupArrayArray_exposer.def( bp::init< SireVol::CoordGroup const & >(( bp::arg("cgroup") )) );
        CoordGroupArrayArray_exposer.def( bp::init< SireVol::CoordGroupArray const & >(( bp::arg("cgarray") )) );
        CoordGroupArrayArray_exposer.def( bp::init< QVector< SireVol::CoordGroupArray > const & >(( bp::arg("cgarrays") )) );
        CoordGroupArrayArray_exposer.def( bp::init< QVector< QVector< SireVol::CoordGroup > > const & >(( bp::arg("cgarrays") )) );
        CoordGroupArrayArray_exposer.def( bp::init< QVector< QVector< QVector< SireMaths::Vector > > > const & >(( bp::arg("points") )) );
        CoordGroupArrayArray_exposer.def( bp::init< SireVol::CoordGroupArrayArray const & >(( bp::arg("other") )) );
        { //::SireVol::CoordGroupArrayArray::aaBox
        
            typedef ::SireVol::AABox ( ::SireVol::CoordGroupArrayArray::*aaBox_function_type )(  ) const;
            aaBox_function_type aaBox_function_value( &::SireVol::CoordGroupArrayArray::aaBox );
            
            CoordGroupArrayArray_exposer.def( 
                "aaBox"
                , aaBox_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::assertValidCoordGroup
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*assertValidCoordGroup_function_type )( ::quint32 ) const;
            assertValidCoordGroup_function_type assertValidCoordGroup_function_value( &::SireVol::CoordGroupArrayArray::assertValidCoordGroup );
            
            CoordGroupArrayArray_exposer.def( 
                "assertValidCoordGroup"
                , assertValidCoordGroup_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::assertValidCoordGroup
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*assertValidCoordGroup_function_type )( ::quint32,::quint32 ) const;
            assertValidCoordGroup_function_type assertValidCoordGroup_function_value( &::SireVol::CoordGroupArrayArray::assertValidCoordGroup );
            
            CoordGroupArrayArray_exposer.def( 
                "assertValidCoordGroup"
                , assertValidCoordGroup_function_value
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::assertValidCoordGroupArray
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*assertValidCoordGroupArray_function_type )( ::quint32 ) const;
            assertValidCoordGroupArray_function_type assertValidCoordGroupArray_function_value( &::SireVol::CoordGroupArrayArray::assertValidCoordGroupArray );
            
            CoordGroupArrayArray_exposer.def( 
                "assertValidCoordGroupArray"
                , assertValidCoordGroupArray_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::assertValidCoordinate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*assertValidCoordinate_function_type )( ::quint32 ) const;
            assertValidCoordinate_function_type assertValidCoordinate_function_value( &::SireVol::CoordGroupArrayArray::assertValidCoordinate );
            
            CoordGroupArrayArray_exposer.def( 
                "assertValidCoordinate"
                , assertValidCoordinate_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::assertValidIndex
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*assertValidIndex_function_type )( ::quint32 ) const;
            assertValidIndex_function_type assertValidIndex_function_value( &::SireVol::CoordGroupArrayArray::assertValidIndex );
            
            CoordGroupArrayArray_exposer.def( 
                "assertValidIndex"
                , assertValidIndex_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::at
        
            typedef ::SireVol::CoordGroupArray const & ( ::SireVol::CoordGroupArrayArray::*at_function_type )( ::quint32 ) const;
            at_function_type at_function_value( &::SireVol::CoordGroupArrayArray::at );
            
            CoordGroupArrayArray_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireVol::CoordGroupArrayArray::changeFrame
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*changeFrame_function_type )( ::SireMaths::AxisSet const &,::SireMaths::AxisSet const & ) ;
            changeFrame_function_type changeFrame_function_value( &::SireVol::CoordGroupArrayArray::changeFrame );
            
            CoordGroupArrayArray_exposer.def( 
                "changeFrame"
                , changeFrame_function_value
                , ( bp::arg("from_frame"), bp::arg("to_frame") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::changeFrame
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*changeFrame_function_type )( ::quint32,::SireMaths::AxisSet const &,::SireMaths::AxisSet const & ) ;
            changeFrame_function_type changeFrame_function_value( &::SireVol::CoordGroupArrayArray::changeFrame );
            
            CoordGroupArrayArray_exposer.def( 
                "changeFrame"
                , changeFrame_function_value
                , ( bp::arg("i"), bp::arg("from_frame"), bp::arg("to_frame") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::changeFrame
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*changeFrame_function_type )( ::quint32,::quint32,::SireMaths::AxisSet const &,::SireMaths::AxisSet const & ) ;
            changeFrame_function_type changeFrame_function_value( &::SireVol::CoordGroupArrayArray::changeFrame );
            
            CoordGroupArrayArray_exposer.def( 
                "changeFrame"
                , changeFrame_function_value
                , ( bp::arg("i"), bp::arg("j"), bp::arg("from_frame"), bp::arg("to_frame") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::count
        
            typedef int ( ::SireVol::CoordGroupArrayArray::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireVol::CoordGroupArrayArray::count );
            
            CoordGroupArrayArray_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::mapInto
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*mapInto_function_type )( ::SireMaths::AxisSet const & ) ;
            mapInto_function_type mapInto_function_value( &::SireVol::CoordGroupArrayArray::mapInto );
            
            CoordGroupArrayArray_exposer.def( 
                "mapInto"
                , mapInto_function_value
                , ( bp::arg("axes") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::mapInto
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*mapInto_function_type )( ::quint32,::SireMaths::AxisSet const & ) ;
            mapInto_function_type mapInto_function_value( &::SireVol::CoordGroupArrayArray::mapInto );
            
            CoordGroupArrayArray_exposer.def( 
                "mapInto"
                , mapInto_function_value
                , ( bp::arg("i"), bp::arg("axes") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::mapInto
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*mapInto_function_type )( ::quint32,::quint32,::SireMaths::AxisSet const & ) ;
            mapInto_function_type mapInto_function_value( &::SireVol::CoordGroupArrayArray::mapInto );
            
            CoordGroupArrayArray_exposer.def( 
                "mapInto"
                , mapInto_function_value
                , ( bp::arg("i"), bp::arg("j"), bp::arg("axes") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::merge
        
            typedef ::SireVol::CoordGroup ( ::SireVol::CoordGroupArrayArray::*merge_function_type )(  ) const;
            merge_function_type merge_function_value( &::SireVol::CoordGroupArrayArray::merge );
            
            CoordGroupArrayArray_exposer.def( 
                "merge"
                , merge_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::nCoordGroupArrays
        
            typedef int ( ::SireVol::CoordGroupArrayArray::*nCoordGroupArrays_function_type )(  ) const;
            nCoordGroupArrays_function_type nCoordGroupArrays_function_value( &::SireVol::CoordGroupArrayArray::nCoordGroupArrays );
            
            CoordGroupArrayArray_exposer.def( 
                "nCoordGroupArrays"
                , nCoordGroupArrays_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::nCoordGroups
        
            typedef int ( ::SireVol::CoordGroupArrayArray::*nCoordGroups_function_type )(  ) const;
            nCoordGroups_function_type nCoordGroups_function_value( &::SireVol::CoordGroupArrayArray::nCoordGroups );
            
            CoordGroupArrayArray_exposer.def( 
                "nCoordGroups"
                , nCoordGroups_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::nCoords
        
            typedef int ( ::SireVol::CoordGroupArrayArray::*nCoords_function_type )(  ) const;
            nCoords_function_type nCoords_function_value( &::SireVol::CoordGroupArrayArray::nCoords );
            
            CoordGroupArrayArray_exposer.def( 
                "nCoords"
                , nCoords_function_value );
        
        }
        CoordGroupArrayArray_exposer.def( bp::self != bp::self );
        { //::SireVol::CoordGroupArrayArray::operator=
        
            typedef ::SireVol::CoordGroupArrayArray & ( ::SireVol::CoordGroupArrayArray::*assign_function_type )( ::SireVol::CoordGroupArrayArray const & ) ;
            assign_function_type assign_function_value( &::SireVol::CoordGroupArrayArray::operator= );
            
            CoordGroupArrayArray_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        CoordGroupArrayArray_exposer.def( bp::self == bp::self );
        { //::SireVol::CoordGroupArrayArray::operator[]
        
            typedef ::SireVol::CoordGroupArray const & ( ::SireVol::CoordGroupArrayArray::*__getitem___function_type )( ::quint32 ) const;
            __getitem___function_type __getitem___function_value( &::SireVol::CoordGroupArrayArray::operator[] );
            
            CoordGroupArrayArray_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireVol::CoordGroupArrayArray::rotate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*rotate_function_type )( ::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupArrayArray::rotate );
            
            CoordGroupArrayArray_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("quat"), bp::arg("point") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::rotate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*rotate_function_type )( ::SireMaths::Matrix const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupArrayArray::rotate );
            
            CoordGroupArrayArray_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("rotmat"), bp::arg("point") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::rotate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*rotate_function_type )( ::quint32,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupArrayArray::rotate );
            
            CoordGroupArrayArray_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("i"), bp::arg("quat"), bp::arg("point") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::rotate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*rotate_function_type )( ::quint32,::SireMaths::Matrix const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupArrayArray::rotate );
            
            CoordGroupArrayArray_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("i"), bp::arg("rotmat"), bp::arg("point") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::rotate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*rotate_function_type )( ::quint32,::quint32,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupArrayArray::rotate );
            
            CoordGroupArrayArray_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("i"), bp::arg("j"), bp::arg("quat"), bp::arg("point") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::rotate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*rotate_function_type )( ::quint32,::quint32,::SireMaths::Matrix const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupArrayArray::rotate );
            
            CoordGroupArrayArray_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("i"), bp::arg("j"), bp::arg("rotmat"), bp::arg("point") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::size
        
            typedef int ( ::SireVol::CoordGroupArrayArray::*size_function_type )(  ) const;
            size_function_type size_function_value( &::SireVol::CoordGroupArrayArray::size );
            
            CoordGroupArrayArray_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::toString
        
            typedef ::QString ( ::SireVol::CoordGroupArrayArray::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireVol::CoordGroupArrayArray::toString );
            
            CoordGroupArrayArray_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::translate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*translate_function_type )( ::SireMaths::Vector const & ) ;
            translate_function_type translate_function_value( &::SireVol::CoordGroupArrayArray::translate );
            
            CoordGroupArrayArray_exposer.def( 
                "translate"
                , translate_function_value
                , ( bp::arg("delta") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::translate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*translate_function_type )( ::quint32,::SireMaths::Vector const & ) ;
            translate_function_type translate_function_value( &::SireVol::CoordGroupArrayArray::translate );
            
            CoordGroupArrayArray_exposer.def( 
                "translate"
                , translate_function_value
                , ( bp::arg("i"), bp::arg("delta") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::translate
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*translate_function_type )( ::quint32,::quint32,::SireMaths::Vector const & ) ;
            translate_function_type translate_function_value( &::SireVol::CoordGroupArrayArray::translate );
            
            CoordGroupArrayArray_exposer.def( 
                "translate"
                , translate_function_value
                , ( bp::arg("i"), bp::arg("j"), bp::arg("delta") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::CoordGroupArrayArray::typeName );
            
            CoordGroupArrayArray_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireVol::CoordGroupArrayArray::update
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*update_function_type )( ::quint32,::SireVol::CoordGroupArray const & ) ;
            update_function_type update_function_value( &::SireVol::CoordGroupArrayArray::update );
            
            CoordGroupArrayArray_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("i"), bp::arg("array") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::update
        
            typedef void ( ::SireVol::CoordGroupArrayArray::*update_function_type )( ::quint32,::quint32,::SireVol::CoordGroup const & ) ;
            update_function_type update_function_value( &::SireVol::CoordGroupArrayArray::update );
            
            CoordGroupArrayArray_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("i"), bp::arg("j"), bp::arg("cgroup") ) );
        
        }
        { //::SireVol::CoordGroupArrayArray::what
        
            typedef char const * ( ::SireVol::CoordGroupArrayArray::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireVol::CoordGroupArrayArray::what );
            
            CoordGroupArrayArray_exposer.def( 
                "what"
                , what_function_value );
        
        }
        CoordGroupArrayArray_exposer.staticmethod( "typeName" );
        CoordGroupArrayArray_exposer.def( "__copy__", &__copy__);
        CoordGroupArrayArray_exposer.def( "__deepcopy__", &__copy__);
        CoordGroupArrayArray_exposer.def( "clone", &__copy__);
        CoordGroupArrayArray_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireVol::CoordGroupArrayArray >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoordGroupArrayArray_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireVol::CoordGroupArrayArray >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CoordGroupArrayArray_exposer.def( "__str__", &__str__< ::SireVol::CoordGroupArrayArray > );
        CoordGroupArrayArray_exposer.def( "__repr__", &__str__< ::SireVol::CoordGroupArrayArray > );
        CoordGroupArrayArray_exposer.def( "__len__", &__len_size< ::SireVol::CoordGroupArrayArray > );
    }

}
