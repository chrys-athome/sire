// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PeriodicBox.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/countflops.h"

#include "SireError/errors.h"

#include "SireMaths/rangenerator.h"

#include "SireStream/datastream.h"

#include "coordgroup.h"

#include "periodicbox.h"

#include <QDebug>

#include <QMutex>

#include <cmath>

#include <limits>

#include "periodicbox.h"

SireVol::PeriodicBox __copy__(const SireVol::PeriodicBox &other){ return SireVol::PeriodicBox(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_PeriodicBox_class(){

    { //::SireVol::PeriodicBox
        typedef bp::class_< SireVol::PeriodicBox, bp::bases< SireVol::Cartesian, SireVol::Space, SireBase::Property > > PeriodicBox_exposer_t;
        PeriodicBox_exposer_t PeriodicBox_exposer = PeriodicBox_exposer_t( "PeriodicBox", bp::init< >() );
        bp::scope PeriodicBox_scope( PeriodicBox_exposer );
        PeriodicBox_exposer.def( bp::init< SireMaths::Vector const & >(( bp::arg("extents") )) );
        PeriodicBox_exposer.def( bp::init< SireMaths::Vector const &, SireMaths::Vector const & >(( bp::arg("min"), bp::arg("max") )) );
        PeriodicBox_exposer.def( bp::init< SireVol::PeriodicBox const & >(( bp::arg("other") )) );
        { //::SireVol::PeriodicBox::beyond
        
            typedef bool ( ::SireVol::PeriodicBox::*beyond_function_type )( double,::SireVol::AABox const &,::SireVol::AABox const & ) const;
            beyond_function_type beyond_function_value( &::SireVol::PeriodicBox::beyond );
            
            PeriodicBox_exposer.def( 
                "beyond"
                , beyond_function_value
                , ( bp::arg("dist"), bp::arg("aabox0"), bp::arg("aabox1") ) );
        
        }
        { //::SireVol::PeriodicBox::beyond
        
            typedef bool ( ::SireVol::PeriodicBox::*beyond_function_type )( double,::SireVol::CoordGroup const &,::SireVol::CoordGroup const & ) const;
            beyond_function_type beyond_function_value( &::SireVol::PeriodicBox::beyond );
            
            PeriodicBox_exposer.def( 
                "beyond"
                , beyond_function_value
                , ( bp::arg("dist"), bp::arg("group0"), bp::arg("group1") ) );
        
        }
        { //::SireVol::PeriodicBox::calcAngle
        
            typedef ::SireUnits::Dimension::Angle ( ::SireVol::PeriodicBox::*calcAngle_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcAngle_function_type calcAngle_function_value( &::SireVol::PeriodicBox::calcAngle );
            
            PeriodicBox_exposer.def( 
                "calcAngle"
                , calcAngle_function_value
                , ( bp::arg("point0"), bp::arg("point1"), bp::arg("point2") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDihedral
        
            typedef ::SireUnits::Dimension::Angle ( ::SireVol::PeriodicBox::*calcDihedral_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const &,::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDihedral_function_type calcDihedral_function_value( &::SireVol::PeriodicBox::calcDihedral );
            
            PeriodicBox_exposer.def( 
                "calcDihedral"
                , calcDihedral_function_value
                , ( bp::arg("point0"), bp::arg("point1"), bp::arg("point2"), bp::arg("point3") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDist
        
            typedef double ( ::SireVol::PeriodicBox::*calcDist_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::PeriodicBox::calcDist );
            
            PeriodicBox_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("point0"), bp::arg("point1") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDist
        
            typedef double ( ::SireVol::PeriodicBox::*calcDist_function_type )( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::PeriodicBox::calcDist );
            
            PeriodicBox_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDist
        
            typedef double ( ::SireVol::PeriodicBox::*calcDist_function_type )( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistMatrix & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::PeriodicBox::calcDist );
            
            PeriodicBox_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("mat") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDist2
        
            typedef double ( ::SireVol::PeriodicBox::*calcDist2_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::PeriodicBox::calcDist2 );
            
            PeriodicBox_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("point0"), bp::arg("point1") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDist2
        
            typedef double ( ::SireVol::PeriodicBox::*calcDist2_function_type )( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistMatrix & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::PeriodicBox::calcDist2 );
            
            PeriodicBox_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("mat") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDist2
        
            typedef double ( ::SireVol::PeriodicBox::*calcDist2_function_type )( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::PeriodicBox::calcDist2 );
            
            PeriodicBox_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDistVector
        
            typedef ::SireMaths::DistVector ( ::SireVol::PeriodicBox::*calcDistVector_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDistVector_function_type calcDistVector_function_value( &::SireVol::PeriodicBox::calcDistVector );
            
            PeriodicBox_exposer.def( 
                "calcDistVector"
                , calcDistVector_function_value
                , ( bp::arg("point0"), bp::arg("point1") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDistVectors
        
            typedef double ( ::SireVol::PeriodicBox::*calcDistVectors_function_type )( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistVectorMatrix & ) const;
            calcDistVectors_function_type calcDistVectors_function_value( &::SireVol::PeriodicBox::calcDistVectors );
            
            PeriodicBox_exposer.def( 
                "calcDistVectors"
                , calcDistVectors_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") ) );
        
        }
        { //::SireVol::PeriodicBox::calcDistVectors
        
            typedef double ( ::SireVol::PeriodicBox::*calcDistVectors_function_type )( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistVectorMatrix & ) const;
            calcDistVectors_function_type calcDistVectors_function_value( &::SireVol::PeriodicBox::calcDistVectors );
            
            PeriodicBox_exposer.def( 
                "calcDistVectors"
                , calcDistVectors_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("distmat") ) );
        
        }
        { //::SireVol::PeriodicBox::calcInvDist
        
            typedef double ( ::SireVol::PeriodicBox::*calcInvDist_function_type )( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist_function_type calcInvDist_function_value( &::SireVol::PeriodicBox::calcInvDist );
            
            PeriodicBox_exposer.def( 
                "calcInvDist"
                , calcInvDist_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") ) );
        
        }
        { //::SireVol::PeriodicBox::calcInvDist2
        
            typedef double ( ::SireVol::PeriodicBox::*calcInvDist2_function_type )( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist2_function_type calcInvDist2_function_value( &::SireVol::PeriodicBox::calcInvDist2 );
            
            PeriodicBox_exposer.def( 
                "calcInvDist2"
                , calcInvDist2_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") ) );
        
        }
        { //::SireVol::PeriodicBox::dimensions
        
            typedef ::SireMaths::Vector const & ( ::SireVol::PeriodicBox::*dimensions_function_type )(  ) const;
            dimensions_function_type dimensions_function_value( &::SireVol::PeriodicBox::dimensions );
            
            PeriodicBox_exposer.def( 
                "dimensions"
                , dimensions_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireVol::PeriodicBox::getBoxCenter
        
            typedef ::SireMaths::Vector ( ::SireVol::PeriodicBox::*getBoxCenter_function_type )( ::SireMaths::Vector const & ) const;
            getBoxCenter_function_type getBoxCenter_function_value( &::SireVol::PeriodicBox::getBoxCenter );
            
            PeriodicBox_exposer.def( 
                "getBoxCenter"
                , getBoxCenter_function_value
                , ( bp::arg("p") ) );
        
        }
        { //::SireVol::PeriodicBox::getBoxCenter
        
            typedef ::SireMaths::Vector ( ::SireVol::PeriodicBox::*getBoxCenter_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            getBoxCenter_function_type getBoxCenter_function_value( &::SireVol::PeriodicBox::getBoxCenter );
            
            PeriodicBox_exposer.def( 
                "getBoxCenter"
                , getBoxCenter_function_value
                , ( bp::arg("p"), bp::arg("center") ) );
        
        }
        { //::SireVol::PeriodicBox::getCopiesWithin
        
            typedef ::QList< boost::tuples::tuple< double, SireVol::CoordGroup, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > > ( ::SireVol::PeriodicBox::*getCopiesWithin_function_type )( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,double ) const;
            getCopiesWithin_function_type getCopiesWithin_function_value( &::SireVol::PeriodicBox::getCopiesWithin );
            
            PeriodicBox_exposer.def( 
                "getCopiesWithin"
                , getCopiesWithin_function_value
                , ( bp::arg("group"), bp::arg("center"), bp::arg("dist") ) );
        
        }
        { //::SireVol::PeriodicBox::getMinimumImage
        
            typedef ::SireVol::CoordGroup ( ::SireVol::PeriodicBox::*getMinimumImage_function_type )( ::SireVol::CoordGroup const &,::SireMaths::Vector const & ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::PeriodicBox::getMinimumImage );
            
            PeriodicBox_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("group"), bp::arg("center") ) );
        
        }
        { //::SireVol::PeriodicBox::getMinimumImage
        
            typedef ::SireVol::CoordGroupArray ( ::SireVol::PeriodicBox::*getMinimumImage_function_type )( ::SireVol::CoordGroupArray const &,::SireMaths::Vector const &,bool ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::PeriodicBox::getMinimumImage );
            
            PeriodicBox_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("groups"), bp::arg("center"), bp::arg("translate_as_one")=(bool)(false) ) );
        
        }
        { //::SireVol::PeriodicBox::getMinimumImage
        
            typedef ::SireVol::AABox ( ::SireVol::PeriodicBox::*getMinimumImage_function_type )( ::SireVol::AABox const &,::SireMaths::Vector const & ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::PeriodicBox::getMinimumImage );
            
            PeriodicBox_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("aabox"), bp::arg("center") ) );
        
        }
        { //::SireVol::PeriodicBox::getMinimumImage
        
            typedef ::SireMaths::Vector ( ::SireVol::PeriodicBox::*getMinimumImage_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::PeriodicBox::getMinimumImage );
            
            PeriodicBox_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("point"), bp::arg("center") ) );
        
        }
        { //::SireVol::PeriodicBox::getRandomPoint
        
            typedef ::SireMaths::Vector ( ::SireVol::PeriodicBox::*getRandomPoint_function_type )( ::SireMaths::Vector const &,::SireMaths::RanGenerator const & ) const;
            getRandomPoint_function_type getRandomPoint_function_value( &::SireVol::PeriodicBox::getRandomPoint );
            
            PeriodicBox_exposer.def( 
                "getRandomPoint"
                , getRandomPoint_function_value
                , ( bp::arg("center"), bp::arg("generator") ) );
        
        }
        { //::SireVol::PeriodicBox::isCartesian
        
            typedef bool ( ::SireVol::PeriodicBox::*isCartesian_function_type )(  ) const;
            isCartesian_function_type isCartesian_function_value( &::SireVol::PeriodicBox::isCartesian );
            
            PeriodicBox_exposer.def( 
                "isCartesian"
                , isCartesian_function_value );
        
        }
        { //::SireVol::PeriodicBox::isPeriodic
        
            typedef bool ( ::SireVol::PeriodicBox::*isPeriodic_function_type )(  ) const;
            isPeriodic_function_type isPeriodic_function_value( &::SireVol::PeriodicBox::isPeriodic );
            
            PeriodicBox_exposer.def( 
                "isPeriodic"
                , isPeriodic_function_value );
        
        }
        { //::SireVol::PeriodicBox::maxCoords
        
            typedef ::SireMaths::Vector ( ::SireVol::PeriodicBox::*maxCoords_function_type )( ::SireMaths::Vector const & ) const;
            maxCoords_function_type maxCoords_function_value( &::SireVol::PeriodicBox::maxCoords );
            
            PeriodicBox_exposer.def( 
                "maxCoords"
                , maxCoords_function_value
                , ( bp::arg("center")=SireMaths::Vector(0.0) ) );
        
        }
        { //::SireVol::PeriodicBox::minCoords
        
            typedef ::SireMaths::Vector ( ::SireVol::PeriodicBox::*minCoords_function_type )( ::SireMaths::Vector const & ) const;
            minCoords_function_type minCoords_function_value( &::SireVol::PeriodicBox::minCoords );
            
            PeriodicBox_exposer.def( 
                "minCoords"
                , minCoords_function_value
                , ( bp::arg("center")=SireMaths::Vector(0.0) ) );
        
        }
        { //::SireVol::PeriodicBox::minimumDistance
        
            typedef double ( ::SireVol::PeriodicBox::*minimumDistance_function_type )( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const & ) const;
            minimumDistance_function_type minimumDistance_function_value( &::SireVol::PeriodicBox::minimumDistance );
            
            PeriodicBox_exposer.def( 
                "minimumDistance"
                , minimumDistance_function_value
                , ( bp::arg("group0"), bp::arg("group1") ) );
        
        }
        PeriodicBox_exposer.def( bp::self != bp::self );
        { //::SireVol::PeriodicBox::operator=
        
            typedef ::SireVol::PeriodicBox & ( ::SireVol::PeriodicBox::*assign_function_type )( ::SireVol::PeriodicBox const & ) ;
            assign_function_type assign_function_value( &::SireVol::PeriodicBox::operator= );
            
            PeriodicBox_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PeriodicBox_exposer.def( bp::self == bp::self );
        { //::SireVol::PeriodicBox::setDimensions
        
            typedef void ( ::SireVol::PeriodicBox::*setDimensions_function_type )( ::SireMaths::Vector const & ) ;
            setDimensions_function_type setDimensions_function_value( &::SireVol::PeriodicBox::setDimensions );
            
            PeriodicBox_exposer.def( 
                "setDimensions"
                , setDimensions_function_value
                , ( bp::arg("dimensions") ) );
        
        }
        { //::SireVol::PeriodicBox::setDimensions
        
            typedef void ( ::SireVol::PeriodicBox::*setDimensions_function_type )( ::SireMaths::Vector const &,::SireMaths::Vector const & ) ;
            setDimensions_function_type setDimensions_function_value( &::SireVol::PeriodicBox::setDimensions );
            
            PeriodicBox_exposer.def( 
                "setDimensions"
                , setDimensions_function_value
                , ( bp::arg("mincoords"), bp::arg("maxcoords") ) );
        
        }
        { //::SireVol::PeriodicBox::setVolume
        
            typedef ::SireVol::SpacePtr ( ::SireVol::PeriodicBox::*setVolume_function_type )( ::SireUnits::Dimension::Volume ) const;
            setVolume_function_type setVolume_function_value( &::SireVol::PeriodicBox::setVolume );
            
            PeriodicBox_exposer.def( 
                "setVolume"
                , setVolume_function_value
                , ( bp::arg("volume") ) );
        
        }
        { //::SireVol::PeriodicBox::toString
        
            typedef ::QString ( ::SireVol::PeriodicBox::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireVol::PeriodicBox::toString );
            
            PeriodicBox_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireVol::PeriodicBox::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::PeriodicBox::typeName );
            
            PeriodicBox_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireVol::PeriodicBox::volume
        
            typedef ::SireUnits::Dimension::Volume ( ::SireVol::PeriodicBox::*volume_function_type )(  ) const;
            volume_function_type volume_function_value( &::SireVol::PeriodicBox::volume );
            
            PeriodicBox_exposer.def( 
                "volume"
                , volume_function_value );
        
        }
        PeriodicBox_exposer.staticmethod( "typeName" );
        PeriodicBox_exposer.def( "__copy__", &__copy__);
        PeriodicBox_exposer.def( "__deepcopy__", &__copy__);
        PeriodicBox_exposer.def( "clone", &__copy__);
        PeriodicBox_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireVol::PeriodicBox >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PeriodicBox_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireVol::PeriodicBox >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PeriodicBox_exposer.def( "__str__", &__str__< ::SireVol::PeriodicBox > );
        PeriodicBox_exposer.def( "__repr__", &__str__< ::SireVol::PeriodicBox > );
    }

}
