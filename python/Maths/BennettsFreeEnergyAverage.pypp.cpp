// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "BennettsFreeEnergyAverage.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/histogram.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "freeenergyaverage.h"

#include <QDebug>

#include "freeenergyaverage.h"

SireMaths::BennettsFreeEnergyAverage __copy__(const SireMaths::BennettsFreeEnergyAverage &other){ return SireMaths::BennettsFreeEnergyAverage(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_BennettsFreeEnergyAverage_class(){

    { //::SireMaths::BennettsFreeEnergyAverage
        typedef bp::class_< SireMaths::BennettsFreeEnergyAverage, bp::bases< SireMaths::FreeEnergyAverage, SireMaths::ExpAverage, SireMaths::Accumulator, SireBase::Property > > BennettsFreeEnergyAverage_exposer_t;
        BennettsFreeEnergyAverage_exposer_t BennettsFreeEnergyAverage_exposer = BennettsFreeEnergyAverage_exposer_t( "BennettsFreeEnergyAverage", bp::init< >() );
        bp::scope BennettsFreeEnergyAverage_scope( BennettsFreeEnergyAverage_exposer );
        BennettsFreeEnergyAverage_exposer.def( bp::init< bool >(( bp::arg("forwards_free_energy") )) );
        BennettsFreeEnergyAverage_exposer.def( bp::init< SireUnits::Dimension::Temperature const &, bp::optional< bool > >(( bp::arg("temperature"), bp::arg("forwards_free_energy")=(bool)(true) )) );
        BennettsFreeEnergyAverage_exposer.def( bp::init< SireUnits::Dimension::MolarEnergy const &, SireUnits::Dimension::Temperature const &, bp::optional< bool > >(( bp::arg("constant"), bp::arg("temperature"), bp::arg("forwards_free_energy")=(bool)(true) )) );
        BennettsFreeEnergyAverage_exposer.def( bp::init< SireUnits::Dimension::MolarEnergy const &, bp::optional< bool > >(( bp::arg("constant"), bp::arg("forwards_free_energy")=(bool)(true) )) );
        BennettsFreeEnergyAverage_exposer.def( bp::init< SireUnits::Dimension::Temperature const &, SireUnits::Dimension::MolarEnergy const &, bp::optional< bool > >(( bp::arg("temperature"), bp::arg("binwidth"), bp::arg("forwards_free_energy")=(bool)(true) )) );
        BennettsFreeEnergyAverage_exposer.def( bp::init< SireUnits::Dimension::MolarEnergy const &, SireUnits::Dimension::Temperature const &, SireUnits::Dimension::MolarEnergy const &, bp::optional< bool > >(( bp::arg("constant"), bp::arg("temperature"), bp::arg("binwidth"), bp::arg("forwards_free_energy")=(bool)(true) )) );
        BennettsFreeEnergyAverage_exposer.def( bp::init< SireMaths::BennettsFreeEnergyAverage const & >(( bp::arg("other") )) );
        { //::SireMaths::BennettsFreeEnergyAverage::accumulate
        
            typedef void ( ::SireMaths::BennettsFreeEnergyAverage::*accumulate_function_type )( double ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::BennettsFreeEnergyAverage::accumulate );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMaths::BennettsFreeEnergyAverage::bennettsRatio
        
            typedef double ( ::SireMaths::BennettsFreeEnergyAverage::*bennettsRatio_function_type )(  ) const;
            bennettsRatio_function_type bennettsRatio_function_value( &::SireMaths::BennettsFreeEnergyAverage::bennettsRatio );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "bennettsRatio"
                , bennettsRatio_function_value );
        
        }
        { //::SireMaths::BennettsFreeEnergyAverage::bennettsStandardError
        
            typedef double ( ::SireMaths::BennettsFreeEnergyAverage::*bennettsStandardError_function_type )( double ) const;
            bennettsStandardError_function_type bennettsStandardError_function_value( &::SireMaths::BennettsFreeEnergyAverage::bennettsStandardError );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "bennettsStandardError"
                , bennettsStandardError_function_value
                , ( bp::arg("level") ) );
        
        }
        { //::SireMaths::BennettsFreeEnergyAverage::clear
        
            typedef void ( ::SireMaths::BennettsFreeEnergyAverage::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::SireMaths::BennettsFreeEnergyAverage::clear );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::SireMaths::BennettsFreeEnergyAverage::constant
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireMaths::BennettsFreeEnergyAverage::*constant_function_type )(  ) const;
            constant_function_type constant_function_value( &::SireMaths::BennettsFreeEnergyAverage::constant );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "constant"
                , constant_function_value );
        
        }
        { //::SireMaths::BennettsFreeEnergyAverage::isBackwardsRatio
        
            typedef bool ( ::SireMaths::BennettsFreeEnergyAverage::*isBackwardsRatio_function_type )(  ) const;
            isBackwardsRatio_function_type isBackwardsRatio_function_value( &::SireMaths::BennettsFreeEnergyAverage::isBackwardsRatio );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "isBackwardsRatio"
                , isBackwardsRatio_function_value );
        
        }
        { //::SireMaths::BennettsFreeEnergyAverage::isForwardsRatio
        
            typedef bool ( ::SireMaths::BennettsFreeEnergyAverage::*isForwardsRatio_function_type )(  ) const;
            isForwardsRatio_function_type isForwardsRatio_function_value( &::SireMaths::BennettsFreeEnergyAverage::isForwardsRatio );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "isForwardsRatio"
                , isForwardsRatio_function_value );
        
        }
        BennettsFreeEnergyAverage_exposer.def( bp::self != bp::self );
        BennettsFreeEnergyAverage_exposer.def( bp::self + bp::self );
        { //::SireMaths::BennettsFreeEnergyAverage::operator=
        
            typedef ::SireMaths::BennettsFreeEnergyAverage & ( ::SireMaths::BennettsFreeEnergyAverage::*assign_function_type )( ::SireMaths::BennettsFreeEnergyAverage const & ) ;
            assign_function_type assign_function_value( &::SireMaths::BennettsFreeEnergyAverage::operator= );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        BennettsFreeEnergyAverage_exposer.def( bp::self == bp::self );
        { //::SireMaths::BennettsFreeEnergyAverage::toString
        
            typedef ::QString ( ::SireMaths::BennettsFreeEnergyAverage::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::BennettsFreeEnergyAverage::toString );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMaths::BennettsFreeEnergyAverage::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMaths::BennettsFreeEnergyAverage::typeName );
            
            BennettsFreeEnergyAverage_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        BennettsFreeEnergyAverage_exposer.staticmethod( "typeName" );
        BennettsFreeEnergyAverage_exposer.def( "__copy__", &__copy__);
        BennettsFreeEnergyAverage_exposer.def( "__deepcopy__", &__copy__);
        BennettsFreeEnergyAverage_exposer.def( "clone", &__copy__);
        BennettsFreeEnergyAverage_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMaths::BennettsFreeEnergyAverage >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        BennettsFreeEnergyAverage_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMaths::BennettsFreeEnergyAverage >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        BennettsFreeEnergyAverage_exposer.def( "__str__", &__str__< ::SireMaths::BennettsFreeEnergyAverage > );
        BennettsFreeEnergyAverage_exposer.def( "__repr__", &__str__< ::SireMaths::BennettsFreeEnergyAverage > );
    }

}
