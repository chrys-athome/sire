// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AtomSelection.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atomselection.h"

#include "moleculedata.h"

#include "moleculeinfodata.h"

#include "moleculeview.h"

#include <QDebug>

#include "atomselection.h"

SireMol::AtomSelection __copy__(const SireMol::AtomSelection &other){ return SireMol::AtomSelection(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_AtomSelection_class(){

    { //::SireMol::AtomSelection
        typedef bp::class_< SireMol::AtomSelection, bp::bases< SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > AtomSelection_exposer_t;
        AtomSelection_exposer_t AtomSelection_exposer = AtomSelection_exposer_t( "AtomSelection", bp::init< >() );
        bp::scope AtomSelection_scope( AtomSelection_exposer );
        AtomSelection_exposer.def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molecule") )) );
        AtomSelection_exposer.def( bp::init< SireMol::MoleculeData const & >(( bp::arg("moldata") )) );
        AtomSelection_exposer.def( bp::init< SireMol::MoleculeInfoData const & >(( bp::arg("molinfo") )) );
        AtomSelection_exposer.def( bp::init< SireMol::AtomSelection const & >(( bp::arg("other") )) );
        { //::SireMol::AtomSelection::assertCompatibleWith
        
            typedef void ( ::SireMol::AtomSelection::*assertCompatibleWith_function_type )( ::SireMol::MoleculeData const & ) const;
            assertCompatibleWith_function_type assertCompatibleWith_function_value( &::SireMol::AtomSelection::assertCompatibleWith );
            
            AtomSelection_exposer.def( 
                "assertCompatibleWith"
                , assertCompatibleWith_function_value
                , ( bp::arg("moldata") ) );
        
        }
        { //::SireMol::AtomSelection::assertCompatibleWith
        
            typedef void ( ::SireMol::AtomSelection::*assertCompatibleWith_function_type )( ::SireMol::MoleculeView const & ) const;
            assertCompatibleWith_function_type assertCompatibleWith_function_value( &::SireMol::AtomSelection::assertCompatibleWith );
            
            AtomSelection_exposer.def( 
                "assertCompatibleWith"
                , assertCompatibleWith_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::AtomSelection::assertCompatibleWith
        
            typedef void ( ::SireMol::AtomSelection::*assertCompatibleWith_function_type )( ::SireMol::MoleculeInfoData const & ) const;
            assertCompatibleWith_function_type assertCompatibleWith_function_value( &::SireMol::AtomSelection::assertCompatibleWith );
            
            AtomSelection_exposer.def( 
                "assertCompatibleWith"
                , assertCompatibleWith_function_value
                , ( bp::arg("molinfo") ) );
        
        }
        { //::SireMol::AtomSelection::assertCompatibleWith
        
            typedef void ( ::SireMol::AtomSelection::*assertCompatibleWith_function_type )( ::SireMol::AtomSelection const & ) const;
            assertCompatibleWith_function_type assertCompatibleWith_function_value( &::SireMol::AtomSelection::assertCompatibleWith );
            
            AtomSelection_exposer.def( 
                "assertCompatibleWith"
                , assertCompatibleWith_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMol::AtomSelection::assertSelected
        
            typedef void ( ::SireMol::AtomSelection::*assertSelected_function_type )( ::SireMol::AtomIdx ) const;
            assertSelected_function_type assertSelected_function_value( &::SireMol::AtomSelection::assertSelected );
            
            AtomSelection_exposer.def( 
                "assertSelected"
                , assertSelected_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::AtomSelection::assertSelected
        
            typedef void ( ::SireMol::AtomSelection::*assertSelected_function_type )( ::SireMol::AtomID const & ) const;
            assertSelected_function_type assertSelected_function_value( &::SireMol::AtomSelection::assertSelected );
            
            AtomSelection_exposer.def( 
                "assertSelected"
                , assertSelected_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::AtomIdx ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::CGIdx ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("cgidx") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::ResIdx ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("residx") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::ChainIdx ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("chainidx") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::SegIdx ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("segidx") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::CGID const & ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::ResID const & ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::ChainID const & ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::SegID const & ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::AtomSelection::contains
        
            typedef bool ( ::SireMol::AtomSelection::*contains_function_type )( ::SireMol::AtomSelection const & ) const;
            contains_function_type contains_function_value( &::SireMol::AtomSelection::contains );
            
            AtomSelection_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("selection") ) );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::AtomIdx ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::CGIdx ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::ResIdx ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::ChainIdx ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::SegIdx ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QSet< SireMol::AtomIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("atomidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QSet< SireMol::CGIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("cgidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QSet< SireMol::ResIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("residxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QSet< SireMol::ChainIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("chainidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QSet< SireMol::SegIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("segidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QList< SireMol::AtomIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("atomidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QList< SireMol::CGIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("cgidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QList< SireMol::ResIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("residxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QList< SireMol::ChainIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("chainidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::QList< SireMol::SegIdx > const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("segidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::AtomID const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::CGID const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::ResID const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::ChainID const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("chainid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::SegID const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselect_function_type )( ::SireMol::AtomSelection const & ) ;
            deselect_function_type deselect_function_value( &::SireMol::AtomSelection::deselect );
            
            AtomSelection_exposer.def( 
                "deselect"
                , deselect_function_value
                , ( bp::arg("selection") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::deselectAll
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*deselectAll_function_type )(  ) ;
            deselectAll_function_type deselectAll_function_value( &::SireMol::AtomSelection::deselectAll );
            
            AtomSelection_exposer.def( 
                "deselectAll"
                , deselectAll_function_value
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::info
        
            typedef ::SireMol::MoleculeInfoData const & ( ::SireMol::AtomSelection::*info_function_type )(  ) const;
            info_function_type info_function_value( &::SireMol::AtomSelection::info );
            
            AtomSelection_exposer.def( 
                "info"
                , info_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::AtomIdx ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::CGIdx ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::ResIdx ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::ChainIdx ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::SegIdx ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QSet< SireMol::AtomIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QSet< SireMol::CGIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QSet< SireMol::ResIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QSet< SireMol::ChainIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QSet< SireMol::SegIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QList< SireMol::AtomIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QList< SireMol::CGIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QList< SireMol::ResIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QList< SireMol::ChainIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::QList< SireMol::SegIdx > const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::AtomID const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::CGID const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::ResID const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::ChainID const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("chainid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::SegID const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersect
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*intersect_function_type )( ::SireMol::AtomSelection const & ) ;
            intersect_function_type intersect_function_value( &::SireMol::AtomSelection::intersect );
            
            AtomSelection_exposer.def( 
                "intersect"
                , intersect_function_value
                , ( bp::arg("selection") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::AtomIdx ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::CGIdx ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("cgidx") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::ResIdx ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("residx") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::ChainIdx ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("chainidx") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::SegIdx ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("segidx") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::AtomID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::CGID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::ResID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::ChainID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::SegID const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::AtomSelection::intersects
        
            typedef bool ( ::SireMol::AtomSelection::*intersects_function_type )( ::SireMol::AtomSelection const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::AtomSelection::intersects );
            
            AtomSelection_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("selection") ) );
        
        }
        { //::SireMol::AtomSelection::invert
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*invert_function_type )(  ) ;
            invert_function_type invert_function_value( &::SireMol::AtomSelection::invert );
            
            AtomSelection_exposer.def( 
                "invert"
                , invert_function_value
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::isCompatibleWith
        
            typedef bool ( ::SireMol::AtomSelection::*isCompatibleWith_function_type )( ::SireMol::MoleculeInfoData const & ) const;
            isCompatibleWith_function_type isCompatibleWith_function_value( &::SireMol::AtomSelection::isCompatibleWith );
            
            AtomSelection_exposer.def( 
                "isCompatibleWith"
                , isCompatibleWith_function_value
                , ( bp::arg("molinfo") ) );
        
        }
        { //::SireMol::AtomSelection::isEmpty
        
            typedef bool ( ::SireMol::AtomSelection::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::AtomSelection::isEmpty );
            
            AtomSelection_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::AtomIdx ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::CGIdx ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::ResIdx ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::ChainIdx ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::SegIdx ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QSet< SireMol::AtomIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QSet< SireMol::CGIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QSet< SireMol::ResIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QSet< SireMol::ChainIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QSet< SireMol::SegIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QList< SireMol::AtomIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QList< SireMol::CGIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QList< SireMol::ResIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QList< SireMol::ChainIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::QList< SireMol::SegIdx > const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::AtomID const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::CGID const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::ResID const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::ChainID const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("chainid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::SegID const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::mask
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*mask_function_type )( ::SireMol::AtomSelection const & ) ;
            mask_function_type mask_function_value( &::SireMol::AtomSelection::mask );
            
            AtomSelection_exposer.def( 
                "mask"
                , mask_function_value
                , ( bp::arg("selection") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::nAtoms
        
            typedef int ( ::SireMol::AtomSelection::*nAtoms_function_type )(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMol::AtomSelection::nAtoms );
            
            AtomSelection_exposer.def( 
                "nAtoms"
                , nAtoms_function_value );
        
        }
        { //::SireMol::AtomSelection::nChains
        
            typedef int ( ::SireMol::AtomSelection::*nChains_function_type )(  ) const;
            nChains_function_type nChains_function_value( &::SireMol::AtomSelection::nChains );
            
            AtomSelection_exposer.def( 
                "nChains"
                , nChains_function_value );
        
        }
        { //::SireMol::AtomSelection::nCutGroups
        
            typedef int ( ::SireMol::AtomSelection::*nCutGroups_function_type )(  ) const;
            nCutGroups_function_type nCutGroups_function_value( &::SireMol::AtomSelection::nCutGroups );
            
            AtomSelection_exposer.def( 
                "nCutGroups"
                , nCutGroups_function_value );
        
        }
        { //::SireMol::AtomSelection::nResidues
        
            typedef int ( ::SireMol::AtomSelection::*nResidues_function_type )(  ) const;
            nResidues_function_type nResidues_function_value( &::SireMol::AtomSelection::nResidues );
            
            AtomSelection_exposer.def( 
                "nResidues"
                , nResidues_function_value );
        
        }
        { //::SireMol::AtomSelection::nSegments
        
            typedef int ( ::SireMol::AtomSelection::*nSegments_function_type )(  ) const;
            nSegments_function_type nSegments_function_value( &::SireMol::AtomSelection::nSegments );
            
            AtomSelection_exposer.def( 
                "nSegments"
                , nSegments_function_value );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )(  ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::CGIdx ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("cgidx") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::AtomIdx ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::ResIdx ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("residx") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::ChainIdx ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("chainidx") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::SegIdx ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("segidx") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::CGID const & ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::AtomID const & ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::ResID const & ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::ChainID const & ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::SegID const & ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::AtomSelection::nSelected
        
            typedef int ( ::SireMol::AtomSelection::*nSelected_function_type )( ::SireMol::AtomSelection const & ) const;
            nSelected_function_type nSelected_function_value( &::SireMol::AtomSelection::nSelected );
            
            AtomSelection_exposer.def( 
                "nSelected"
                , nSelected_function_value
                , ( bp::arg("selection") ) );
        
        }
        { //::SireMol::AtomSelection::nSelectedAtoms
        
            typedef int ( ::SireMol::AtomSelection::*nSelectedAtoms_function_type )(  ) const;
            nSelectedAtoms_function_type nSelectedAtoms_function_value( &::SireMol::AtomSelection::nSelectedAtoms );
            
            AtomSelection_exposer.def( 
                "nSelectedAtoms"
                , nSelectedAtoms_function_value );
        
        }
        { //::SireMol::AtomSelection::nSelectedChains
        
            typedef int ( ::SireMol::AtomSelection::*nSelectedChains_function_type )(  ) const;
            nSelectedChains_function_type nSelectedChains_function_value( &::SireMol::AtomSelection::nSelectedChains );
            
            AtomSelection_exposer.def( 
                "nSelectedChains"
                , nSelectedChains_function_value );
        
        }
        { //::SireMol::AtomSelection::nSelectedCutGroups
        
            typedef int ( ::SireMol::AtomSelection::*nSelectedCutGroups_function_type )(  ) const;
            nSelectedCutGroups_function_type nSelectedCutGroups_function_value( &::SireMol::AtomSelection::nSelectedCutGroups );
            
            AtomSelection_exposer.def( 
                "nSelectedCutGroups"
                , nSelectedCutGroups_function_value );
        
        }
        { //::SireMol::AtomSelection::nSelectedResidues
        
            typedef int ( ::SireMol::AtomSelection::*nSelectedResidues_function_type )(  ) const;
            nSelectedResidues_function_type nSelectedResidues_function_value( &::SireMol::AtomSelection::nSelectedResidues );
            
            AtomSelection_exposer.def( 
                "nSelectedResidues"
                , nSelectedResidues_function_value );
        
        }
        { //::SireMol::AtomSelection::nSelectedSegments
        
            typedef int ( ::SireMol::AtomSelection::*nSelectedSegments_function_type )(  ) const;
            nSelectedSegments_function_type nSelectedSegments_function_value( &::SireMol::AtomSelection::nSelectedSegments );
            
            AtomSelection_exposer.def( 
                "nSelectedSegments"
                , nSelectedSegments_function_value );
        
        }
        AtomSelection_exposer.def( bp::self != bp::self );
        { //::SireMol::AtomSelection::operator=
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*assign_function_type )( ::SireMol::AtomSelection const & ) ;
            assign_function_type assign_function_value( &::SireMol::AtomSelection::operator= );
            
            AtomSelection_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        AtomSelection_exposer.def( bp::self == bp::self );
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::AtomIdx ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::CGIdx ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::ResIdx ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::ChainIdx ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::SegIdx ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QSet< SireMol::AtomIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("atomidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QSet< SireMol::CGIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("cgidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QSet< SireMol::ResIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("residxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QSet< SireMol::ChainIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("chainidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QSet< SireMol::SegIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("segidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QList< SireMol::AtomIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("atomidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QList< SireMol::CGIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("cgidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QList< SireMol::ResIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("residxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QList< SireMol::ChainIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("chainidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::QList< SireMol::SegIdx > const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("segidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::AtomID const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::CGID const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::ResID const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::ChainID const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("chainid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::SegID const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::select
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*select_function_type )( ::SireMol::AtomSelection const & ) ;
            select_function_type select_function_value( &::SireMol::AtomSelection::select );
            
            AtomSelection_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("selection") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectAll
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectAll_function_type )(  ) ;
            selectAll_function_type selectAll_function_value( &::SireMol::AtomSelection::selectAll );
            
            AtomSelection_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectNone
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectNone_function_type )(  ) ;
            selectNone_function_type selectNone_function_value( &::SireMol::AtomSelection::selectNone );
            
            AtomSelection_exposer.def( 
                "selectNone"
                , selectNone_function_value
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::AtomIdx ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::CGIdx ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::ResIdx ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::ChainIdx ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::SegIdx ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QSet< SireMol::AtomIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("atomidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QSet< SireMol::CGIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("cgidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QSet< SireMol::ResIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("residxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QSet< SireMol::ChainIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("chainidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QSet< SireMol::SegIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("segidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QList< SireMol::AtomIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("atomidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QList< SireMol::CGIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("cgidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QList< SireMol::ResIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("residxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QList< SireMol::ChainIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("chainidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::QList< SireMol::SegIdx > const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("segidxs") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::AtomID const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::CGID const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::ResID const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::ChainID const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("chainid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::SegID const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selectOnly
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*selectOnly_function_type )( ::SireMol::AtomSelection const & ) ;
            selectOnly_function_type selectOnly_function_value( &::SireMol::AtomSelection::selectOnly );
            
            AtomSelection_exposer.def( 
                "selectOnly"
                , selectOnly_function_value
                , ( bp::arg("selection") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::CGAtomIdx const & ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("cgatomidx") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::AtomIdx ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::AtomID const & ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::CGIdx ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("cgidx") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::ResIdx ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("residx") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::ChainIdx ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("chainidx") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::SegIdx ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("segidx") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::CGID const & ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::ResID const & ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::ChainID const & ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::SegID const & ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::AtomSelection::selected
        
            typedef bool ( ::SireMol::AtomSelection::*selected_function_type )( ::SireMol::AtomSelection const & ) const;
            selected_function_type selected_function_value( &::SireMol::AtomSelection::selected );
            
            AtomSelection_exposer.def( 
                "selected"
                , selected_function_value
                , ( bp::arg("selection") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )(  ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::AtomIdx ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::CGIdx ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("cgidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::ResIdx ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("residx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::ChainIdx ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("chainidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::SegIdx ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("segidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::AtomID const & ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::CGID const & ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::ResID const & ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::ChainID const & ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::SegID const & ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAll
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAll_function_type )( ::SireMol::AtomSelection const & ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::AtomSelection::selectedAll );
            
            AtomSelection_exposer.def( 
                "selectedAll"
                , selectedAll_function_value
                , ( bp::arg("selection") ) );
        
        }
        { //::SireMol::AtomSelection::selectedAllAtoms
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAllAtoms_function_type )(  ) const;
            selectedAllAtoms_function_type selectedAllAtoms_function_value( &::SireMol::AtomSelection::selectedAllAtoms );
            
            AtomSelection_exposer.def( 
                "selectedAllAtoms"
                , selectedAllAtoms_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedAllChains
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAllChains_function_type )(  ) const;
            selectedAllChains_function_type selectedAllChains_function_value( &::SireMol::AtomSelection::selectedAllChains );
            
            AtomSelection_exposer.def( 
                "selectedAllChains"
                , selectedAllChains_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedAllCutGroups
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAllCutGroups_function_type )(  ) const;
            selectedAllCutGroups_function_type selectedAllCutGroups_function_value( &::SireMol::AtomSelection::selectedAllCutGroups );
            
            AtomSelection_exposer.def( 
                "selectedAllCutGroups"
                , selectedAllCutGroups_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedAllResidues
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAllResidues_function_type )(  ) const;
            selectedAllResidues_function_type selectedAllResidues_function_value( &::SireMol::AtomSelection::selectedAllResidues );
            
            AtomSelection_exposer.def( 
                "selectedAllResidues"
                , selectedAllResidues_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedAllSegments
        
            typedef bool ( ::SireMol::AtomSelection::*selectedAllSegments_function_type )(  ) const;
            selectedAllSegments_function_type selectedAllSegments_function_value( &::SireMol::AtomSelection::selectedAllSegments );
            
            AtomSelection_exposer.def( 
                "selectedAllSegments"
                , selectedAllSegments_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedAtoms
        
            typedef ::QVector< SireMol::AtomIdx > ( ::SireMol::AtomSelection::*selectedAtoms_function_type )(  ) const;
            selectedAtoms_function_type selectedAtoms_function_value( &::SireMol::AtomSelection::selectedAtoms );
            
            AtomSelection_exposer.def( 
                "selectedAtoms"
                , selectedAtoms_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedAtoms
        
            typedef ::QSet< SireID::Index > ( ::SireMol::AtomSelection::*selectedAtoms_function_type )( ::SireMol::CGIdx ) const;
            selectedAtoms_function_type selectedAtoms_function_value( &::SireMol::AtomSelection::selectedAtoms );
            
            AtomSelection_exposer.def( 
                "selectedAtoms"
                , selectedAtoms_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedChains
        
            typedef ::QList< SireMol::ChainIdx > ( ::SireMol::AtomSelection::*selectedChains_function_type )(  ) const;
            selectedChains_function_type selectedChains_function_value( &::SireMol::AtomSelection::selectedChains );
            
            AtomSelection_exposer.def( 
                "selectedChains"
                , selectedChains_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedCutGroups
        
            typedef ::QList< SireMol::CGIdx > ( ::SireMol::AtomSelection::*selectedCutGroups_function_type )(  ) const;
            selectedCutGroups_function_type selectedCutGroups_function_value( &::SireMol::AtomSelection::selectedCutGroups );
            
            AtomSelection_exposer.def( 
                "selectedCutGroups"
                , selectedCutGroups_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )(  ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::AtomIdx ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::CGIdx ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("cgidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::ResIdx ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("residx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::ChainIdx ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("chainidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::SegIdx ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("segidx") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::AtomID const & ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::CGID const & ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::ResID const & ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::ChainID const & ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::SegID const & ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::AtomSelection::selectedNone
        
            typedef bool ( ::SireMol::AtomSelection::*selectedNone_function_type )( ::SireMol::AtomSelection const & ) const;
            selectedNone_function_type selectedNone_function_value( &::SireMol::AtomSelection::selectedNone );
            
            AtomSelection_exposer.def( 
                "selectedNone"
                , selectedNone_function_value
                , ( bp::arg("selection") ) );
        
        }
        { //::SireMol::AtomSelection::selectedResidues
        
            typedef ::QList< SireMol::ResIdx > ( ::SireMol::AtomSelection::*selectedResidues_function_type )(  ) const;
            selectedResidues_function_type selectedResidues_function_value( &::SireMol::AtomSelection::selectedResidues );
            
            AtomSelection_exposer.def( 
                "selectedResidues"
                , selectedResidues_function_value );
        
        }
        { //::SireMol::AtomSelection::selectedSegments
        
            typedef ::QList< SireMol::SegIdx > ( ::SireMol::AtomSelection::*selectedSegments_function_type )(  ) const;
            selectedSegments_function_type selectedSegments_function_value( &::SireMol::AtomSelection::selectedSegments );
            
            AtomSelection_exposer.def( 
                "selectedSegments"
                , selectedSegments_function_value );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::AtomIdx ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::CGIdx ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::ResIdx ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::ChainIdx ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::SegIdx ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QSet< SireMol::AtomIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QSet< SireMol::CGIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QSet< SireMol::ResIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QSet< SireMol::ChainIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QSet< SireMol::SegIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QList< SireMol::AtomIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QList< SireMol::CGIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QList< SireMol::ResIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QList< SireMol::ChainIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::QList< SireMol::SegIdx > const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::AtomID const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::CGID const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::ResID const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::ChainID const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("chainid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::SegID const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::subtract
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*subtract_function_type )( ::SireMol::AtomSelection const & ) ;
            subtract_function_type subtract_function_value( &::SireMol::AtomSelection::subtract );
            
            AtomSelection_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("selection") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::AtomSelection::typeName );
            
            AtomSelection_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::AtomIdx ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::CGIdx ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::ResIdx ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::ChainIdx ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::SegIdx ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QSet< SireMol::AtomIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QSet< SireMol::CGIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QSet< SireMol::ResIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QSet< SireMol::ChainIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QSet< SireMol::SegIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QList< SireMol::AtomIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QList< SireMol::CGIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("cgidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QList< SireMol::ResIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QList< SireMol::ChainIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("chainidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QList< SireMol::SegIdx > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("segidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::AtomID const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::CGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("cgid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::ResID const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::ChainID const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("chainid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::SegID const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("segid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::SireMol::AtomSelection const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("selection") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomSelection::unite
        
            typedef ::SireMol::AtomSelection & ( ::SireMol::AtomSelection::*unite_function_type )( ::QList< SireMol::AtomSelection > const & ) ;
            unite_function_type unite_function_value( &::SireMol::AtomSelection::unite );
            
            AtomSelection_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("selections") )
                , bp::return_self< >() );
        
        }
        AtomSelection_exposer.staticmethod( "typeName" );
        AtomSelection_exposer.def( "__copy__", &__copy__);
        AtomSelection_exposer.def( "__deepcopy__", &__copy__);
        AtomSelection_exposer.def( "clone", &__copy__);
        AtomSelection_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::AtomSelection >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomSelection_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::AtomSelection >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomSelection_exposer.def( "__str__", &__str__< ::SireMol::AtomSelection > );
        AtomSelection_exposer.def( "__repr__", &__str__< ::SireMol::AtomSelection > );
    }

}
