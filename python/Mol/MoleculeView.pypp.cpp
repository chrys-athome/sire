// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "MoleculeView.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/errors.h"

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomselection.h"

#include "chain.h"

#include "cutgroup.h"

#include "molecule.h"

#include "moleculeview.h"

#include "residue.h"

#include "segment.h"

#include "selector.hpp"

#include <QDebug>

#include "moleculeview.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_MoleculeView_class(){

    { //::SireMol::MoleculeView
        typedef bp::class_< SireMol::MoleculeView, bp::bases< SireBase::Property >, boost::noncopyable > MoleculeView_exposer_t;
        MoleculeView_exposer_t MoleculeView_exposer = MoleculeView_exposer_t( "MoleculeView", bp::no_init );
        bp::scope MoleculeView_scope( MoleculeView_exposer );
        { //::SireMol::MoleculeView::assertContains
        
            typedef void ( ::SireMol::MoleculeView::*assertContains_function_type )( ::SireMol::AtomIdx ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeView::assertContains );
            
            MoleculeView_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("atomidx") ) );
        
        }
        { //::SireMol::MoleculeView::assertHasMetadata
        
            typedef void ( ::SireMol::MoleculeView::*assertHasMetadata_function_type )( ::SireBase::PropertyName const & ) const;
            assertHasMetadata_function_type assertHasMetadata_function_value( &::SireMol::MoleculeView::assertHasMetadata );
            
            MoleculeView_exposer.def( 
                "assertHasMetadata"
                , assertHasMetadata_function_value
                , ( bp::arg("metakey") ) );
        
        }
        { //::SireMol::MoleculeView::assertHasMetadata
        
            typedef void ( ::SireMol::MoleculeView::*assertHasMetadata_function_type )( ::SireBase::PropertyName const &,::SireBase::PropertyName const & ) const;
            assertHasMetadata_function_type assertHasMetadata_function_value( &::SireMol::MoleculeView::assertHasMetadata );
            
            MoleculeView_exposer.def( 
                "assertHasMetadata"
                , assertHasMetadata_function_value
                , ( bp::arg("key"), bp::arg("metakey") ) );
        
        }
        { //::SireMol::MoleculeView::assertHasProperty
        
            typedef void ( ::SireMol::MoleculeView::*assertHasProperty_function_type )( ::SireBase::PropertyName const & ) const;
            assertHasProperty_function_type assertHasProperty_function_value( &::SireMol::MoleculeView::assertHasProperty );
            
            MoleculeView_exposer.def( 
                "assertHasProperty"
                , assertHasProperty_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireMol::MoleculeView::assertSameMolecule
        
            typedef void ( ::SireMol::MoleculeView::*assertSameMolecule_function_type )( ::SireMol::MoleculeView const & ) const;
            assertSameMolecule_function_type assertSameMolecule_function_value( &::SireMol::MoleculeView::assertSameMolecule );
            
            MoleculeView_exposer.def( 
                "assertSameMolecule"
                , assertSameMolecule_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMol::MoleculeView::assertSameMolecule
        
            typedef void ( ::SireMol::MoleculeView::*assertSameMolecule_function_type )( ::SireMol::MoleculeData const & ) const;
            assertSameMolecule_function_type assertSameMolecule_function_value( &::SireMol::MoleculeView::assertSameMolecule );
            
            MoleculeView_exposer.def( 
                "assertSameMolecule"
                , assertSameMolecule_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMol::MoleculeView::atom
        
            typedef ::SireMol::Atom ( ::SireMol::MoleculeView::*atom_function_type )( ::SireMol::AtomID const &,::SireBase::PropertyMap const & ) const;
            atom_function_type atom_function_value( &::SireMol::MoleculeView::atom );
            
            MoleculeView_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("atomid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::atom
        
            typedef ::SireMol::Atom ( ::SireMol::MoleculeView::*atom_function_type )(  ) const;
            atom_function_type atom_function_value( &::SireMol::MoleculeView::atom );
            
            MoleculeView_exposer.def( 
                "atom"
                , atom_function_value );
        
        }
        { //::SireMol::MoleculeView::atoms
        
            typedef ::SireMol::Selector< SireMol::Atom > ( ::SireMol::MoleculeView::*atoms_function_type )( ::SireMol::AtomID const &,::SireBase::PropertyMap const & ) const;
            atoms_function_type atoms_function_value( &::SireMol::MoleculeView::atoms );
            
            MoleculeView_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("atomid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::atoms
        
            typedef ::SireMol::Selector< SireMol::Atom > ( ::SireMol::MoleculeView::*atoms_function_type )(  ) const;
            atoms_function_type atoms_function_value( &::SireMol::MoleculeView::atoms );
            
            MoleculeView_exposer.def( 
                "atoms"
                , atoms_function_value );
        
        }
        { //::SireMol::MoleculeView::chain
        
            typedef ::SireMol::Chain ( ::SireMol::MoleculeView::*chain_function_type )( ::SireMol::ChainID const &,::SireBase::PropertyMap const & ) const;
            chain_function_type chain_function_value( &::SireMol::MoleculeView::chain );
            
            MoleculeView_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("chainid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::chain
        
            typedef ::SireMol::Chain ( ::SireMol::MoleculeView::*chain_function_type )(  ) const;
            chain_function_type chain_function_value( &::SireMol::MoleculeView::chain );
            
            MoleculeView_exposer.def( 
                "chain"
                , chain_function_value );
        
        }
        { //::SireMol::MoleculeView::chains
        
            typedef ::SireMol::Selector< SireMol::Chain > ( ::SireMol::MoleculeView::*chains_function_type )( ::SireMol::ChainID const &,::SireBase::PropertyMap const & ) const;
            chains_function_type chains_function_value( &::SireMol::MoleculeView::chains );
            
            MoleculeView_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("chainid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::chains
        
            typedef ::SireMol::Selector< SireMol::Chain > ( ::SireMol::MoleculeView::*chains_function_type )(  ) const;
            chains_function_type chains_function_value( &::SireMol::MoleculeView::chains );
            
            MoleculeView_exposer.def( 
                "chains"
                , chains_function_value );
        
        }
        { //::SireMol::MoleculeView::constData
        
            typedef ::SireMol::MoleculeData const & ( ::SireMol::MoleculeView::*constData_function_type )(  ) const;
            constData_function_type constData_function_value( &::SireMol::MoleculeView::constData );
            
            MoleculeView_exposer.def( 
                "constData"
                , constData_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::MoleculeView::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMol::MoleculeView::*cutGroup_function_type )( ::SireMol::CGID const &,::SireBase::PropertyMap const & ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMol::MoleculeView::cutGroup );
            
            MoleculeView_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("cgid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMol::MoleculeView::*cutGroup_function_type )(  ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMol::MoleculeView::cutGroup );
            
            MoleculeView_exposer.def( 
                "cutGroup"
                , cutGroup_function_value );
        
        }
        { //::SireMol::MoleculeView::cutGroups
        
            typedef ::SireMol::Selector< SireMol::CutGroup > ( ::SireMol::MoleculeView::*cutGroups_function_type )( ::SireMol::CGID const &,::SireBase::PropertyMap const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::MoleculeView::cutGroups );
            
            MoleculeView_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("cgid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::cutGroups
        
            typedef ::SireMol::Selector< SireMol::CutGroup > ( ::SireMol::MoleculeView::*cutGroups_function_type )(  ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::MoleculeView::cutGroups );
            
            MoleculeView_exposer.def( 
                "cutGroups"
                , cutGroups_function_value );
        
        }
        { //::SireMol::MoleculeView::data
        
            typedef ::SireMol::MoleculeData const & ( ::SireMol::MoleculeView::*data_function_type )(  ) const;
            data_function_type data_function_value( &::SireMol::MoleculeView::data );
            
            MoleculeView_exposer.def( 
                "data"
                , data_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::MoleculeView::hasMetadata
        
            typedef bool ( ::SireMol::MoleculeView::*hasMetadata_function_type )( ::SireBase::PropertyName const & ) const;
            hasMetadata_function_type hasMetadata_function_value( &::SireMol::MoleculeView::hasMetadata );
            
            MoleculeView_exposer.def( 
                "hasMetadata"
                , hasMetadata_function_value
                , ( bp::arg("metakey") ) );
        
        }
        { //::SireMol::MoleculeView::hasMetadata
        
            typedef bool ( ::SireMol::MoleculeView::*hasMetadata_function_type )( ::SireBase::PropertyName const &,::SireBase::PropertyName const & ) const;
            hasMetadata_function_type hasMetadata_function_value( &::SireMol::MoleculeView::hasMetadata );
            
            MoleculeView_exposer.def( 
                "hasMetadata"
                , hasMetadata_function_value
                , ( bp::arg("key"), bp::arg("metakey") ) );
        
        }
        { //::SireMol::MoleculeView::hasProperty
        
            typedef bool ( ::SireMol::MoleculeView::*hasProperty_function_type )( ::SireBase::PropertyName const & ) const;
            hasProperty_function_type hasProperty_function_value( &::SireMol::MoleculeView::hasProperty );
            
            MoleculeView_exposer.def( 
                "hasProperty"
                , hasProperty_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireMol::MoleculeView::isEmpty
        
            typedef bool ( ::SireMol::MoleculeView::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::MoleculeView::isEmpty );
            
            MoleculeView_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireMol::MoleculeView::isNull
        
            typedef bool ( ::SireMol::MoleculeView::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireMol::MoleculeView::isNull );
            
            MoleculeView_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireMol::MoleculeView::isSameMolecule
        
            typedef bool ( ::SireMol::MoleculeView::*isSameMolecule_function_type )( ::SireMol::MoleculeView const & ) const;
            isSameMolecule_function_type isSameMolecule_function_value( &::SireMol::MoleculeView::isSameMolecule );
            
            MoleculeView_exposer.def( 
                "isSameMolecule"
                , isSameMolecule_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMol::MoleculeView::isSameMolecule
        
            typedef bool ( ::SireMol::MoleculeView::*isSameMolecule_function_type )( ::SireMol::MoleculeData const & ) const;
            isSameMolecule_function_type isSameMolecule_function_value( &::SireMol::MoleculeView::isSameMolecule );
            
            MoleculeView_exposer.def( 
                "isSameMolecule"
                , isSameMolecule_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMol::MoleculeView::metadataKeys
        
            typedef ::QStringList ( ::SireMol::MoleculeView::*metadataKeys_function_type )(  ) const;
            metadataKeys_function_type metadataKeys_function_value( &::SireMol::MoleculeView::metadataKeys );
            
            MoleculeView_exposer.def( 
                "metadataKeys"
                , metadataKeys_function_value );
        
        }
        { //::SireMol::MoleculeView::metadataKeys
        
            typedef ::QStringList ( ::SireMol::MoleculeView::*metadataKeys_function_type )( ::SireBase::PropertyName const & ) const;
            metadataKeys_function_type metadataKeys_function_value( &::SireMol::MoleculeView::metadataKeys );
            
            MoleculeView_exposer.def( 
                "metadataKeys"
                , metadataKeys_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireMol::MoleculeView::metadataType
        
            typedef char const * ( ::SireMol::MoleculeView::*metadataType_function_type )( ::SireBase::PropertyName const & ) const;
            metadataType_function_type metadataType_function_value( &::SireMol::MoleculeView::metadataType );
            
            MoleculeView_exposer.def( 
                "metadataType"
                , metadataType_function_value
                , ( bp::arg("metakey") ) );
        
        }
        { //::SireMol::MoleculeView::metadataType
        
            typedef char const * ( ::SireMol::MoleculeView::*metadataType_function_type )( ::SireBase::PropertyName const &,::SireBase::PropertyName const & ) const;
            metadataType_function_type metadataType_function_value( &::SireMol::MoleculeView::metadataType );
            
            MoleculeView_exposer.def( 
                "metadataType"
                , metadataType_function_value
                , ( bp::arg("key"), bp::arg("metakey") ) );
        
        }
        { //::SireMol::MoleculeView::molecule
        
            typedef ::SireMol::Molecule ( ::SireMol::MoleculeView::*molecule_function_type )(  ) const;
            molecule_function_type molecule_function_value( &::SireMol::MoleculeView::molecule );
            
            MoleculeView_exposer.def( 
                "molecule"
                , molecule_function_value );
        
        }
        { //::SireMol::MoleculeView::propertyKeys
        
            typedef ::QStringList ( ::SireMol::MoleculeView::*propertyKeys_function_type )(  ) const;
            propertyKeys_function_type propertyKeys_function_value( &::SireMol::MoleculeView::propertyKeys );
            
            MoleculeView_exposer.def( 
                "propertyKeys"
                , propertyKeys_function_value );
        
        }
        { //::SireMol::MoleculeView::propertyType
        
            typedef char const * ( ::SireMol::MoleculeView::*propertyType_function_type )( ::SireBase::PropertyName const & ) const;
            propertyType_function_type propertyType_function_value( &::SireMol::MoleculeView::propertyType );
            
            MoleculeView_exposer.def( 
                "propertyType"
                , propertyType_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireMol::MoleculeView::residue
        
            typedef ::SireMol::Residue ( ::SireMol::MoleculeView::*residue_function_type )( ::SireMol::ResID const &,::SireBase::PropertyMap const & ) const;
            residue_function_type residue_function_value( &::SireMol::MoleculeView::residue );
            
            MoleculeView_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("resid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::residue
        
            typedef ::SireMol::Residue ( ::SireMol::MoleculeView::*residue_function_type )(  ) const;
            residue_function_type residue_function_value( &::SireMol::MoleculeView::residue );
            
            MoleculeView_exposer.def( 
                "residue"
                , residue_function_value );
        
        }
        { //::SireMol::MoleculeView::residues
        
            typedef ::SireMol::Selector< SireMol::Residue > ( ::SireMol::MoleculeView::*residues_function_type )( ::SireMol::ResID const &,::SireBase::PropertyMap const & ) const;
            residues_function_type residues_function_value( &::SireMol::MoleculeView::residues );
            
            MoleculeView_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("resid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::residues
        
            typedef ::SireMol::Selector< SireMol::Residue > ( ::SireMol::MoleculeView::*residues_function_type )(  ) const;
            residues_function_type residues_function_value( &::SireMol::MoleculeView::residues );
            
            MoleculeView_exposer.def( 
                "residues"
                , residues_function_value );
        
        }
        { //::SireMol::MoleculeView::segment
        
            typedef ::SireMol::Segment ( ::SireMol::MoleculeView::*segment_function_type )( ::SireMol::SegID const &,::SireBase::PropertyMap const & ) const;
            segment_function_type segment_function_value( &::SireMol::MoleculeView::segment );
            
            MoleculeView_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("segid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::segment
        
            typedef ::SireMol::Segment ( ::SireMol::MoleculeView::*segment_function_type )(  ) const;
            segment_function_type segment_function_value( &::SireMol::MoleculeView::segment );
            
            MoleculeView_exposer.def( 
                "segment"
                , segment_function_value );
        
        }
        { //::SireMol::MoleculeView::segments
        
            typedef ::SireMol::Selector< SireMol::Segment > ( ::SireMol::MoleculeView::*segments_function_type )( ::SireMol::SegID const &,::SireBase::PropertyMap const & ) const;
            segments_function_type segments_function_value( &::SireMol::MoleculeView::segments );
            
            MoleculeView_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("segid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::segments
        
            typedef ::SireMol::Selector< SireMol::Segment > ( ::SireMol::MoleculeView::*segments_function_type )(  ) const;
            segments_function_type segments_function_value( &::SireMol::MoleculeView::segments );
            
            MoleculeView_exposer.def( 
                "segments"
                , segments_function_value );
        
        }
        { //::SireMol::MoleculeView::select
        
            typedef ::SireMol::CutGroup ( ::SireMol::MoleculeView::*select_function_type )( ::SireMol::CGID const &,::SireBase::PropertyMap const & ) const;
            select_function_type select_function_value( &::SireMol::MoleculeView::select );
            
            MoleculeView_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("cgid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::select
        
            typedef ::SireMol::Residue ( ::SireMol::MoleculeView::*select_function_type )( ::SireMol::ResID const &,::SireBase::PropertyMap const & ) const;
            select_function_type select_function_value( &::SireMol::MoleculeView::select );
            
            MoleculeView_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("resid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::select
        
            typedef ::SireMol::Chain ( ::SireMol::MoleculeView::*select_function_type )( ::SireMol::ChainID const &,::SireBase::PropertyMap const & ) const;
            select_function_type select_function_value( &::SireMol::MoleculeView::select );
            
            MoleculeView_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("chainid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::select
        
            typedef ::SireMol::Segment ( ::SireMol::MoleculeView::*select_function_type )( ::SireMol::SegID const &,::SireBase::PropertyMap const & ) const;
            select_function_type select_function_value( &::SireMol::MoleculeView::select );
            
            MoleculeView_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("segid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::select
        
            typedef ::SireMol::Atom ( ::SireMol::MoleculeView::*select_function_type )( ::SireMol::AtomID const &,::SireBase::PropertyMap const & ) const;
            select_function_type select_function_value( &::SireMol::MoleculeView::select );
            
            MoleculeView_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("atomid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::selectAll
        
            typedef ::SireMol::Selector< SireMol::Atom > ( ::SireMol::MoleculeView::*selectAll_function_type )( ::SireMol::AtomID const &,::SireBase::PropertyMap const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MoleculeView::selectAll );
            
            MoleculeView_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("atomid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::selectAll
        
            typedef ::SireMol::Selector< SireMol::Atom > ( ::SireMol::MoleculeView::*selectAll_function_type )(  ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MoleculeView::selectAll );
            
            MoleculeView_exposer.def( 
                "selectAll"
                , selectAll_function_value );
        
        }
        { //::SireMol::MoleculeView::selectAll
        
            typedef ::SireMol::Selector< SireMol::CutGroup > ( ::SireMol::MoleculeView::*selectAll_function_type )( ::SireMol::CGID const &,::SireBase::PropertyMap const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MoleculeView::selectAll );
            
            MoleculeView_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("cgid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::selectAll
        
            typedef ::SireMol::Selector< SireMol::Residue > ( ::SireMol::MoleculeView::*selectAll_function_type )( ::SireMol::ResID const &,::SireBase::PropertyMap const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MoleculeView::selectAll );
            
            MoleculeView_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("resid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::selectAll
        
            typedef ::SireMol::Selector< SireMol::Chain > ( ::SireMol::MoleculeView::*selectAll_function_type )( ::SireMol::ChainID const &,::SireBase::PropertyMap const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MoleculeView::selectAll );
            
            MoleculeView_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("chainid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::selectAll
        
            typedef ::SireMol::Selector< SireMol::Segment > ( ::SireMol::MoleculeView::*selectAll_function_type )( ::SireMol::SegID const &,::SireBase::PropertyMap const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MoleculeView::selectAll );
            
            MoleculeView_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("segid"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMol::MoleculeView::selectAllAtoms
        
            typedef ::SireMol::Selector< SireMol::Atom > ( ::SireMol::MoleculeView::*selectAllAtoms_function_type )(  ) const;
            selectAllAtoms_function_type selectAllAtoms_function_value( &::SireMol::MoleculeView::selectAllAtoms );
            
            MoleculeView_exposer.def( 
                "selectAllAtoms"
                , selectAllAtoms_function_value );
        
        }
        { //::SireMol::MoleculeView::selectAllChains
        
            typedef ::SireMol::Selector< SireMol::Chain > ( ::SireMol::MoleculeView::*selectAllChains_function_type )(  ) const;
            selectAllChains_function_type selectAllChains_function_value( &::SireMol::MoleculeView::selectAllChains );
            
            MoleculeView_exposer.def( 
                "selectAllChains"
                , selectAllChains_function_value );
        
        }
        { //::SireMol::MoleculeView::selectAllCutGroups
        
            typedef ::SireMol::Selector< SireMol::CutGroup > ( ::SireMol::MoleculeView::*selectAllCutGroups_function_type )(  ) const;
            selectAllCutGroups_function_type selectAllCutGroups_function_value( &::SireMol::MoleculeView::selectAllCutGroups );
            
            MoleculeView_exposer.def( 
                "selectAllCutGroups"
                , selectAllCutGroups_function_value );
        
        }
        { //::SireMol::MoleculeView::selectAllResidues
        
            typedef ::SireMol::Selector< SireMol::Residue > ( ::SireMol::MoleculeView::*selectAllResidues_function_type )(  ) const;
            selectAllResidues_function_type selectAllResidues_function_value( &::SireMol::MoleculeView::selectAllResidues );
            
            MoleculeView_exposer.def( 
                "selectAllResidues"
                , selectAllResidues_function_value );
        
        }
        { //::SireMol::MoleculeView::selectAllSegments
        
            typedef ::SireMol::Selector< SireMol::Segment > ( ::SireMol::MoleculeView::*selectAllSegments_function_type )(  ) const;
            selectAllSegments_function_type selectAllSegments_function_value( &::SireMol::MoleculeView::selectAllSegments );
            
            MoleculeView_exposer.def( 
                "selectAllSegments"
                , selectAllSegments_function_value );
        
        }
        { //::SireMol::MoleculeView::selectedAll
        
            typedef bool ( ::SireMol::MoleculeView::*selectedAll_function_type )(  ) const;
            selectedAll_function_type selectedAll_function_value( &::SireMol::MoleculeView::selectedAll );
            
            MoleculeView_exposer.def( 
                "selectedAll"
                , selectedAll_function_value );
        
        }
        { //::SireMol::MoleculeView::selection
        
            typedef ::SireMol::AtomSelection ( ::SireMol::MoleculeView::*selection_function_type )(  ) const;
            selection_function_type selection_function_value( &::SireMol::MoleculeView::selection );
            
            MoleculeView_exposer.def( 
                "selection"
                , selection_function_value );
        
        }
        { //::SireMol::MoleculeView::toString
        
            typedef ::QString ( ::SireMol::MoleculeView::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMol::MoleculeView::toString );
            
            MoleculeView_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMol::MoleculeView::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::MoleculeView::typeName );
            
            MoleculeView_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::MoleculeView::update
        
            typedef void ( ::SireMol::MoleculeView::*update_function_type )( ::SireMol::MoleculeData const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeView::update );
            
            MoleculeView_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata") ) );
        
        }
        MoleculeView_exposer.staticmethod( "typeName" );
        MoleculeView_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::MoleculeView >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeView_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::MoleculeView >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeView_exposer.def( "__str__", &__str__< ::SireMol::MoleculeView > );
        MoleculeView_exposer.def( "__repr__", &__str__< ::SireMol::MoleculeView > );
    }

}
