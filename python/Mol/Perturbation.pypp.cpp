// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Perturbation.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/identities.h"

#include "SireCAS/values.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "geometryperturbation.h"

#include "molecule.h"

#include "moleditor.h"

#include "mover.hpp"

#include "perturbation.h"

#include "perturbation.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Perturbation_class(){

    { //::SireMol::Perturbation
        typedef bp::class_< SireMol::Perturbation, bp::bases< SireBase::Property >, boost::noncopyable > Perturbation_exposer_t;
        Perturbation_exposer_t Perturbation_exposer = Perturbation_exposer_t( "Perturbation", bp::no_init );
        bp::scope Perturbation_scope( Perturbation_exposer );
        { //::SireMol::Perturbation::children
        
            typedef ::QList< SireBase::PropPtr< SireMol::Perturbation > > ( ::SireMol::Perturbation::*children_function_type )(  ) const;
            children_function_type children_function_value( &::SireMol::Perturbation::children );
            
            Perturbation_exposer.def( 
                "children"
                , children_function_value );
        
        }
        { //::SireMol::Perturbation::defaultFunction
        
            typedef ::SireCAS::Expression const & ( *defaultFunction_function_type )(  );
            defaultFunction_function_type defaultFunction_function_value( &::SireMol::Perturbation::defaultFunction );
            
            Perturbation_exposer.def( 
                "defaultFunction"
                , defaultFunction_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::Perturbation::mappingFunction
        
            typedef ::SireCAS::Expression const & ( ::SireMol::Perturbation::*mappingFunction_function_type )(  ) const;
            mappingFunction_function_type mappingFunction_function_value( &::SireMol::Perturbation::mappingFunction );
            
            Perturbation_exposer.def( 
                "mappingFunction"
                , mappingFunction_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::Perturbation::null
        
            typedef ::SireMol::NullPerturbation const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMol::Perturbation::null );
            
            Perturbation_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::Perturbation::perturb
        
            typedef ::SireMol::Molecule ( ::SireMol::Perturbation::*perturb_function_type )( ::SireMol::Molecule const &,::SireCAS::Values const & ) const;
            perturb_function_type perturb_function_value( &::SireMol::Perturbation::perturb );
            
            Perturbation_exposer.def( 
                "perturb"
                , perturb_function_value
                , ( bp::arg("molecule"), bp::arg("values") ) );
        
        }
        { //::SireMol::Perturbation::propertyMap
        
            typedef ::SireBase::PropertyMap const & ( ::SireMol::Perturbation::*propertyMap_function_type )(  ) const;
            propertyMap_function_type propertyMap_function_value( &::SireMol::Perturbation::propertyMap );
            
            Perturbation_exposer.def( 
                "propertyMap"
                , propertyMap_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::Perturbation::recreate
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::Perturbation::*recreate_function_type )(  ) const;
            recreate_function_type recreate_function_value( &::SireMol::Perturbation::recreate );
            
            Perturbation_exposer.def( 
                "recreate"
                , recreate_function_value );
        
        }
        { //::SireMol::Perturbation::recreate
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::Perturbation::*recreate_function_type )( ::SireCAS::Expression const & ) const;
            recreate_function_type recreate_function_value( &::SireMol::Perturbation::recreate );
            
            Perturbation_exposer.def( 
                "recreate"
                , recreate_function_value
                , ( bp::arg("mapping_function") ) );
        
        }
        { //::SireMol::Perturbation::recreate
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::Perturbation::*recreate_function_type )( ::SireBase::PropertyMap const & ) const;
            recreate_function_type recreate_function_value( &::SireMol::Perturbation::recreate );
            
            Perturbation_exposer.def( 
                "recreate"
                , recreate_function_value
                , ( bp::arg("map") ) );
        
        }
        { //::SireMol::Perturbation::recreate
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::Perturbation::*recreate_function_type )( ::SireCAS::Expression const &,::SireBase::PropertyMap const & ) const;
            recreate_function_type recreate_function_value( &::SireMol::Perturbation::recreate );
            
            Perturbation_exposer.def( 
                "recreate"
                , recreate_function_value
                , ( bp::arg("mapping_function"), bp::arg("map") ) );
        
        }
        { //::SireMol::Perturbation::requiredProperties
        
            typedef ::QSet< QString > ( ::SireMol::Perturbation::*requiredProperties_function_type )(  ) const;
            requiredProperties_function_type requiredProperties_function_value( &::SireMol::Perturbation::requiredProperties );
            
            Perturbation_exposer.def( 
                "requiredProperties"
                , requiredProperties_function_value );
        
        }
        { //::SireMol::Perturbation::requiredSymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireMol::Perturbation::*requiredSymbols_function_type )(  ) const;
            requiredSymbols_function_type requiredSymbols_function_value( &::SireMol::Perturbation::requiredSymbols );
            
            Perturbation_exposer.def( 
                "requiredSymbols"
                , requiredSymbols_function_value );
        
        }
        { //::SireMol::Perturbation::substitute
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::Perturbation::*substitute_function_type )( ::SireCAS::Symbol const &,::SireCAS::Symbol const & ) const;
            substitute_function_type substitute_function_value( &::SireMol::Perturbation::substitute );
            
            Perturbation_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("old_symbol"), bp::arg("new_symbol") ) );
        
        }
        { //::SireMol::Perturbation::substitute
        
            typedef ::SireMol::PerturbationPtr ( ::SireMol::Perturbation::*substitute_function_type )( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireMol::Perturbation::substitute );
            
            Perturbation_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") ) );
        
        }
        { //::SireMol::Perturbation::symbols
        
            typedef ::SireMol::PerturbationSymbols const & ( *symbols_function_type )(  );
            symbols_function_type symbols_function_value( &::SireMol::Perturbation::symbols );
            
            Perturbation_exposer.def( 
                "symbols"
                , symbols_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::Perturbation::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::Perturbation::typeName );
            
            Perturbation_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::Perturbation::wouldChange
        
            typedef bool ( ::SireMol::Perturbation::*wouldChange_function_type )( ::SireMol::Molecule const &,::SireCAS::Values const & ) const;
            wouldChange_function_type wouldChange_function_value( &::SireMol::Perturbation::wouldChange );
            
            Perturbation_exposer.def( 
                "wouldChange"
                , wouldChange_function_value
                , ( bp::arg("molecule"), bp::arg("values") ) );
        
        }
        Perturbation_exposer.staticmethod( "defaultFunction" );
        Perturbation_exposer.staticmethod( "null" );
        Perturbation_exposer.staticmethod( "symbols" );
        Perturbation_exposer.staticmethod( "typeName" );
        Perturbation_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::Perturbation >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Perturbation_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::Perturbation >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Perturbation_exposer.def( "__str__", &__str__< ::SireMol::Perturbation > );
        Perturbation_exposer.def( "__repr__", &__str__< ::SireMol::Perturbation > );
    }

}
