// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Element.pypp.hpp"

namespace bp = boost::python;

#include "element.h"

#include "element.h"

SireMol::Element __copy__(const SireMol::Element &other){ return SireMol::Element(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Element_class(){

    { //::SireMol::Element
        typedef bp::class_< SireMol::Element > Element_exposer_t;
        Element_exposer_t Element_exposer = Element_exposer_t( "Element", bp::init< >() );
        bp::scope Element_scope( Element_exposer );
        Element_exposer.def( bp::init< QString >(( bp::arg("element") )) );
        Element_exposer.def( bp::init< char const * >(( bp::arg("element") )) );
        Element_exposer.def( bp::init< unsigned int >(( bp::arg("nprotons") )) );
        Element_exposer.def( bp::init< int >(( bp::arg("nprotons") )) );
        Element_exposer.def( bp::init< SireMol::Element const & >(( bp::arg("element") )) );
        { //::SireMol::Element::actinide
        
            typedef bool ( ::SireMol::Element::*actinide_function_type )(  ) const;
            actinide_function_type actinide_function_value( &::SireMol::Element::actinide );
            
            Element_exposer.def( 
                "actinide"
                , actinide_function_value );
        
        }
        { //::SireMol::Element::alkaliEarthMetal
        
            typedef bool ( ::SireMol::Element::*alkaliEarthMetal_function_type )(  ) const;
            alkaliEarthMetal_function_type alkaliEarthMetal_function_value( &::SireMol::Element::alkaliEarthMetal );
            
            Element_exposer.def( 
                "alkaliEarthMetal"
                , alkaliEarthMetal_function_value );
        
        }
        { //::SireMol::Element::alkaliMetal
        
            typedef bool ( ::SireMol::Element::*alkaliMetal_function_type )(  ) const;
            alkaliMetal_function_type alkaliMetal_function_value( &::SireMol::Element::alkaliMetal );
            
            Element_exposer.def( 
                "alkaliMetal"
                , alkaliMetal_function_value );
        
        }
        { //::SireMol::Element::biological
        
            typedef bool ( ::SireMol::Element::*biological_function_type )(  ) const;
            biological_function_type biological_function_value( &::SireMol::Element::biological );
            
            Element_exposer.def( 
                "biological"
                , biological_function_value );
        
        }
        { //::SireMol::Element::biologicalElement
        
            typedef ::SireMol::Element ( *biologicalElement_function_type )( ::QString const & );
            biologicalElement_function_type biologicalElement_function_value( &::SireMol::Element::biologicalElement );
            
            Element_exposer.def( 
                "biologicalElement"
                , biologicalElement_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireMol::Element::blue
        
            typedef float ( ::SireMol::Element::*blue_function_type )(  ) const;
            blue_function_type blue_function_value( &::SireMol::Element::blue );
            
            Element_exposer.def( 
                "blue"
                , blue_function_value );
        
        }
        { //::SireMol::Element::bondOrderRadius
        
            typedef ::SireUnits::Dimension::Length ( ::SireMol::Element::*bondOrderRadius_function_type )(  ) const;
            bondOrderRadius_function_type bondOrderRadius_function_value( &::SireMol::Element::bondOrderRadius );
            
            Element_exposer.def( 
                "bondOrderRadius"
                , bondOrderRadius_function_value );
        
        }
        { //::SireMol::Element::covalentRadius
        
            typedef ::SireUnits::Dimension::Length ( ::SireMol::Element::*covalentRadius_function_type )(  ) const;
            covalentRadius_function_type covalentRadius_function_value( &::SireMol::Element::covalentRadius );
            
            Element_exposer.def( 
                "covalentRadius"
                , covalentRadius_function_value );
        
        }
        { //::SireMol::Element::elementWithMass
        
            typedef ::SireMol::Element ( *elementWithMass_function_type )( ::SireUnits::Dimension::MolarMass const & );
            elementWithMass_function_type elementWithMass_function_value( &::SireMol::Element::elementWithMass );
            
            Element_exposer.def( 
                "elementWithMass"
                , elementWithMass_function_value
                , ( bp::arg("mass") ) );
        
        }
        { //::SireMol::Element::green
        
            typedef float ( ::SireMol::Element::*green_function_type )(  ) const;
            green_function_type green_function_value( &::SireMol::Element::green );
            
            Element_exposer.def( 
                "green"
                , green_function_value );
        
        }
        { //::SireMol::Element::group
        
            typedef int ( ::SireMol::Element::*group_function_type )(  ) const;
            group_function_type group_function_value( &::SireMol::Element::group );
            
            Element_exposer.def( 
                "group"
                , group_function_value );
        
        }
        { //::SireMol::Element::halogen
        
            typedef bool ( ::SireMol::Element::*halogen_function_type )(  ) const;
            halogen_function_type halogen_function_value( &::SireMol::Element::halogen );
            
            Element_exposer.def( 
                "halogen"
                , halogen_function_value );
        
        }
        { //::SireMol::Element::lanthanide
        
            typedef bool ( ::SireMol::Element::*lanthanide_function_type )(  ) const;
            lanthanide_function_type lanthanide_function_value( &::SireMol::Element::lanthanide );
            
            Element_exposer.def( 
                "lanthanide"
                , lanthanide_function_value );
        
        }
        { //::SireMol::Element::mass
        
            typedef ::SireUnits::Dimension::MolarMass ( ::SireMol::Element::*mass_function_type )(  ) const;
            mass_function_type mass_function_value( &::SireMol::Element::mass );
            
            Element_exposer.def( 
                "mass"
                , mass_function_value );
        
        }
        { //::SireMol::Element::maxBonds
        
            typedef int ( ::SireMol::Element::*maxBonds_function_type )(  ) const;
            maxBonds_function_type maxBonds_function_value( &::SireMol::Element::maxBonds );
            
            Element_exposer.def( 
                "maxBonds"
                , maxBonds_function_value );
        
        }
        { //::SireMol::Element::nProtons
        
            typedef int ( ::SireMol::Element::*nProtons_function_type )(  ) const;
            nProtons_function_type nProtons_function_value( &::SireMol::Element::nProtons );
            
            Element_exposer.def( 
                "nProtons"
                , nProtons_function_value );
        
        }
        { //::SireMol::Element::name
        
            typedef ::QString ( ::SireMol::Element::*name_function_type )(  ) const;
            name_function_type name_function_value( &::SireMol::Element::name );
            
            Element_exposer.def( 
                "name"
                , name_function_value );
        
        }
        { //::SireMol::Element::nobleGas
        
            typedef bool ( ::SireMol::Element::*nobleGas_function_type )(  ) const;
            nobleGas_function_type nobleGas_function_value( &::SireMol::Element::nobleGas );
            
            Element_exposer.def( 
                "nobleGas"
                , nobleGas_function_value );
        
        }
        Element_exposer.def( bp::self != bp::self );
        Element_exposer.def( bp::self < bp::self );
        Element_exposer.def( bp::self <= bp::self );
        { //::SireMol::Element::operator=
        
            typedef ::SireMol::Element const & ( ::SireMol::Element::*assign_function_type )( ::SireMol::Element const & ) ;
            assign_function_type assign_function_value( &::SireMol::Element::operator= );
            
            Element_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("element") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        Element_exposer.def( bp::self == bp::self );
        Element_exposer.def( bp::self > bp::self );
        Element_exposer.def( bp::self >= bp::self );
        { //::SireMol::Element::period
        
            typedef int ( ::SireMol::Element::*period_function_type )(  ) const;
            period_function_type period_function_value( &::SireMol::Element::period );
            
            Element_exposer.def( 
                "period"
                , period_function_value );
        
        }
        { //::SireMol::Element::rareEarth
        
            typedef bool ( ::SireMol::Element::*rareEarth_function_type )(  ) const;
            rareEarth_function_type rareEarth_function_value( &::SireMol::Element::rareEarth );
            
            Element_exposer.def( 
                "rareEarth"
                , rareEarth_function_value );
        
        }
        { //::SireMol::Element::red
        
            typedef float ( ::SireMol::Element::*red_function_type )(  ) const;
            red_function_type red_function_value( &::SireMol::Element::red );
            
            Element_exposer.def( 
                "red"
                , red_function_value );
        
        }
        { //::SireMol::Element::symbol
        
            typedef ::QString ( ::SireMol::Element::*symbol_function_type )(  ) const;
            symbol_function_type symbol_function_value( &::SireMol::Element::symbol );
            
            Element_exposer.def( 
                "symbol"
                , symbol_function_value );
        
        }
        { //::SireMol::Element::toString
        
            typedef ::QString ( ::SireMol::Element::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMol::Element::toString );
            
            Element_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMol::Element::transitionMetal
        
            typedef bool ( ::SireMol::Element::*transitionMetal_function_type )(  ) const;
            transitionMetal_function_type transitionMetal_function_value( &::SireMol::Element::transitionMetal );
            
            Element_exposer.def( 
                "transitionMetal"
                , transitionMetal_function_value );
        
        }
        { //::SireMol::Element::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::Element::typeName );
            
            Element_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::Element::vdwRadius
        
            typedef ::SireUnits::Dimension::Length ( ::SireMol::Element::*vdwRadius_function_type )(  ) const;
            vdwRadius_function_type vdwRadius_function_value( &::SireMol::Element::vdwRadius );
            
            Element_exposer.def( 
                "vdwRadius"
                , vdwRadius_function_value );
        
        }
        { //::SireMol::Element::what
        
            typedef char const * ( ::SireMol::Element::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMol::Element::what );
            
            Element_exposer.def( 
                "what"
                , what_function_value );
        
        }
        Element_exposer.staticmethod( "biologicalElement" );
        Element_exposer.staticmethod( "elementWithMass" );
        Element_exposer.staticmethod( "typeName" );
        Element_exposer.def( "__copy__", &__copy__);
        Element_exposer.def( "__deepcopy__", &__copy__);
        Element_exposer.def( "clone", &__copy__);
        Element_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::Element >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Element_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::Element >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Element_exposer.def( "__str__", &__str__< ::SireMol::Element > );
        Element_exposer.def( "__repr__", &__str__< ::SireMol::Element > );
    }

}
