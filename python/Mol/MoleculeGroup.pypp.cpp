// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MoleculeGroup.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/incremint.h"

#include "SireBase/majorminorversion.h"

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "editor.hpp"

#include "mgname.h"

#include "mgnum.h"

#include "molecule.h"

#include "moleculegroup.h"

#include "molidentifier.h"

#include "molidx.h"

#include "molname.h"

#include "molnum.h"

#include "mover.hpp"

#include "partialmolecule.h"

#include "tostring.h"

#include <QDebug>

#include <QMutex>

#include <QVector>

#include <boost/tuple/tuple.hpp>

#include "moleculegroup.h"

SireMol::MoleculeGroup __copy__(const SireMol::MoleculeGroup &other){ return SireMol::MoleculeGroup(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_MoleculeGroup_class(){

    { //::SireMol::MoleculeGroup
        typedef bp::class_< SireMol::MoleculeGroup, bp::bases< SireBase::Property > > MoleculeGroup_exposer_t;
        MoleculeGroup_exposer_t MoleculeGroup_exposer = MoleculeGroup_exposer_t( "MoleculeGroup", bp::init< >() );
        bp::scope MoleculeGroup_scope( MoleculeGroup_exposer );
        MoleculeGroup_exposer.def( bp::init< SireMol::Molecules const & >(( bp::arg("molecules") )) );
        MoleculeGroup_exposer.def( bp::init< QString const & >(( bp::arg("name") )) );
        MoleculeGroup_exposer.def( bp::init< QString const &, SireMol::MoleculeView const & >(( bp::arg("name"), bp::arg("molview") )) );
        MoleculeGroup_exposer.def( bp::init< QString const &, SireMol::Molecules const & >(( bp::arg("name"), bp::arg("molecules") )) );
        MoleculeGroup_exposer.def( bp::init< QString const &, SireMol::MoleculeGroup const & >(( bp::arg("name"), bp::arg("other") )) );
        MoleculeGroup_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("other") )) );
        { //::SireMol::MoleculeGroup::add
        
            typedef void ( ::SireMol::MoleculeGroup::*add_function_type )( ::SireMol::MoleculeView const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroup::add );
            
            MoleculeGroup_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::add
        
            typedef void ( ::SireMol::MoleculeGroup::*add_function_type )( ::SireMol::ViewsOfMol const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroup::add );
            
            MoleculeGroup_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroup::add
        
            typedef void ( ::SireMol::MoleculeGroup::*add_function_type )( ::SireMol::Molecules const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroup::add );
            
            MoleculeGroup_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::add
        
            typedef void ( ::SireMol::MoleculeGroup::*add_function_type )( ::SireMol::MoleculeGroup const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroup::add );
            
            MoleculeGroup_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::addIfUnique
        
            typedef bool ( ::SireMol::MoleculeGroup::*addIfUnique_function_type )( ::SireMol::MoleculeView const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroup::addIfUnique );
            
            MoleculeGroup_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::addIfUnique
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MoleculeGroup::*addIfUnique_function_type )( ::SireMol::ViewsOfMol const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroup::addIfUnique );
            
            MoleculeGroup_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroup::addIfUnique
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*addIfUnique_function_type )( ::SireMol::Molecules const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroup::addIfUnique );
            
            MoleculeGroup_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::addIfUnique
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*addIfUnique_function_type )( ::SireMol::MoleculeGroup const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroup::addIfUnique );
            
            MoleculeGroup_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::assertContains
        
            typedef void ( ::SireMol::MoleculeGroup::*assertContains_function_type )( ::SireMol::MolNum ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeGroup::assertContains );
            
            MoleculeGroup_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::assertContains
        
            typedef void ( ::SireMol::MoleculeGroup::*assertContains_function_type )( ::SireMol::MolName const & ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MoleculeGroup::assertContains );
            
            MoleculeGroup_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("molname") ) );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*at_function_type )( ::SireMol::MolNum ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*at_function_type )( ::SireMol::MolIdx ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*at_function_type )( ::SireMol::MolName const & ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*at_function_type )( ::SireMol::MolID const & ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::PartialMolecule ( ::SireMol::MoleculeGroup::*at_function_type )( ::boost::tuples::tuple< SireMol::MolNum, SireID::Index, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > const & ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("viewidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::PartialMolecule ( ::SireMol::MoleculeGroup::*at_function_type )( ::boost::tuples::tuple< SireMol::MolIdentifier, SireID::Index, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > const & ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("viewidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::PartialMolecule ( ::SireMol::MoleculeGroup::*at_function_type )( ::SireMol::MolNum,int ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molnum"), bp::arg("viewidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::at
        
            typedef ::SireMol::PartialMolecule ( ::SireMol::MoleculeGroup::*at_function_type )( ::SireMol::MolID const &,int ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroup::at );
            
            MoleculeGroup_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molid"), bp::arg("viewidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::back
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*back_function_type )(  ) const;
            back_function_type back_function_value( &::SireMol::MoleculeGroup::back );
            
            MoleculeGroup_exposer.def( 
                "back"
                , back_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::begin
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*begin_function_type )(  ) const;
            begin_function_type begin_function_value( &::SireMol::MoleculeGroup::begin );
            
            MoleculeGroup_exposer.def( 
                "begin"
                , begin_function_value );
        
        }
        { //::SireMol::MoleculeGroup::constBegin
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*constBegin_function_type )(  ) const;
            constBegin_function_type constBegin_function_value( &::SireMol::MoleculeGroup::constBegin );
            
            MoleculeGroup_exposer.def( 
                "constBegin"
                , constBegin_function_value );
        
        }
        { //::SireMol::MoleculeGroup::constEnd
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*constEnd_function_type )(  ) const;
            constEnd_function_type constEnd_function_value( &::SireMol::MoleculeGroup::constEnd );
            
            MoleculeGroup_exposer.def( 
                "constEnd"
                , constEnd_function_value );
        
        }
        { //::SireMol::MoleculeGroup::constFind
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*constFind_function_type )( ::SireMol::MolNum ) const;
            constFind_function_type constFind_function_value( &::SireMol::MoleculeGroup::constFind );
            
            MoleculeGroup_exposer.def( 
                "constFind"
                , constFind_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::constFind
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*constFind_function_type )( ::SireMol::MolID const & ) const;
            constFind_function_type constFind_function_value( &::SireMol::MoleculeGroup::constFind );
            
            MoleculeGroup_exposer.def( 
                "constFind"
                , constFind_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::MolNum ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::MolIdx ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::MolName const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molname") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::MolID const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::MoleculeView const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::ViewsOfMol const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::Molecules const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::contains
        
            typedef bool ( ::SireMol::MoleculeGroup::*contains_function_type )( ::SireMol::MoleculeGroup const & ) const;
            contains_function_type contains_function_value( &::SireMol::MoleculeGroup::contains );
            
            MoleculeGroup_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::end
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*end_function_type )(  ) const;
            end_function_type end_function_value( &::SireMol::MoleculeGroup::end );
            
            MoleculeGroup_exposer.def( 
                "end"
                , end_function_value );
        
        }
        { //::SireMol::MoleculeGroup::find
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*find_function_type )( ::SireMol::MolNum ) const;
            find_function_type find_function_value( &::SireMol::MoleculeGroup::find );
            
            MoleculeGroup_exposer.def( 
                "find"
                , find_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::find
        
            typedef ::SireBase::ChunkedHash< SireMol::MolNum, SireMol::ViewsOfMol, 100 >::const_iterator ( ::SireMol::MoleculeGroup::*find_function_type )( ::SireMol::MolID const & ) const;
            find_function_type find_function_value( &::SireMol::MoleculeGroup::find );
            
            MoleculeGroup_exposer.def( 
                "find"
                , find_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::first
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*first_function_type )(  ) const;
            first_function_type first_function_value( &::SireMol::MoleculeGroup::first );
            
            MoleculeGroup_exposer.def( 
                "first"
                , first_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::front
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*front_function_type )(  ) const;
            front_function_type front_function_value( &::SireMol::MoleculeGroup::front );
            
            MoleculeGroup_exposer.def( 
                "front"
                , front_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MoleculeGroup::*getMoleculeNumber_function_type )( ::SireMol::MolNum ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MoleculeGroup::getMoleculeNumber );
            
            MoleculeGroup_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MoleculeGroup::*getMoleculeNumber_function_type )( ::SireMol::MolIdx ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MoleculeGroup::getMoleculeNumber );
            
            MoleculeGroup_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MoleculeGroup::*getMoleculeNumber_function_type )( ::SireMol::MolName const & ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MoleculeGroup::getMoleculeNumber );
            
            MoleculeGroup_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molname") ) );
        
        }
        { //::SireMol::MoleculeGroup::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MoleculeGroup::*getMoleculeNumber_function_type )( ::SireMol::MolID const & ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MoleculeGroup::getMoleculeNumber );
            
            MoleculeGroup_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::getMoleculeVersion
        
            typedef ::quint64 ( ::SireMol::MoleculeGroup::*getMoleculeVersion_function_type )( ::SireMol::MolNum ) const;
            getMoleculeVersion_function_type getMoleculeVersion_function_value( &::SireMol::MoleculeGroup::getMoleculeVersion );
            
            MoleculeGroup_exposer.def( 
                "getMoleculeVersion"
                , getMoleculeVersion_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::getMoleculeVersion
        
            typedef ::quint64 ( ::SireMol::MoleculeGroup::*getMoleculeVersion_function_type )( ::SireMol::MolID const & ) const;
            getMoleculeVersion_function_type getMoleculeVersion_function_value( &::SireMol::MoleculeGroup::getMoleculeVersion );
            
            MoleculeGroup_exposer.def( 
                "getMoleculeVersion"
                , getMoleculeVersion_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::indexOf
        
            typedef int ( ::SireMol::MoleculeGroup::*indexOf_function_type )( ::SireMol::MoleculeView const & ) const;
            indexOf_function_type indexOf_function_value( &::SireMol::MoleculeGroup::indexOf );
            
            MoleculeGroup_exposer.def( 
                "indexOf"
                , indexOf_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::indexOf
        
            typedef int ( ::SireMol::MoleculeGroup::*indexOf_function_type )( ::SireMol::MolNum ) const;
            indexOf_function_type indexOf_function_value( &::SireMol::MoleculeGroup::indexOf );
            
            MoleculeGroup_exposer.def( 
                "indexOf"
                , indexOf_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::intersects
        
            typedef bool ( ::SireMol::MoleculeGroup::*intersects_function_type )( ::SireMol::MoleculeView const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeGroup::intersects );
            
            MoleculeGroup_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::intersects
        
            typedef bool ( ::SireMol::MoleculeGroup::*intersects_function_type )( ::SireMol::Molecules const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeGroup::intersects );
            
            MoleculeGroup_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMol::MoleculeGroup::intersects
        
            typedef bool ( ::SireMol::MoleculeGroup::*intersects_function_type )( ::SireMol::MoleculeGroup const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MoleculeGroup::intersects );
            
            MoleculeGroup_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::isEmpty
        
            typedef bool ( ::SireMol::MoleculeGroup::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::MoleculeGroup::isEmpty );
            
            MoleculeGroup_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireMol::MoleculeGroup::last
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*last_function_type )(  ) const;
            last_function_type last_function_value( &::SireMol::MoleculeGroup::last );
            
            MoleculeGroup_exposer.def( 
                "last"
                , last_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::majorVersion
        
            typedef ::quint64 ( ::SireMol::MoleculeGroup::*majorVersion_function_type )(  ) const;
            majorVersion_function_type majorVersion_function_value( &::SireMol::MoleculeGroup::majorVersion );
            
            MoleculeGroup_exposer.def( 
                "majorVersion"
                , majorVersion_function_value );
        
        }
        { //::SireMol::MoleculeGroup::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MoleculeGroup::*map_function_type )( ::SireMol::MolNum ) const;
            map_function_type map_function_value( &::SireMol::MoleculeGroup::map );
            
            MoleculeGroup_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MoleculeGroup::*map_function_type )( ::SireMol::MolIdx ) const;
            map_function_type map_function_value( &::SireMol::MoleculeGroup::map );
            
            MoleculeGroup_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MoleculeGroup::*map_function_type )( ::SireMol::MolName const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeGroup::map );
            
            MoleculeGroup_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molname") ) );
        
        }
        { //::SireMol::MoleculeGroup::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MoleculeGroup::*map_function_type )( ::SireMol::MolID const & ) const;
            map_function_type map_function_value( &::SireMol::MoleculeGroup::map );
            
            MoleculeGroup_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::minorVersion
        
            typedef ::quint64 ( ::SireMol::MoleculeGroup::*minorVersion_function_type )(  ) const;
            minorVersion_function_type minorVersion_function_value( &::SireMol::MoleculeGroup::minorVersion );
            
            MoleculeGroup_exposer.def( 
                "minorVersion"
                , minorVersion_function_value );
        
        }
        { //::SireMol::MoleculeGroup::molNames
        
            typedef ::QSet< SireMol::MolName > ( ::SireMol::MoleculeGroup::*molNames_function_type )(  ) const;
            molNames_function_type molNames_function_value( &::SireMol::MoleculeGroup::molNames );
            
            MoleculeGroup_exposer.def( 
                "molNames"
                , molNames_function_value );
        
        }
        { //::SireMol::MoleculeGroup::molNumAt
        
            typedef ::SireMol::MolNum ( ::SireMol::MoleculeGroup::*molNumAt_function_type )( int ) const;
            molNumAt_function_type molNumAt_function_value( &::SireMol::MoleculeGroup::molNumAt );
            
            MoleculeGroup_exposer.def( 
                "molNumAt"
                , molNumAt_function_value
                , ( bp::arg("idx") ) );
        
        }
        { //::SireMol::MoleculeGroup::molNums
        
            typedef ::QVector< SireMol::MolNum > const & ( ::SireMol::MoleculeGroup::*molNums_function_type )(  ) const;
            molNums_function_type molNums_function_value( &::SireMol::MoleculeGroup::molNums );
            
            MoleculeGroup_exposer.def( 
                "molNums"
                , molNums_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::MoleculeGroup::molViewIndexAt
        
            typedef ::boost::tuples::tuple< SireMol::MolNum, SireID::Index, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > const & ( ::SireMol::MoleculeGroup::*molViewIndexAt_function_type )( int ) const;
            molViewIndexAt_function_type molViewIndexAt_function_value( &::SireMol::MoleculeGroup::molViewIndexAt );
            
            MoleculeGroup_exposer.def( 
                "molViewIndexAt"
                , molViewIndexAt_function_value
                , ( bp::arg("idx") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::MoleculeGroup::molViewIndicies
        
            typedef ::QVector< boost::tuples::tuple< SireMol::MolNum, SireID::Index, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > > const & ( ::SireMol::MoleculeGroup::*molViewIndicies_function_type )(  ) const;
            molViewIndicies_function_type molViewIndicies_function_value( &::SireMol::MoleculeGroup::molViewIndicies );
            
            MoleculeGroup_exposer.def( 
                "molViewIndicies"
                , molViewIndicies_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::MoleculeGroup::molecule
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*molecule_function_type )( ::SireMol::MolNum ) const;
            molecule_function_type molecule_function_value( &::SireMol::MoleculeGroup::molecule );
            
            MoleculeGroup_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::molecule
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*molecule_function_type )( ::SireMol::MolIdx ) const;
            molecule_function_type molecule_function_value( &::SireMol::MoleculeGroup::molecule );
            
            MoleculeGroup_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::molecule
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*molecule_function_type )( ::SireMol::MolName const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::MoleculeGroup::molecule );
            
            MoleculeGroup_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::molecule
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*molecule_function_type )( ::SireMol::MolID const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::MoleculeGroup::molecule );
            
            MoleculeGroup_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::moleculeAt
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*moleculeAt_function_type )( int ) const;
            moleculeAt_function_type moleculeAt_function_value( &::SireMol::MoleculeGroup::moleculeAt );
            
            MoleculeGroup_exposer.def( 
                "moleculeAt"
                , moleculeAt_function_value
                , ( bp::arg("idx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::molecules
        
            typedef ::SireMol::Molecules ( ::SireMol::MoleculeGroup::*molecules_function_type )( ::SireMol::MolID const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::MoleculeGroup::molecules );
            
            MoleculeGroup_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::molecules
        
            typedef ::SireMol::Molecules const & ( ::SireMol::MoleculeGroup::*molecules_function_type )(  ) const;
            molecules_function_type molecules_function_value( &::SireMol::MoleculeGroup::molecules );
            
            MoleculeGroup_exposer.def( 
                "molecules"
                , molecules_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::nMolecules
        
            typedef int ( ::SireMol::MoleculeGroup::*nMolecules_function_type )(  ) const;
            nMolecules_function_type nMolecules_function_value( &::SireMol::MoleculeGroup::nMolecules );
            
            MoleculeGroup_exposer.def( 
                "nMolecules"
                , nMolecules_function_value );
        
        }
        { //::SireMol::MoleculeGroup::nViews
        
            typedef int ( ::SireMol::MoleculeGroup::*nViews_function_type )(  ) const;
            nViews_function_type nViews_function_value( &::SireMol::MoleculeGroup::nViews );
            
            MoleculeGroup_exposer.def( 
                "nViews"
                , nViews_function_value );
        
        }
        { //::SireMol::MoleculeGroup::nViews
        
            typedef int ( ::SireMol::MoleculeGroup::*nViews_function_type )( ::SireMol::MolNum ) const;
            nViews_function_type nViews_function_value( &::SireMol::MoleculeGroup::nViews );
            
            MoleculeGroup_exposer.def( 
                "nViews"
                , nViews_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::nViews
        
            typedef int ( ::SireMol::MoleculeGroup::*nViews_function_type )( ::SireMol::MolID const & ) const;
            nViews_function_type nViews_function_value( &::SireMol::MoleculeGroup::nViews );
            
            MoleculeGroup_exposer.def( 
                "nViews"
                , nViews_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroup::nViews
        
            typedef int ( ::SireMol::MoleculeGroup::*nViews_function_type )( ::SireID::Index ) const;
            nViews_function_type nViews_function_value( &::SireMol::MoleculeGroup::nViews );
            
            MoleculeGroup_exposer.def( 
                "nViews"
                , nViews_function_value
                , ( bp::arg("idx") ) );
        
        }
        { //::SireMol::MoleculeGroup::name
        
            typedef ::SireMol::MGName const & ( ::SireMol::MoleculeGroup::*name_function_type )(  ) const;
            name_function_type name_function_value( &::SireMol::MoleculeGroup::name );
            
            MoleculeGroup_exposer.def( 
                "name"
                , name_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::null
        
            typedef ::SireMol::MoleculeGroup const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMol::MoleculeGroup::null );
            
            MoleculeGroup_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::number
        
            typedef ::SireMol::MGNum ( ::SireMol::MoleculeGroup::*number_function_type )(  ) const;
            number_function_type number_function_value( &::SireMol::MoleculeGroup::number );
            
            MoleculeGroup_exposer.def( 
                "number"
                , number_function_value );
        
        }
        MoleculeGroup_exposer.def( bp::self != bp::self );
        { //::SireMol::MoleculeGroup::operator=
        
            typedef ::SireMol::MoleculeGroup & ( ::SireMol::MoleculeGroup::*assign_function_type )( ::SireMol::MoleculeGroup const & ) ;
            assign_function_type assign_function_value( &::SireMol::MoleculeGroup::operator= );
            
            MoleculeGroup_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        MoleculeGroup_exposer.def( bp::self == bp::self );
        { //::SireMol::MoleculeGroup::operator[]
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*__getitem___function_type )( ::SireMol::MolNum ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MoleculeGroup::operator[] );
            
            MoleculeGroup_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::operator[]
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*__getitem___function_type )( ::SireMol::MolIdx ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MoleculeGroup::operator[] );
            
            MoleculeGroup_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::operator[]
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*__getitem___function_type )( ::SireMol::MolName const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MoleculeGroup::operator[] );
            
            MoleculeGroup_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::operator[]
        
            typedef ::SireMol::ViewsOfMol const & ( ::SireMol::MoleculeGroup::*__getitem___function_type )( ::SireMol::MolID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MoleculeGroup::operator[] );
            
            MoleculeGroup_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MoleculeGroup::operator[]
        
            typedef ::SireMol::PartialMolecule ( ::SireMol::MoleculeGroup::*__getitem___function_type )( ::boost::tuples::tuple< SireMol::MolNum, SireID::Index, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MoleculeGroup::operator[] );
            
            MoleculeGroup_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("viewidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::operator[]
        
            typedef ::SireMol::PartialMolecule ( ::SireMol::MoleculeGroup::*__getitem___function_type )( ::boost::tuples::tuple< SireMol::MolIdentifier, SireID::Index, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MoleculeGroup::operator[] );
            
            MoleculeGroup_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("viewidx") ) );
        
        }
        { //::SireMol::MoleculeGroup::remove
        
            typedef bool ( ::SireMol::MoleculeGroup::*remove_function_type )( ::SireMol::MoleculeView const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroup::remove );
            
            MoleculeGroup_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::remove
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MoleculeGroup::*remove_function_type )( ::SireMol::ViewsOfMol const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroup::remove );
            
            MoleculeGroup_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroup::remove
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*remove_function_type )( ::SireMol::Molecules const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroup::remove );
            
            MoleculeGroup_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::remove
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*remove_function_type )( ::SireMol::MoleculeGroup const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroup::remove );
            
            MoleculeGroup_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::remove
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MoleculeGroup::*remove_function_type )( ::SireMol::MolNum ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroup::remove );
            
            MoleculeGroup_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MoleculeGroup::remove
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*remove_function_type )( ::QSet< SireMol::MolNum > const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroup::remove );
            
            MoleculeGroup_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums") ) );
        
        }
        { //::SireMol::MoleculeGroup::removeAll
        
            typedef bool ( ::SireMol::MoleculeGroup::*removeAll_function_type )( ::SireMol::MoleculeView const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroup::removeAll );
            
            MoleculeGroup_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::removeAll
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MoleculeGroup::*removeAll_function_type )( ::SireMol::ViewsOfMol const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroup::removeAll );
            
            MoleculeGroup_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroup::removeAll
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*removeAll_function_type )( ::SireMol::Molecules const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroup::removeAll );
            
            MoleculeGroup_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::removeAll
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*removeAll_function_type )( ::SireMol::MoleculeGroup const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroup::removeAll );
            
            MoleculeGroup_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::removeAll
        
            typedef void ( ::SireMol::MoleculeGroup::*removeAll_function_type )(  ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroup::removeAll );
            
            MoleculeGroup_exposer.def( 
                "removeAll"
                , removeAll_function_value );
        
        }
        { //::SireMol::MoleculeGroup::setContents
        
            typedef bool ( ::SireMol::MoleculeGroup::*setContents_function_type )( ::SireMol::MoleculeView const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroup::setContents );
            
            MoleculeGroup_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::setContents
        
            typedef bool ( ::SireMol::MoleculeGroup::*setContents_function_type )( ::SireMol::ViewsOfMol const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroup::setContents );
            
            MoleculeGroup_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroup::setContents
        
            typedef bool ( ::SireMol::MoleculeGroup::*setContents_function_type )( ::SireMol::Molecules const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroup::setContents );
            
            MoleculeGroup_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::setContents
        
            typedef bool ( ::SireMol::MoleculeGroup::*setContents_function_type )( ::SireMol::MoleculeGroup const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroup::setContents );
            
            MoleculeGroup_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::setName
        
            typedef void ( ::SireMol::MoleculeGroup::*setName_function_type )( ::QString const & ) ;
            setName_function_type setName_function_value( &::SireMol::MoleculeGroup::setName );
            
            MoleculeGroup_exposer.def( 
                "setName"
                , setName_function_value
                , ( bp::arg("new_name") ) );
        
        }
        { //::SireMol::MoleculeGroup::setNewNumber
        
            typedef void ( ::SireMol::MoleculeGroup::*setNewNumber_function_type )(  ) ;
            setNewNumber_function_type setNewNumber_function_value( &::SireMol::MoleculeGroup::setNewNumber );
            
            MoleculeGroup_exposer.def( 
                "setNewNumber"
                , setNewNumber_function_value );
        
        }
        { //::SireMol::MoleculeGroup::setNumber
        
            typedef void ( ::SireMol::MoleculeGroup::*setNumber_function_type )( ::quint32 ) ;
            setNumber_function_type setNumber_function_value( &::SireMol::MoleculeGroup::setNumber );
            
            MoleculeGroup_exposer.def( 
                "setNumber"
                , setNumber_function_value
                , ( bp::arg("new_number") ) );
        
        }
        { //::SireMol::MoleculeGroup::toString
        
            typedef ::QString ( ::SireMol::MoleculeGroup::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMol::MoleculeGroup::toString );
            
            MoleculeGroup_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMol::MoleculeGroup::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::MoleculeGroup::typeName );
            
            MoleculeGroup_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::MoleculeGroup::unite
        
            typedef bool ( ::SireMol::MoleculeGroup::*unite_function_type )( ::SireMol::MoleculeView const & ) ;
            unite_function_type unite_function_value( &::SireMol::MoleculeGroup::unite );
            
            MoleculeGroup_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::unite
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MoleculeGroup::*unite_function_type )( ::SireMol::ViewsOfMol const & ) ;
            unite_function_type unite_function_value( &::SireMol::MoleculeGroup::unite );
            
            MoleculeGroup_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroup::unite
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*unite_function_type )( ::SireMol::Molecules const & ) ;
            unite_function_type unite_function_value( &::SireMol::MoleculeGroup::unite );
            
            MoleculeGroup_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::unite
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MoleculeGroup::*unite_function_type )( ::SireMol::MoleculeGroup const & ) ;
            unite_function_type unite_function_value( &::SireMol::MoleculeGroup::unite );
            
            MoleculeGroup_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::update
        
            typedef bool ( ::SireMol::MoleculeGroup::*update_function_type )( ::SireMol::MoleculeData const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeGroup::update );
            
            MoleculeGroup_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata") ) );
        
        }
        { //::SireMol::MoleculeGroup::update
        
            typedef bool ( ::SireMol::MoleculeGroup::*update_function_type )( ::SireMol::MoleculeView const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeGroup::update );
            
            MoleculeGroup_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroup::update
        
            typedef ::QList< SireMol::Molecule > ( ::SireMol::MoleculeGroup::*update_function_type )( ::SireMol::Molecules const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeGroup::update );
            
            MoleculeGroup_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroup::update
        
            typedef ::QList< SireMol::Molecule > ( ::SireMol::MoleculeGroup::*update_function_type )( ::SireMol::MoleculeGroup const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeGroup::update );
            
            MoleculeGroup_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("MoleculeGroup") ) );
        
        }
        { //::SireMol::MoleculeGroup::version
        
            typedef ::SireBase::Version const & ( ::SireMol::MoleculeGroup::*version_function_type )(  ) const;
            version_function_type version_function_value( &::SireMol::MoleculeGroup::version );
            
            MoleculeGroup_exposer.def( 
                "version"
                , version_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::MoleculeGroup::viewAt
        
            typedef ::SireMol::PartialMolecule ( ::SireMol::MoleculeGroup::*viewAt_function_type )( int ) const;
            viewAt_function_type viewAt_function_value( &::SireMol::MoleculeGroup::viewAt );
            
            MoleculeGroup_exposer.def( 
                "viewAt"
                , viewAt_function_value
                , ( bp::arg("idx") ) );
        
        }
        { //::SireMol::MoleculeGroup::what
        
            typedef char const * ( ::SireMol::MoleculeGroup::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMol::MoleculeGroup::what );
            
            MoleculeGroup_exposer.def( 
                "what"
                , what_function_value );
        
        }
        MoleculeGroup_exposer.staticmethod( "null" );
        MoleculeGroup_exposer.staticmethod( "typeName" );
        MoleculeGroup_exposer.def( "__copy__", &__copy__);
        MoleculeGroup_exposer.def( "__deepcopy__", &__copy__);
        MoleculeGroup_exposer.def( "clone", &__copy__);
        MoleculeGroup_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::MoleculeGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeGroup_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::MoleculeGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeGroup_exposer.def( "__str__", &__str__< ::SireMol::MoleculeGroup > );
        MoleculeGroup_exposer.def( "__repr__", &__str__< ::SireMol::MoleculeGroup > );
    }

}
