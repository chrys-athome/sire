// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "BondPerturbation.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/identities.h"

#include "SireCAS/values.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "geometryperturbation.h"

#include "molecule.h"

#include "moleditor.h"

#include "mover.hpp"

#include "geometryperturbation.h"

SireMol::BondPerturbation __copy__(const SireMol::BondPerturbation &other){ return SireMol::BondPerturbation(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_BondPerturbation_class(){

    { //::SireMol::BondPerturbation
        typedef bp::class_< SireMol::BondPerturbation, bp::bases< SireMol::GeometryPerturbation, SireMol::Perturbation, SireBase::Property > > BondPerturbation_exposer_t;
        BondPerturbation_exposer_t BondPerturbation_exposer = BondPerturbation_exposer_t( "BondPerturbation", bp::init< >() );
        bp::scope BondPerturbation_scope( BondPerturbation_exposer );
        BondPerturbation_exposer.def( bp::init< SireMol::BondID const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("bond"), bp::arg("start"), bp::arg("end"), bp::arg("map")=SireBase::PropertyMap() )) );
        BondPerturbation_exposer.def( bp::init< SireMol::BondID const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, SireCAS::Expression const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("bond"), bp::arg("start"), bp::arg("end"), bp::arg("mapping_function"), bp::arg("map")=SireBase::PropertyMap() )) );
        BondPerturbation_exposer.def( bp::init< SireMol::AtomID const &, SireMol::AtomID const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("start"), bp::arg("end"), bp::arg("map")=SireBase::PropertyMap() )) );
        BondPerturbation_exposer.def( bp::init< SireMol::AtomID const &, SireMol::AtomID const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, SireCAS::Expression const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("start"), bp::arg("end"), bp::arg("mapping_function"), bp::arg("map")=SireBase::PropertyMap() )) );
        BondPerturbation_exposer.def( bp::init< SireMol::BondPerturbation const & >(( bp::arg("other") )) );
        { //::SireMol::BondPerturbation::bond
        
            typedef ::SireMol::BondID const & ( ::SireMol::BondPerturbation::*bond_function_type )(  ) const;
            bond_function_type bond_function_value( &::SireMol::BondPerturbation::bond );
            
            BondPerturbation_exposer.def( 
                "bond"
                , bond_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::BondPerturbation::end
        
            typedef ::SireUnits::Dimension::Length const & ( ::SireMol::BondPerturbation::*end_function_type )(  ) const;
            end_function_type end_function_value( &::SireMol::BondPerturbation::end );
            
            BondPerturbation_exposer.def( 
                "end"
                , end_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        BondPerturbation_exposer.def( bp::self != bp::self );
        { //::SireMol::BondPerturbation::operator=
        
            typedef ::SireMol::BondPerturbation & ( ::SireMol::BondPerturbation::*assign_function_type )( ::SireMol::BondPerturbation const & ) ;
            assign_function_type assign_function_value( &::SireMol::BondPerturbation::operator= );
            
            BondPerturbation_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        BondPerturbation_exposer.def( bp::self == bp::self );
        { //::SireMol::BondPerturbation::start
        
            typedef ::SireUnits::Dimension::Length const & ( ::SireMol::BondPerturbation::*start_function_type )(  ) const;
            start_function_type start_function_value( &::SireMol::BondPerturbation::start );
            
            BondPerturbation_exposer.def( 
                "start"
                , start_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::BondPerturbation::toString
        
            typedef ::QString ( ::SireMol::BondPerturbation::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMol::BondPerturbation::toString );
            
            BondPerturbation_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMol::BondPerturbation::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::BondPerturbation::typeName );
            
            BondPerturbation_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::BondPerturbation::wouldChange
        
            typedef bool ( ::SireMol::BondPerturbation::*wouldChange_function_type )( ::SireMol::Molecule const &,::SireCAS::Values const & ) const;
            wouldChange_function_type wouldChange_function_value( &::SireMol::BondPerturbation::wouldChange );
            
            BondPerturbation_exposer.def( 
                "wouldChange"
                , wouldChange_function_value
                , ( bp::arg("molecule"), bp::arg("values") ) );
        
        }
        BondPerturbation_exposer.staticmethod( "typeName" );
        BondPerturbation_exposer.def( "__copy__", &__copy__);
        BondPerturbation_exposer.def( "__deepcopy__", &__copy__);
        BondPerturbation_exposer.def( "clone", &__copy__);
        BondPerturbation_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::BondPerturbation >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        BondPerturbation_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::BondPerturbation >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        BondPerturbation_exposer.def( "__str__", &__str__< ::SireMol::BondPerturbation > );
        BondPerturbation_exposer.def( "__repr__", &__str__< ::SireMol::BondPerturbation > );
    }

}
