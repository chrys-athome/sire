// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MoleculeGroups.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomid.h"

#include "cgid.h"

#include "chain.h"

#include "chainid.h"

#include "cutgroup.h"

#include "editor.hpp"

#include "mgidx.h"

#include "mgname.h"

#include "mgnum.h"

#include "molecule.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molidx.h"

#include "molname.h"

#include "molnum.h"

#include "mover.hpp"

#include "partialmolecule.h"

#include "resid.h"

#include "residue.h"

#include "segid.h"

#include "segment.h"

#include "selector.hpp"

#include "tostring.h"

#include "viewsofmol.h"

#include <QDebug>

#include <QMutex>

#include "moleculegroups.h"

SireMol::MoleculeGroups __copy__(const SireMol::MoleculeGroups &other){ return SireMol::MoleculeGroups(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_MoleculeGroups_class(){

    { //::SireMol::MoleculeGroups
        typedef bp::class_< SireMol::MoleculeGroups, bp::bases< SireMol::MolGroupsBase, SireBase::Property > > MoleculeGroups_exposer_t;
        MoleculeGroups_exposer_t MoleculeGroups_exposer = MoleculeGroups_exposer_t( "MoleculeGroups", bp::init< >() );
        bp::scope MoleculeGroups_scope( MoleculeGroups_exposer );
        MoleculeGroups_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("molgroup") )) );
        MoleculeGroups_exposer.def( bp::init< QList< SireBase::PropPtr< SireMol::MoleculeGroup > > const & >(( bp::arg("molgroups") )) );
        MoleculeGroups_exposer.def( bp::init< SireMol::MoleculeGroups const & >(( bp::arg("other") )) );
        { //::SireMol::MoleculeGroups::add
        
            typedef void ( ::SireMol::MoleculeGroups::*add_function_type )( ::SireMol::MoleculeGroup const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroups::add );
            
            MoleculeGroups_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMol::MoleculeGroups::add
        
            typedef void ( ::SireMol::MoleculeGroups::*add_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroups::add );
            
            MoleculeGroups_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::add
        
            typedef void ( ::SireMol::MoleculeGroups::*add_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroups::add );
            
            MoleculeGroups_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::add
        
            typedef void ( ::SireMol::MoleculeGroups::*add_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroups::add );
            
            MoleculeGroups_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::add
        
            typedef void ( ::SireMol::MoleculeGroups::*add_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MoleculeGroups::add );
            
            MoleculeGroups_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::addIfUnique
        
            typedef void ( ::SireMol::MoleculeGroups::*addIfUnique_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroups::addIfUnique );
            
            MoleculeGroups_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::addIfUnique
        
            typedef void ( ::SireMol::MoleculeGroups::*addIfUnique_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroups::addIfUnique );
            
            MoleculeGroups_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::addIfUnique
        
            typedef void ( ::SireMol::MoleculeGroups::*addIfUnique_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroups::addIfUnique );
            
            MoleculeGroups_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::addIfUnique
        
            typedef void ( ::SireMol::MoleculeGroups::*addIfUnique_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MoleculeGroups::addIfUnique );
            
            MoleculeGroups_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MoleculeGroups::*at_function_type )( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireMol::MoleculeGroups::at );
            
            MoleculeGroups_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        MoleculeGroups_exposer.def( bp::self != bp::self );
        { //::SireMol::MoleculeGroups::operator=
        
            typedef ::SireMol::MoleculeGroups & ( ::SireMol::MoleculeGroups::*assign_function_type )( ::SireMol::MoleculeGroups const & ) ;
            assign_function_type assign_function_value( &::SireMol::MoleculeGroups::operator= );
            
            MoleculeGroups_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        MoleculeGroups_exposer.def( bp::self == bp::self );
        { //::SireMol::MoleculeGroups::remove
        
            typedef void ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::MGNum ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef void ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::MoleculeGroup const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::MolID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::SireMol::MolNum,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::remove
        
            typedef bool ( ::SireMol::MoleculeGroups::*remove_function_type )( ::QSet< SireMol::MolNum > const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MoleculeGroups::remove );
            
            MoleculeGroups_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::removeAll
        
            typedef bool ( ::SireMol::MoleculeGroups::*removeAll_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroups::removeAll );
            
            MoleculeGroups_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::removeAll
        
            typedef bool ( ::SireMol::MoleculeGroups::*removeAll_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroups::removeAll );
            
            MoleculeGroups_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::removeAll
        
            typedef bool ( ::SireMol::MoleculeGroups::*removeAll_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroups::removeAll );
            
            MoleculeGroups_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::removeAll
        
            typedef bool ( ::SireMol::MoleculeGroups::*removeAll_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroups::removeAll );
            
            MoleculeGroups_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::removeAll
        
            typedef bool ( ::SireMol::MoleculeGroups::*removeAll_function_type )( ::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MoleculeGroups::removeAll );
            
            MoleculeGroups_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MoleculeGroups::setContents
        
            typedef void ( ::SireMol::MoleculeGroups::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeView const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroups::setContents );
            
            MoleculeGroups_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molview") ) );
        
        }
        { //::SireMol::MoleculeGroups::setContents
        
            typedef void ( ::SireMol::MoleculeGroups::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::ViewsOfMol const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroups::setContents );
            
            MoleculeGroups_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molviews") ) );
        
        }
        { //::SireMol::MoleculeGroups::setContents
        
            typedef void ( ::SireMol::MoleculeGroups::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::Molecules const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroups::setContents );
            
            MoleculeGroups_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroups::setContents
        
            typedef void ( ::SireMol::MoleculeGroups::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeGroup const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MoleculeGroups::setContents );
            
            MoleculeGroups_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molgroup") ) );
        
        }
        { //::SireMol::MoleculeGroups::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::MoleculeGroups::typeName );
            
            MoleculeGroups_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::MoleculeGroups::update
        
            typedef void ( ::SireMol::MoleculeGroups::*update_function_type )( ::SireMol::MoleculeData const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeGroups::update );
            
            MoleculeGroups_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata") ) );
        
        }
        { //::SireMol::MoleculeGroups::update
        
            typedef void ( ::SireMol::MoleculeGroups::*update_function_type )( ::SireMol::Molecules const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeGroups::update );
            
            MoleculeGroups_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MoleculeGroups::update
        
            typedef void ( ::SireMol::MoleculeGroups::*update_function_type )( ::SireMol::MoleculeGroup const & ) ;
            update_function_type update_function_value( &::SireMol::MoleculeGroups::update );
            
            MoleculeGroups_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        MoleculeGroups_exposer.staticmethod( "typeName" );
        MoleculeGroups_exposer.def( "__copy__", &__copy__);
        MoleculeGroups_exposer.def( "__deepcopy__", &__copy__);
        MoleculeGroups_exposer.def( "clone", &__copy__);
        MoleculeGroups_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::MoleculeGroups >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeGroups_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::MoleculeGroups >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoleculeGroups_exposer.def( "__str__", &__str__< ::SireMol::MoleculeGroups > );
        MoleculeGroups_exposer.def( "__repr__", &__str__< ::SireMol::MoleculeGroups > );
    }

}
