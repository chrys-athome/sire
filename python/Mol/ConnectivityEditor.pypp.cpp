// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ConnectivityEditor.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "angleid.h"

#include "atommatcher.h"

#include "atomselection.h"

#include "bondid.h"

#include "connectivity.h"

#include "dihedralid.h"

#include "improperid.h"

#include "moleculedata.h"

#include "moleculeinfodata.h"

#include "moleculeview.h"

#include "tostring.h"

#include <QDataStream>

#include <QDebug>

#include <QElapsedTimer>

#include <boost/assert.hpp>

#include "connectivity.h"

SireMol::ConnectivityEditor __copy__(const SireMol::ConnectivityEditor &other){ return SireMol::ConnectivityEditor(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_ConnectivityEditor_class(){

    { //::SireMol::ConnectivityEditor
        typedef bp::class_< SireMol::ConnectivityEditor, bp::bases< SireMol::ConnectivityBase, SireMol::MolViewProperty, SireBase::Property > > ConnectivityEditor_exposer_t;
        ConnectivityEditor_exposer_t ConnectivityEditor_exposer = ConnectivityEditor_exposer_t( "ConnectivityEditor", bp::init< >() );
        bp::scope ConnectivityEditor_scope( ConnectivityEditor_exposer );
        ConnectivityEditor_exposer.def( bp::init< SireMol::Connectivity const & >(( bp::arg("connectivity") )) );
        ConnectivityEditor_exposer.def( bp::init< SireMol::ConnectivityEditor const & >(( bp::arg("other") )) );
        { //::SireMol::ConnectivityEditor::commit
        
            typedef ::SireMol::Connectivity ( ::SireMol::ConnectivityEditor::*commit_function_type )(  ) const;
            commit_function_type commit_function_value( &::SireMol::ConnectivityEditor::commit );
            
            ConnectivityEditor_exposer.def( 
                "commit"
                , commit_function_value );
        
        }
        { //::SireMol::ConnectivityEditor::connect
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*connect_function_type )( ::SireMol::AtomIdx,::SireMol::AtomIdx ) ;
            connect_function_type connect_function_value( &::SireMol::ConnectivityEditor::connect );
            
            ConnectivityEditor_exposer.def( 
                "connect"
                , connect_function_value
                , ( bp::arg("atom0"), bp::arg("atom1") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::connect
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*connect_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const & ) ;
            connect_function_type connect_function_value( &::SireMol::ConnectivityEditor::connect );
            
            ConnectivityEditor_exposer.def( 
                "connect"
                , connect_function_value
                , ( bp::arg("atom0"), bp::arg("atom1") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::disconnect
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*disconnect_function_type )( ::SireMol::AtomIdx,::SireMol::AtomIdx ) ;
            disconnect_function_type disconnect_function_value( &::SireMol::ConnectivityEditor::disconnect );
            
            ConnectivityEditor_exposer.def( 
                "disconnect"
                , disconnect_function_value
                , ( bp::arg("atom0"), bp::arg("atom1") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::disconnect
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*disconnect_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const & ) ;
            disconnect_function_type disconnect_function_value( &::SireMol::ConnectivityEditor::disconnect );
            
            ConnectivityEditor_exposer.def( 
                "disconnect"
                , disconnect_function_value
                , ( bp::arg("atom0"), bp::arg("atom1") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::disconnectAll
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*disconnectAll_function_type )( ::SireMol::AtomIdx ) ;
            disconnectAll_function_type disconnectAll_function_value( &::SireMol::ConnectivityEditor::disconnectAll );
            
            ConnectivityEditor_exposer.def( 
                "disconnectAll"
                , disconnectAll_function_value
                , ( bp::arg("atomidx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::disconnectAll
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*disconnectAll_function_type )( ::SireMol::ResIdx ) ;
            disconnectAll_function_type disconnectAll_function_value( &::SireMol::ConnectivityEditor::disconnectAll );
            
            ConnectivityEditor_exposer.def( 
                "disconnectAll"
                , disconnectAll_function_value
                , ( bp::arg("residx") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::disconnectAll
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*disconnectAll_function_type )( ::SireMol::AtomID const & ) ;
            disconnectAll_function_type disconnectAll_function_value( &::SireMol::ConnectivityEditor::disconnectAll );
            
            ConnectivityEditor_exposer.def( 
                "disconnectAll"
                , disconnectAll_function_value
                , ( bp::arg("atomid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::disconnectAll
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*disconnectAll_function_type )( ::SireMol::ResID const & ) ;
            disconnectAll_function_type disconnectAll_function_value( &::SireMol::ConnectivityEditor::disconnectAll );
            
            ConnectivityEditor_exposer.def( 
                "disconnectAll"
                , disconnectAll_function_value
                , ( bp::arg("resid") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::ConnectivityEditor::disconnectAll
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*disconnectAll_function_type )(  ) ;
            disconnectAll_function_type disconnectAll_function_value( &::SireMol::ConnectivityEditor::disconnectAll );
            
            ConnectivityEditor_exposer.def( 
                "disconnectAll"
                , disconnectAll_function_value
                , bp::return_self< >() );
        
        }
        ConnectivityEditor_exposer.def( bp::self != bp::self );
        { //::SireMol::ConnectivityEditor::operator=
        
            typedef ::SireMol::ConnectivityEditor & ( ::SireMol::ConnectivityEditor::*assign_function_type )( ::SireMol::ConnectivityBase const & ) ;
            assign_function_type assign_function_value( &::SireMol::ConnectivityEditor::operator= );
            
            ConnectivityEditor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ConnectivityEditor_exposer.def( bp::self == bp::self );
        { //::SireMol::ConnectivityEditor::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::ConnectivityEditor::typeName );
            
            ConnectivityEditor_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        ConnectivityEditor_exposer.staticmethod( "typeName" );
        ConnectivityEditor_exposer.def( "__copy__", &__copy__);
        ConnectivityEditor_exposer.def( "__deepcopy__", &__copy__);
        ConnectivityEditor_exposer.def( "clone", &__copy__);
        ConnectivityEditor_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::ConnectivityEditor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ConnectivityEditor_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::ConnectivityEditor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ConnectivityEditor_exposer.def( "__str__", &__str__< ::SireMol::ConnectivityEditor > );
        ConnectivityEditor_exposer.def( "__repr__", &__str__< ::SireMol::ConnectivityEditor > );
    }

}
