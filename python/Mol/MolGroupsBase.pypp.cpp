// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MolGroupsBase.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomid.h"

#include "cgid.h"

#include "chain.h"

#include "chainid.h"

#include "cutgroup.h"

#include "editor.hpp"

#include "mgidx.h"

#include "mgname.h"

#include "mgnum.h"

#include "molecule.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molidx.h"

#include "molname.h"

#include "molnum.h"

#include "mover.hpp"

#include "partialmolecule.h"

#include "resid.h"

#include "residue.h"

#include "segid.h"

#include "segment.h"

#include "selector.hpp"

#include "tostring.h"

#include "viewsofmol.h"

#include <QDebug>

#include <QMutex>

#include "moleculegroups.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_MolGroupsBase_class(){

    { //::SireMol::MolGroupsBase
        typedef bp::class_< SireMol::MolGroupsBase, bp::bases< SireBase::Property >, boost::noncopyable > MolGroupsBase_exposer_t;
        MolGroupsBase_exposer_t MolGroupsBase_exposer = MolGroupsBase_exposer_t( "MolGroupsBase", bp::no_init );
        bp::scope MolGroupsBase_scope( MolGroupsBase_exposer );
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::add
        
            typedef void ( ::SireMol::MolGroupsBase::*add_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireMol::MolGroupsBase::add );
            
            MolGroupsBase_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::addIfUnique
        
            typedef void ( ::SireMol::MolGroupsBase::*addIfUnique_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireMol::MolGroupsBase::addIfUnique );
            
            MolGroupsBase_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type )( ::SireMol::MolNum ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type )( ::SireMol::MolID const & ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type )( ::SireMol::MGNum ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::assertContains
        
            typedef void ( ::SireMol::MolGroupsBase::*assertContains_function_type )( ::SireMol::MGID const & ) const;
            assertContains_function_type assertContains_function_value( &::SireMol::MolGroupsBase::assertContains );
            
            MolGroupsBase_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::MGIdx ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::MGName const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::MGID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::MolNum ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::MolID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::SegID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::ChainID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::ResID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::CGID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::at
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*at_function_type )( ::SireMol::AtomID const & ) const;
            at_function_type at_function_value( &::SireMol::MolGroupsBase::at );
            
            MolGroupsBase_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::MolGroupsBase::atom
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*atom_function_type )( ::SireMol::AtomID const & ) const;
            atom_function_type atom_function_value( &::SireMol::MolGroupsBase::atom );
            
            MolGroupsBase_exposer.def( 
                "atom"
                , atom_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::MolGroupsBase::atoms
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::MolGroupsBase::*atoms_function_type )( ::SireMol::AtomID const & ) const;
            atoms_function_type atoms_function_value( &::SireMol::MolGroupsBase::atoms );
            
            MolGroupsBase_exposer.def( 
                "atoms"
                , atoms_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::MolGroupsBase::chain
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*chain_function_type )( ::SireMol::ChainID const & ) const;
            chain_function_type chain_function_value( &::SireMol::MolGroupsBase::chain );
            
            MolGroupsBase_exposer.def( 
                "chain"
                , chain_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::MolGroupsBase::chains
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Chain > > ( ::SireMol::MolGroupsBase::*chains_function_type )( ::SireMol::ChainID const & ) const;
            chains_function_type chains_function_value( &::SireMol::MolGroupsBase::chains );
            
            MolGroupsBase_exposer.def( 
                "chains"
                , chains_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type )( ::SireMol::MGNum ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type )( ::SireMol::MolNum ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type )( ::QList< SireMol::MolNum > const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnums") ) );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type )( ::SireMol::MoleculeView const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type )( ::SireMol::ViewsOfMol const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MolGroupsBase::contains
        
            typedef bool ( ::SireMol::MolGroupsBase::*contains_function_type )( ::SireMol::Molecules const & ) const;
            contains_function_type contains_function_value( &::SireMol::MolGroupsBase::contains );
            
            MolGroupsBase_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MolGroupsBase::count
        
            typedef int ( ::SireMol::MolGroupsBase::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireMol::MolGroupsBase::count );
            
            MolGroupsBase_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireMol::MolGroupsBase::cutGroup
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*cutGroup_function_type )( ::SireMol::CGID const & ) const;
            cutGroup_function_type cutGroup_function_value( &::SireMol::MolGroupsBase::cutGroup );
            
            MolGroupsBase_exposer.def( 
                "cutGroup"
                , cutGroup_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::cutGroups
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::CutGroup > > ( ::SireMol::MolGroupsBase::*cutGroups_function_type )( ::SireMol::CGID const & ) const;
            cutGroups_function_type cutGroups_function_value( &::SireMol::MolGroupsBase::cutGroups );
            
            MolGroupsBase_exposer.def( 
                "cutGroups"
                , cutGroups_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type )( ::SireMol::MGNum ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type )( ::SireMol::MGIdx ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgidx") ) );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type )( ::SireMol::MGName const & ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgname") ) );
        
        }
        { //::SireMol::MolGroupsBase::getGroupNumber
        
            typedef ::SireMol::MGNum ( ::SireMol::MolGroupsBase::*getGroupNumber_function_type )( ::SireMol::MGID const & ) const;
            getGroupNumber_function_type getGroupNumber_function_value( &::SireMol::MolGroupsBase::getGroupNumber );
            
            MolGroupsBase_exposer.def( 
                "getGroupNumber"
                , getGroupNumber_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type )( ::SireMol::MolNum ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type )( ::SireMol::MolIdx ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molidx") ) );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type )( ::SireMol::MolName const & ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molname") ) );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumber
        
            typedef ::SireMol::MolNum ( ::SireMol::MolGroupsBase::*getMoleculeNumber_function_type )( ::SireMol::MolID const & ) const;
            getMoleculeNumber_function_type getMoleculeNumber_function_value( &::SireMol::MolGroupsBase::getMoleculeNumber );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumber"
                , getMoleculeNumber_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeNumbers
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*getMoleculeNumbers_function_type )(  ) const;
            getMoleculeNumbers_function_type getMoleculeNumbers_function_value( &::SireMol::MolGroupsBase::getMoleculeNumbers );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeNumbers"
                , getMoleculeNumbers_function_value );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeVersion
        
            typedef ::quint64 ( ::SireMol::MolGroupsBase::*getMoleculeVersion_function_type )( ::SireMol::MolNum ) const;
            getMoleculeVersion_function_type getMoleculeVersion_function_value( &::SireMol::MolGroupsBase::getMoleculeVersion );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeVersion"
                , getMoleculeVersion_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::getMoleculeVersion
        
            typedef ::quint64 ( ::SireMol::MolGroupsBase::*getMoleculeVersion_function_type )( ::SireMol::MolID const & ) const;
            getMoleculeVersion_function_type getMoleculeVersion_function_value( &::SireMol::MolGroupsBase::getMoleculeVersion );
            
            MolGroupsBase_exposer.def( 
                "getMoleculeVersion"
                , getMoleculeVersion_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type )( ::SireMol::MGNum ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type )( ::SireMol::MGName const & ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type )( ::SireMol::MGIdx ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::group
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*group_function_type )( ::SireMol::MGID const & ) const;
            group_function_type group_function_value( &::SireMol::MolGroupsBase::group );
            
            MolGroupsBase_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::groupNames
        
            typedef ::QList< SireMol::MGName > ( ::SireMol::MolGroupsBase::*groupNames_function_type )(  ) const;
            groupNames_function_type groupNames_function_value( &::SireMol::MolGroupsBase::groupNames );
            
            MolGroupsBase_exposer.def( 
                "groupNames"
                , groupNames_function_value );
        
        }
        { //::SireMol::MolGroupsBase::groupNumbers
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*groupNumbers_function_type )(  ) const;
            groupNumbers_function_type groupNumbers_function_value( &::SireMol::MolGroupsBase::groupNumbers );
            
            MolGroupsBase_exposer.def( 
                "groupNumbers"
                , groupNumbers_function_value );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type )(  ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type )( ::SireMol::MGNum ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type )( ::SireMol::MGIdx ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgidx") ) );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type )( ::SireMol::MGName const & ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgname") ) );
        
        }
        { //::SireMol::MolGroupsBase::groups
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*groups_function_type )( ::SireMol::MGID const & ) const;
            groups_function_type groups_function_value( &::SireMol::MolGroupsBase::groups );
            
            MolGroupsBase_exposer.def( 
                "groups"
                , groups_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::groupsContaining
        
            typedef ::QList< SireMol::MGNum > const & ( ::SireMol::MolGroupsBase::*groupsContaining_function_type )( ::SireMol::MolNum ) const;
            groupsContaining_function_type groupsContaining_function_value( &::SireMol::MolGroupsBase::groupsContaining );
            
            MolGroupsBase_exposer.def( 
                "groupsContaining"
                , groupsContaining_function_value
                , ( bp::arg("molnum") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMol::MolGroupsBase::intersects
        
            typedef bool ( ::SireMol::MolGroupsBase::*intersects_function_type )( ::SireMol::MoleculeView const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MolGroupsBase::intersects );
            
            MolGroupsBase_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MolGroupsBase::intersects
        
            typedef bool ( ::SireMol::MolGroupsBase::*intersects_function_type )( ::SireMol::Molecules const & ) const;
            intersects_function_type intersects_function_value( &::SireMol::MolGroupsBase::intersects );
            
            MolGroupsBase_exposer.def( 
                "intersects"
                , intersects_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMol::MolGroupsBase::isEmpty
        
            typedef bool ( ::SireMol::MolGroupsBase::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::MolGroupsBase::isEmpty );
            
            MolGroupsBase_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MGNum ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MGIdx ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgidx") ) );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MGName const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgname") ) );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MGID const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MolNum ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MolIdx ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molidx") ) );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MolName const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molname") ) );
        
        }
        { //::SireMol::MolGroupsBase::map
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*map_function_type )( ::SireMol::MolID const & ) const;
            map_function_type map_function_value( &::SireMol::MolGroupsBase::map );
            
            MolGroupsBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::mgIdx
        
            typedef ::SireMol::MGIdx ( ::SireMol::MolGroupsBase::*mgIdx_function_type )( ::SireMol::MGNum ) const;
            mgIdx_function_type mgIdx_function_value( &::SireMol::MolGroupsBase::mgIdx );
            
            MolGroupsBase_exposer.def( 
                "mgIdx"
                , mgIdx_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::mgNames
        
            typedef ::QList< SireMol::MGName > ( ::SireMol::MolGroupsBase::*mgNames_function_type )(  ) const;
            mgNames_function_type mgNames_function_value( &::SireMol::MolGroupsBase::mgNames );
            
            MolGroupsBase_exposer.def( 
                "mgNames"
                , mgNames_function_value );
        
        }
        { //::SireMol::MolGroupsBase::mgNums
        
            typedef ::QList< SireMol::MGNum > ( ::SireMol::MolGroupsBase::*mgNums_function_type )(  ) const;
            mgNums_function_type mgNums_function_value( &::SireMol::MolGroupsBase::mgNums );
            
            MolGroupsBase_exposer.def( 
                "mgNums"
                , mgNums_function_value );
        
        }
        { //::SireMol::MolGroupsBase::molNums
        
            typedef ::QList< SireMol::MolNum > ( ::SireMol::MolGroupsBase::*molNums_function_type )(  ) const;
            molNums_function_type molNums_function_value( &::SireMol::MolGroupsBase::molNums );
            
            MolGroupsBase_exposer.def( 
                "molNums"
                , molNums_function_value );
        
        }
        { //::SireMol::MolGroupsBase::molecule
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*molecule_function_type )( ::SireMol::MolNum ) const;
            molecule_function_type molecule_function_value( &::SireMol::MolGroupsBase::molecule );
            
            MolGroupsBase_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::molecule
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*molecule_function_type )( ::SireMol::MolID const & ) const;
            molecule_function_type molecule_function_value( &::SireMol::MolGroupsBase::molecule );
            
            MolGroupsBase_exposer.def( 
                "molecule"
                , molecule_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MolGroupsBase::*molecules_function_type )( ::SireMol::MolNum ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MolGroupsBase::*molecules_function_type )( ::SireMol::MolID const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::SireMol::Molecules ( ::SireMol::MolGroupsBase::*molecules_function_type )(  ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value );
        
        }
        { //::SireMol::MolGroupsBase::molecules
        
            typedef ::SireMol::Molecules ( ::SireMol::MolGroupsBase::*molecules_function_type )( ::SireMol::MGID const & ) const;
            molecules_function_type molecules_function_value( &::SireMol::MolGroupsBase::molecules );
            
            MolGroupsBase_exposer.def( 
                "molecules"
                , molecules_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::nGroups
        
            typedef int ( ::SireMol::MolGroupsBase::*nGroups_function_type )(  ) const;
            nGroups_function_type nGroups_function_value( &::SireMol::MolGroupsBase::nGroups );
            
            MolGroupsBase_exposer.def( 
                "nGroups"
                , nGroups_function_value );
        
        }
        { //::SireMol::MolGroupsBase::nMolecules
        
            typedef int ( ::SireMol::MolGroupsBase::*nMolecules_function_type )(  ) const;
            nMolecules_function_type nMolecules_function_value( &::SireMol::MolGroupsBase::nMolecules );
            
            MolGroupsBase_exposer.def( 
                "nMolecules"
                , nMolecules_function_value );
        
        }
        { //::SireMol::MolGroupsBase::nViews
        
            typedef int ( ::SireMol::MolGroupsBase::*nViews_function_type )(  ) const;
            nViews_function_type nViews_function_value( &::SireMol::MolGroupsBase::nViews );
            
            MolGroupsBase_exposer.def( 
                "nViews"
                , nViews_function_value );
        
        }
        { //::SireMol::MolGroupsBase::nViews
        
            typedef int ( ::SireMol::MolGroupsBase::*nViews_function_type )( ::SireMol::MolNum ) const;
            nViews_function_type nViews_function_value( &::SireMol::MolGroupsBase::nViews );
            
            MolGroupsBase_exposer.def( 
                "nViews"
                , nViews_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::null
        
            typedef ::SireMol::MoleculeGroups const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMol::MolGroupsBase::null );
            
            MolGroupsBase_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::MGNum ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::MGName const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::MGIdx ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::MGID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::MolNum ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::MolID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::SegID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::ChainID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::ResID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::CGID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::operator[]
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*__getitem___function_type )( ::SireMol::AtomID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::MolGroupsBase::operator[] );
            
            MolGroupsBase_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MoleculeGroup const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MoleculeView const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::ViewsOfMol const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::Molecules const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MolNum ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::QSet< SireMol::MolNum > const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MolID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::SireMol::MolNum,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::remove
        
            typedef bool ( ::SireMol::MolGroupsBase::*remove_function_type )( ::QSet< SireMol::MolNum > const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireMol::MolGroupsBase::remove );
            
            MolGroupsBase_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::MoleculeView const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::ViewsOfMol const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::Molecules const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::MoleculeGroup const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )(  ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::removeAll
        
            typedef bool ( ::SireMol::MolGroupsBase::*removeAll_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireMol::MolGroupsBase::removeAll );
            
            MolGroupsBase_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::residue
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*residue_function_type )( ::SireMol::ResID const & ) const;
            residue_function_type residue_function_value( &::SireMol::MolGroupsBase::residue );
            
            MolGroupsBase_exposer.def( 
                "residue"
                , residue_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::MolGroupsBase::residues
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Residue > > ( ::SireMol::MolGroupsBase::*residues_function_type )( ::SireMol::ResID const & ) const;
            residues_function_type residues_function_value( &::SireMol::MolGroupsBase::residues );
            
            MolGroupsBase_exposer.def( 
                "residues"
                , residues_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::MolGroupsBase::segment
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*segment_function_type )( ::SireMol::SegID const & ) const;
            segment_function_type segment_function_value( &::SireMol::MolGroupsBase::segment );
            
            MolGroupsBase_exposer.def( 
                "segment"
                , segment_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::MolGroupsBase::segments
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Segment > > ( ::SireMol::MolGroupsBase::*segments_function_type )( ::SireMol::SegID const & ) const;
            segments_function_type segments_function_value( &::SireMol::MolGroupsBase::segments );
            
            MolGroupsBase_exposer.def( 
                "segments"
                , segments_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMol::MolGroupsBase::*select_function_type )( ::SireMol::MGID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::ViewsOfMol ( ::SireMol::MolGroupsBase::*select_function_type )( ::SireMol::MolID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Segment ( ::SireMol::MolGroupsBase::*select_function_type )( ::SireMol::SegID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Chain ( ::SireMol::MolGroupsBase::*select_function_type )( ::SireMol::ChainID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Residue ( ::SireMol::MolGroupsBase::*select_function_type )( ::SireMol::ResID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::CutGroup ( ::SireMol::MolGroupsBase::*select_function_type )( ::SireMol::CGID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::select
        
            typedef ::SireMol::Atom ( ::SireMol::MolGroupsBase::*select_function_type )( ::SireMol::AtomID const & ) const;
            select_function_type select_function_value( &::SireMol::MolGroupsBase::select );
            
            MolGroupsBase_exposer.def( 
                "select"
                , select_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )(  ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::MGNum ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::MGIdx ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgidx") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::MGName const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgname") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireBase::PropPtr< SireMol::MoleculeGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::MGID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::MolID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Segment > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::SegID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("segid") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Chain > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::ChainID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("chainid") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Residue > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::ResID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("resid") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::CutGroup > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::CGID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("cgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::selectAll
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::MolGroupsBase::*selectAll_function_type )( ::SireMol::AtomID const & ) const;
            selectAll_function_type selectAll_function_value( &::SireMol::MolGroupsBase::selectAll );
            
            MolGroupsBase_exposer.def( 
                "selectAll"
                , selectAll_function_value
                , ( bp::arg("atomid") ) );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeView const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molview") ) );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::ViewsOfMol const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molviews") ) );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::Molecules const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molecules") ) );
        
        }
        { //::SireMol::MolGroupsBase::setContents
        
            typedef void ( ::SireMol::MolGroupsBase::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeGroup const & ) ;
            setContents_function_type setContents_function_value( &::SireMol::MolGroupsBase::setContents );
            
            MolGroupsBase_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molgroup") ) );
        
        }
        { //::SireMol::MolGroupsBase::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::MolGroupsBase::typeName );
            
            MolGroupsBase_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::unite
        
            typedef void ( ::SireMol::MolGroupsBase::*unite_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            unite_function_type unite_function_value( &::SireMol::MolGroupsBase::unite );
            
            MolGroupsBase_exposer.def( 
                "unite"
                , unite_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type )( ::SireMol::MoleculeData const & ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata") ) );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type )( ::SireMol::MoleculeView const & ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type )( ::SireMol::Molecules const & ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::MolGroupsBase::update
        
            typedef void ( ::SireMol::MolGroupsBase::*update_function_type )( ::SireMol::MoleculeGroup const & ) ;
            update_function_type update_function_value( &::SireMol::MolGroupsBase::update );
            
            MolGroupsBase_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        MolGroupsBase_exposer.staticmethod( "null" );
        MolGroupsBase_exposer.staticmethod( "typeName" );
        MolGroupsBase_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::MolGroupsBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MolGroupsBase_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::MolGroupsBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MolGroupsBase_exposer.def( "__str__", &__str__< ::SireMol::MolGroupsBase > );
        MolGroupsBase_exposer.def( "__repr__", &__str__< ::SireMol::MolGroupsBase > );
        MolGroupsBase_exposer.def( "__len__", &__len_count< ::SireMol::MolGroupsBase > );
    }

}
