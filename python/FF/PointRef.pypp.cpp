// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PointRef.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/evaluator.h"

#include "SireMol/mgidx.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleculegroups.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/aabox.h"

#include "SireVol/errors.h"

#include "forcetable.h"

#include "point.h"

#include <boost/tuple/tuple.hpp>

#include "point.h"

SireFF::PointRef __copy__(const SireFF::PointRef &other){ return SireFF::PointRef(other); }

const char* pvt_get_name(const SireFF::PointRef&){ return "SireFF::PointRef";}

void register_PointRef_class(){

    { //::SireFF::PointRef
        typedef bp::class_< SireFF::PointRef > PointRef_exposer_t;
        PointRef_exposer_t PointRef_exposer = PointRef_exposer_t( "PointRef", bp::init< SireMol::Atom const & >(( bp::arg("atom") )) );
        bp::scope PointRef_scope( PointRef_exposer );
        PointRef_exposer.def( bp::init< SireMaths::Vector const & >(( bp::arg("point") )) );
        PointRef_exposer.def( bp::init< SireFF::Point const & >(( bp::arg("point") )) );
        PointRef_exposer.def( bp::init< SireFF::PointPtr const & >(( bp::arg("point") )) );
        { //::SireFF::PointRef::addForce
        
            typedef bool ( ::SireFF::PointRef::*addForce_function_type )( ::SireFF::MolForceTable &,::SireMaths::Vector const & ) const;
            addForce_function_type addForce_function_value( &::SireFF::PointRef::addForce );
            
            PointRef_exposer.def( 
                "addForce"
                , addForce_function_value
                , ( bp::arg("molforces"), bp::arg("force") ) );
        
        }
        { //::SireFF::PointRef::addForce
        
            typedef bool ( ::SireFF::PointRef::*addForce_function_type )( ::SireFF::ForceTable &,::SireMaths::Vector const & ) const;
            addForce_function_type addForce_function_value( &::SireFF::PointRef::addForce );
            
            PointRef_exposer.def( 
                "addForce"
                , addForce_function_value
                , ( bp::arg("forces"), bp::arg("force") ) );
        
        }
        { //::SireFF::PointRef::operator()
        
            typedef ::SireMaths::Vector const & ( ::SireFF::PointRef::*__call___function_type )(  ) const;
            __call___function_type __call___function_value( &::SireFF::PointRef::operator() );
            
            PointRef_exposer.def( 
                "__call__"
                , __call___function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::PointRef::point
        
            typedef ::SireMaths::Vector const & ( ::SireFF::PointRef::*point_function_type )(  ) const;
            point_function_type point_function_value( &::SireFF::PointRef::point );
            
            PointRef_exposer.def( 
                "point"
                , point_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        PointRef_exposer.def( "__copy__", &__copy__);
        PointRef_exposer.def( "__deepcopy__", &__copy__);
        PointRef_exposer.def( "clone", &__copy__);
        PointRef_exposer.def( "__str__", &pvt_get_name);
        PointRef_exposer.def( "__repr__", &pvt_get_name);
    }

}
