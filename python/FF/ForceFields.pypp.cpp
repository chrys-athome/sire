// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "ForceFields.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/combineproperties.h"

#include "SireBase/errors.h"

#include "SireBase/linktoproperty.h"

#include "SireError/errors.h"

#include "SireFF/errors.h"

#include "SireMol/errors.h"

#include "SireMol/mgidx.h"

#include "SireMol/mgnum.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/molecules.h"

#include "SireMol/moleculeview.h"

#include "SireMol/partialmolecule.h"

#include "SireMol/viewsofmol.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "ff3d.h"

#include "ffidx.h"

#include "ffname.h"

#include "fieldtable.h"

#include "forcefields.h"

#include "forcetable.h"

#include "potentialtable.h"

#include "probe.h"

#include "tostring.h"

#include <QDebug>

#include <QSet>

#include <QTime>

#include <boost/shared_ptr.hpp>

#include "forcefields.h"

#include "forcetable.h"

SireFF::ForceFields __copy__(const SireFF::ForceFields &other){ return SireFF::ForceFields(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_ForceFields_class(){

    { //::SireFF::ForceFields
        typedef bp::class_< SireFF::ForceFields, bp::bases< SireMol::MolGroupsBase, SireBase::Property > > ForceFields_exposer_t;
        ForceFields_exposer_t ForceFields_exposer = ForceFields_exposer_t( "ForceFields", bp::init< >() );
        bp::scope ForceFields_scope( ForceFields_exposer );
        ForceFields_exposer.def( bp::init< SireFF::FF const & >(( bp::arg("forcefield") )) );
        ForceFields_exposer.def( bp::init< QList< SireBase::PropPtr< SireFF::FF > > const & >(( bp::arg("forcefields") )) );
        ForceFields_exposer.def( bp::init< QVector< SireBase::PropPtr< SireFF::FF > > const & >(( bp::arg("forcefields") )) );
        ForceFields_exposer.def( bp::init< SireFF::ForceFields const & >(( bp::arg("other") )) );
        { //::SireFF::ForceFields::accept
        
            typedef void ( ::SireFF::ForceFields::*accept_function_type )(  ) ;
            accept_function_type accept_function_value( &::SireFF::ForceFields::accept );
            
            ForceFields_exposer.def( 
                "accept"
                , accept_function_value );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireFF::FF const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("forcefield") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::add
        
            typedef void ( ::SireFF::ForceFields::*add_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireFF::ForceFields::add );
            
            ForceFields_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::addIfUnique
        
            typedef void ( ::SireFF::ForceFields::*addIfUnique_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireFF::ForceFields::addIfUnique );
            
            ForceFields_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::at
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*at_function_type )( ::SireFF::FFName const & ) const;
            at_function_type at_function_value( &::SireFF::ForceFields::at );
            
            ForceFields_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("ffname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::at
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*at_function_type )( ::SireFF::FFIdx const & ) const;
            at_function_type at_function_value( &::SireFF::ForceFields::at );
            
            ForceFields_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("ffidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::at
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*at_function_type )( ::SireFF::FFID const & ) const;
            at_function_type at_function_value( &::SireFF::ForceFields::at );
            
            ForceFields_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireFF::ForceFields::*at_function_type )( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireFF::ForceFields::at );
            
            ForceFields_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::builtinProperties
        
            typedef ::SireBase::Properties ( ::SireFF::ForceFields::*builtinProperties_function_type )(  ) const;
            builtinProperties_function_type builtinProperties_function_value( &::SireFF::ForceFields::builtinProperties );
            
            ForceFields_exposer.def( 
                "builtinProperties"
                , builtinProperties_function_value );
        
        }
        { //::SireFF::ForceFields::builtinProperty
        
            typedef ::SireBase::Property const & ( ::SireFF::ForceFields::*builtinProperty_function_type )( ::QString const & ) const;
            builtinProperty_function_type builtinProperty_function_value( &::SireFF::ForceFields::builtinProperty );
            
            ForceFields_exposer.def( 
                "builtinProperty"
                , builtinProperty_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::componentExpression
        
            typedef ::SireCAS::Expression ( ::SireFF::ForceFields::*componentExpression_function_type )( ::SireCAS::Symbol const & ) const;
            componentExpression_function_type componentExpression_function_value( &::SireFF::ForceFields::componentExpression );
            
            ForceFields_exposer.def( 
                "componentExpression"
                , componentExpression_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireFF::ForceFields::componentExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireFF::ForceFields::*componentExpressions_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            componentExpressions_function_type componentExpressions_function_value( &::SireFF::ForceFields::componentExpressions );
            
            ForceFields_exposer.def( 
                "componentExpressions"
                , componentExpressions_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireFF::ForceFields::componentExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireFF::ForceFields::*componentExpressions_function_type )(  ) const;
            componentExpressions_function_type componentExpressions_function_value( &::SireFF::ForceFields::componentExpressions );
            
            ForceFields_exposer.def( 
                "componentExpressions"
                , componentExpressions_function_value );
        
        }
        { //::SireFF::ForceFields::componentSymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireFF::ForceFields::*componentSymbols_function_type )(  ) const;
            componentSymbols_function_type componentSymbols_function_value( &::SireFF::ForceFields::componentSymbols );
            
            ForceFields_exposer.def( 
                "componentSymbols"
                , componentSymbols_function_value );
        
        }
        { //::SireFF::ForceFields::componentValue
        
            typedef double ( ::SireFF::ForceFields::*componentValue_function_type )( ::SireCAS::Symbol const & ) ;
            componentValue_function_type componentValue_function_value( &::SireFF::ForceFields::componentValue );
            
            ForceFields_exposer.def( 
                "componentValue"
                , componentValue_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireFF::ForceFields::componentValues
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*componentValues_function_type )( ::QSet< SireCAS::Symbol > const & ) ;
            componentValues_function_type componentValues_function_value( &::SireFF::ForceFields::componentValues );
            
            ForceFields_exposer.def( 
                "componentValues"
                , componentValues_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireFF::ForceFields::componentValues
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*componentValues_function_type )(  ) ;
            componentValues_function_type componentValues_function_value( &::SireFF::ForceFields::componentValues );
            
            ForceFields_exposer.def( 
                "componentValues"
                , componentValues_function_value );
        
        }
        { //::SireFF::ForceFields::compoundProperty
        
            typedef ::SireBase::Property const & ( ::SireFF::ForceFields::*compoundProperty_function_type )( ::QString const & ) const;
            compoundProperty_function_type compoundProperty_function_value( &::SireFF::ForceFields::compoundProperty );
            
            ForceFields_exposer.def( 
                "compoundProperty"
                , compoundProperty_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::constant
        
            typedef double ( ::SireFF::ForceFields::*constant_function_type )( ::SireCAS::Symbol const & ) const;
            constant_function_type constant_function_value( &::SireFF::ForceFields::constant );
            
            ForceFields_exposer.def( 
                "constant"
                , constant_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::ForceFields::constantComponents
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*constantComponents_function_type )(  ) const;
            constantComponents_function_type constantComponents_function_value( &::SireFF::ForceFields::constantComponents );
            
            ForceFields_exposer.def( 
                "constantComponents"
                , constantComponents_function_value );
        
        }
        { //::SireFF::ForceFields::constantExpression
        
            typedef ::SireCAS::Expression ( ::SireFF::ForceFields::*constantExpression_function_type )( ::SireCAS::Symbol const & ) const;
            constantExpression_function_type constantExpression_function_value( &::SireFF::ForceFields::constantExpression );
            
            ForceFields_exposer.def( 
                "constantExpression"
                , constantExpression_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireFF::ForceFields::constantExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireFF::ForceFields::*constantExpressions_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            constantExpressions_function_type constantExpressions_function_value( &::SireFF::ForceFields::constantExpressions );
            
            ForceFields_exposer.def( 
                "constantExpressions"
                , constantExpressions_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireFF::ForceFields::constantExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireFF::ForceFields::*constantExpressions_function_type )(  ) const;
            constantExpressions_function_type constantExpressions_function_value( &::SireFF::ForceFields::constantExpressions );
            
            ForceFields_exposer.def( 
                "constantExpressions"
                , constantExpressions_function_value );
        
        }
        { //::SireFF::ForceFields::constantSymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireFF::ForceFields::*constantSymbols_function_type )(  ) const;
            constantSymbols_function_type constantSymbols_function_value( &::SireFF::ForceFields::constantSymbols );
            
            ForceFields_exposer.def( 
                "constantSymbols"
                , constantSymbols_function_value );
        
        }
        { //::SireFF::ForceFields::constants
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*constants_function_type )(  ) const;
            constants_function_type constants_function_value( &::SireFF::ForceFields::constants );
            
            ForceFields_exposer.def( 
                "constants"
                , constants_function_value );
        
        }
        { //::SireFF::ForceFields::constants
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*constants_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            constants_function_type constants_function_value( &::SireFF::ForceFields::constants );
            
            ForceFields_exposer.def( 
                "constants"
                , constants_function_value
                , ( bp::arg("components") ) );
        
        }
        { //::SireFF::ForceFields::containsProperty
        
            typedef bool ( ::SireFF::ForceFields::*containsProperty_function_type )( ::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireFF::ForceFields::containsProperty );
            
            ForceFields_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::containsProperty
        
            typedef bool ( ::SireFF::ForceFields::*containsProperty_function_type )( ::SireFF::FFID const &,::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireFF::ForceFields::containsProperty );
            
            ForceFields_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("ffid"), bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::containsProperty
        
            typedef bool ( ::SireFF::ForceFields::*containsProperty_function_type )( ::SireBase::PropertyName const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireFF::ForceFields::containsProperty );
            
            ForceFields_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::containsProperty
        
            typedef bool ( ::SireFF::ForceFields::*containsProperty_function_type )( ::SireFF::FFID const &,::SireBase::PropertyName const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireFF::ForceFields::containsProperty );
            
            ForceFields_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("ffid"), bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::energies
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*energies_function_type )(  ) ;
            energies_function_type energies_function_value( &::SireFF::ForceFields::energies );
            
            ForceFields_exposer.def( 
                "energies"
                , energies_function_value );
        
        }
        { //::SireFF::ForceFields::energies
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*energies_function_type )( ::QSet< SireCAS::Symbol > const & ) ;
            energies_function_type energies_function_value( &::SireFF::ForceFields::energies );
            
            ForceFields_exposer.def( 
                "energies"
                , energies_function_value
                , ( bp::arg("components") ) );
        
        }
        { //::SireFF::ForceFields::energy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireFF::ForceFields::*energy_function_type )(  ) ;
            energy_function_type energy_function_value( &::SireFF::ForceFields::energy );
            
            ForceFields_exposer.def( 
                "energy"
                , energy_function_value );
        
        }
        { //::SireFF::ForceFields::energy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireFF::ForceFields::*energy_function_type )( ::SireCAS::Symbol const & ) ;
            energy_function_type energy_function_value( &::SireFF::ForceFields::energy );
            
            ForceFields_exposer.def( 
                "energy"
                , energy_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::ForceFields::energyComponents
        
            typedef ::SireCAS::Values ( ::SireFF::ForceFields::*energyComponents_function_type )(  ) ;
            energyComponents_function_type energyComponents_function_value( &::SireFF::ForceFields::energyComponents );
            
            ForceFields_exposer.def( 
                "energyComponents"
                , energyComponents_function_value );
        
        }
        { //::SireFF::ForceFields::energyExpression
        
            typedef ::SireCAS::Expression ( ::SireFF::ForceFields::*energyExpression_function_type )( ::SireCAS::Symbol const & ) const;
            energyExpression_function_type energyExpression_function_value( &::SireFF::ForceFields::energyExpression );
            
            ForceFields_exposer.def( 
                "energyExpression"
                , energyExpression_function_value
                , ( bp::arg("expression") ) );
        
        }
        { //::SireFF::ForceFields::energyExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireFF::ForceFields::*energyExpressions_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            energyExpressions_function_type energyExpressions_function_value( &::SireFF::ForceFields::energyExpressions );
            
            ForceFields_exposer.def( 
                "energyExpressions"
                , energyExpressions_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireFF::ForceFields::energyExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireFF::ForceFields::*energyExpressions_function_type )(  ) const;
            energyExpressions_function_type energyExpressions_function_value( &::SireFF::ForceFields::energyExpressions );
            
            ForceFields_exposer.def( 
                "energyExpressions"
                , energyExpressions_function_value );
        
        }
        { //::SireFF::ForceFields::energySymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireFF::ForceFields::*energySymbols_function_type )(  ) const;
            energySymbols_function_type energySymbols_function_value( &::SireFF::ForceFields::energySymbols );
            
            ForceFields_exposer.def( 
                "energySymbols"
                , energySymbols_function_value );
        
        }
        { //::SireFF::ForceFields::ffIdx
        
            typedef ::SireFF::FFIdx ( ::SireFF::ForceFields::*ffIdx_function_type )( ::SireFF::FFName const & ) const;
            ffIdx_function_type ffIdx_function_value( &::SireFF::ForceFields::ffIdx );
            
            ForceFields_exposer.def( 
                "ffIdx"
                , ffIdx_function_value
                , ( bp::arg("ffname") ) );
        
        }
        { //::SireFF::ForceFields::ffIdx
        
            typedef ::SireFF::FFIdx ( ::SireFF::ForceFields::*ffIdx_function_type )( ::SireFF::FFIdx const & ) const;
            ffIdx_function_type ffIdx_function_value( &::SireFF::ForceFields::ffIdx );
            
            ForceFields_exposer.def( 
                "ffIdx"
                , ffIdx_function_value
                , ( bp::arg("ffidx") ) );
        
        }
        { //::SireFF::ForceFields::ffIdx
        
            typedef ::SireFF::FFIdx ( ::SireFF::ForceFields::*ffIdx_function_type )( ::SireFF::FFID const & ) const;
            ffIdx_function_type ffIdx_function_value( &::SireFF::ForceFields::ffIdx );
            
            ForceFields_exposer.def( 
                "ffIdx"
                , ffIdx_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireFF::ForceFields::ffName
        
            typedef ::SireFF::FFName const & ( ::SireFF::ForceFields::*ffName_function_type )( ::SireFF::FFName const & ) const;
            ffName_function_type ffName_function_value( &::SireFF::ForceFields::ffName );
            
            ForceFields_exposer.def( 
                "ffName"
                , ffName_function_value
                , ( bp::arg("ffname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::ffName
        
            typedef ::SireFF::FFName const & ( ::SireFF::ForceFields::*ffName_function_type )( ::SireFF::FFIdx const & ) const;
            ffName_function_type ffName_function_value( &::SireFF::ForceFields::ffName );
            
            ForceFields_exposer.def( 
                "ffName"
                , ffName_function_value
                , ( bp::arg("ffidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::ffName
        
            typedef ::SireFF::FFName const & ( ::SireFF::ForceFields::*ffName_function_type )( ::SireFF::FFID const & ) const;
            ffName_function_type ffName_function_value( &::SireFF::ForceFields::ffName );
            
            ForceFields_exposer.def( 
                "ffName"
                , ffName_function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::ffNames
        
            typedef ::QList< SireFF::FFName > ( ::SireFF::ForceFields::*ffNames_function_type )(  ) const;
            ffNames_function_type ffNames_function_value( &::SireFF::ForceFields::ffNames );
            
            ForceFields_exposer.def( 
                "ffNames"
                , ffNames_function_value );
        
        }
        { //::SireFF::ForceFields::ffNames
        
            typedef ::QList< SireFF::FFName > ( ::SireFF::ForceFields::*ffNames_function_type )( ::SireFF::FFID const & ) const;
            ffNames_function_type ffNames_function_value( &::SireFF::ForceFields::ffNames );
            
            ForceFields_exposer.def( 
                "ffNames"
                , ffNames_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireFF::ForceFields::field
        
            typedef void ( ::SireFF::ForceFields::*field_function_type )( ::SireFF::FieldTable &,double ) ;
            field_function_type field_function_value( &::SireFF::ForceFields::field );
            
            ForceFields_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireFF::ForceFields::field
        
            typedef void ( ::SireFF::ForceFields::*field_function_type )( ::SireFF::FieldTable &,::SireCAS::Symbol const &,double ) ;
            field_function_type field_function_value( &::SireFF::ForceFields::field );
            
            ForceFields_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("component"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireFF::ForceFields::field
        
            typedef void ( ::SireFF::ForceFields::*field_function_type )( ::SireFF::FieldTable &,::SireFF::Probe const &,double ) ;
            field_function_type field_function_value( &::SireFF::ForceFields::field );
            
            ForceFields_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("probe"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireFF::ForceFields::field
        
            typedef void ( ::SireFF::ForceFields::*field_function_type )( ::SireFF::FieldTable &,::SireCAS::Symbol const &,::SireFF::Probe const &,double ) ;
            field_function_type field_function_value( &::SireFF::ForceFields::field );
            
            ForceFields_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("component"), bp::arg("probe"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireFF::ForceFields::force
        
            typedef void ( ::SireFF::ForceFields::*force_function_type )( ::SireFF::ForceTable &,double ) ;
            force_function_type force_function_value( &::SireFF::ForceFields::force );
            
            ForceFields_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("forcetable"), bp::arg("scale_force")=1 ) );
        
        }
        { //::SireFF::ForceFields::force
        
            typedef void ( ::SireFF::ForceFields::*force_function_type )( ::SireFF::ForceTable &,::SireCAS::Symbol const &,double ) ;
            force_function_type force_function_value( &::SireFF::ForceFields::force );
            
            ForceFields_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("forcetable"), bp::arg("component"), bp::arg("scale_force")=1 ) );
        
        }
        { //::SireFF::ForceFields::forceField
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*forceField_function_type )( ::SireFF::FFName const & ) const;
            forceField_function_type forceField_function_value( &::SireFF::ForceFields::forceField );
            
            ForceFields_exposer.def( 
                "forceField"
                , forceField_function_value
                , ( bp::arg("ffname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::forceField
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*forceField_function_type )( ::SireFF::FFIdx const & ) const;
            forceField_function_type forceField_function_value( &::SireFF::ForceFields::forceField );
            
            ForceFields_exposer.def( 
                "forceField"
                , forceField_function_value
                , ( bp::arg("ffidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::forceField
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*forceField_function_type )( ::SireFF::FFID const & ) const;
            forceField_function_type forceField_function_value( &::SireFF::ForceFields::forceField );
            
            ForceFields_exposer.def( 
                "forceField"
                , forceField_function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::forceField
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*forceField_function_type )( ::SireMol::MGNum const & ) const;
            forceField_function_type forceField_function_value( &::SireFF::ForceFields::forceField );
            
            ForceFields_exposer.def( 
                "forceField"
                , forceField_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::forceFields
        
            typedef ::QVector< SireBase::PropPtr< SireFF::FF > > const & ( ::SireFF::ForceFields::*forceFields_function_type )(  ) const;
            forceFields_function_type forceFields_function_value( &::SireFF::ForceFields::forceFields );
            
            ForceFields_exposer.def( 
                "forceFields"
                , forceFields_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::ForceFields::forceFields
        
            typedef ::QVector< SireBase::PropPtr< SireFF::FF > > ( ::SireFF::ForceFields::*forceFields_function_type )( ::SireFF::FFID const & ) const;
            forceFields_function_type forceFields_function_value( &::SireFF::ForceFields::forceFields );
            
            ForceFields_exposer.def( 
                "forceFields"
                , forceFields_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireFF::ForceFields::forceFieldsWithProperty
        
            typedef ::QVector< SireBase::PropPtr< SireFF::FF > > ( ::SireFF::ForceFields::*forceFieldsWithProperty_function_type )( ::QString const & ) const;
            forceFieldsWithProperty_function_type forceFieldsWithProperty_function_value( &::SireFF::ForceFields::forceFieldsWithProperty );
            
            ForceFields_exposer.def( 
                "forceFieldsWithProperty"
                , forceFieldsWithProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::forceFieldsWithProperty
        
            typedef ::QVector< SireBase::PropPtr< SireFF::FF > > ( ::SireFF::ForceFields::*forceFieldsWithProperty_function_type )( ::SireFF::FFID const &,::QString const & ) const;
            forceFieldsWithProperty_function_type forceFieldsWithProperty_function_value( &::SireFF::ForceFields::forceFieldsWithProperty );
            
            ForceFields_exposer.def( 
                "forceFieldsWithProperty"
                , forceFieldsWithProperty_function_value
                , ( bp::arg("ffid"), bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::hasComponent
        
            typedef bool ( ::SireFF::ForceFields::*hasComponent_function_type )( ::SireCAS::Symbol const & ) const;
            hasComponent_function_type hasComponent_function_value( &::SireFF::ForceFields::hasComponent );
            
            ForceFields_exposer.def( 
                "hasComponent"
                , hasComponent_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireFF::ForceFields::hasConstantComponent
        
            typedef bool ( ::SireFF::ForceFields::*hasConstantComponent_function_type )( ::SireCAS::Symbol const & ) const;
            hasConstantComponent_function_type hasConstantComponent_function_value( &::SireFF::ForceFields::hasConstantComponent );
            
            ForceFields_exposer.def( 
                "hasConstantComponent"
                , hasConstantComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::ForceFields::hasEnergyComponent
        
            typedef bool ( ::SireFF::ForceFields::*hasEnergyComponent_function_type )( ::SireCAS::Symbol const & ) const;
            hasEnergyComponent_function_type hasEnergyComponent_function_value( &::SireFF::ForceFields::hasEnergyComponent );
            
            ForceFields_exposer.def( 
                "hasEnergyComponent"
                , hasEnergyComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::ForceFields::isBuiltinProperty
        
            typedef bool ( ::SireFF::ForceFields::*isBuiltinProperty_function_type )( ::QString const & ) const;
            isBuiltinProperty_function_type isBuiltinProperty_function_value( &::SireFF::ForceFields::isBuiltinProperty );
            
            ForceFields_exposer.def( 
                "isBuiltinProperty"
                , isBuiltinProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::isClean
        
            typedef bool ( ::SireFF::ForceFields::*isClean_function_type )(  ) const;
            isClean_function_type isClean_function_value( &::SireFF::ForceFields::isClean );
            
            ForceFields_exposer.def( 
                "isClean"
                , isClean_function_value );
        
        }
        { //::SireFF::ForceFields::isCompoundProperty
        
            typedef bool ( ::SireFF::ForceFields::*isCompoundProperty_function_type )( ::QString const & ) const;
            isCompoundProperty_function_type isCompoundProperty_function_value( &::SireFF::ForceFields::isCompoundProperty );
            
            ForceFields_exposer.def( 
                "isCompoundProperty"
                , isCompoundProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::isConstantComponent
        
            typedef bool ( ::SireFF::ForceFields::*isConstantComponent_function_type )( ::SireCAS::Symbol const & ) const;
            isConstantComponent_function_type isConstantComponent_function_value( &::SireFF::ForceFields::isConstantComponent );
            
            ForceFields_exposer.def( 
                "isConstantComponent"
                , isConstantComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::ForceFields::isDirty
        
            typedef bool ( ::SireFF::ForceFields::*isDirty_function_type )(  ) const;
            isDirty_function_type isDirty_function_value( &::SireFF::ForceFields::isDirty );
            
            ForceFields_exposer.def( 
                "isDirty"
                , isDirty_function_value );
        
        }
        { //::SireFF::ForceFields::isEnergyComponent
        
            typedef bool ( ::SireFF::ForceFields::*isEnergyComponent_function_type )( ::SireCAS::Symbol const & ) const;
            isEnergyComponent_function_type isEnergyComponent_function_value( &::SireFF::ForceFields::isEnergyComponent );
            
            ForceFields_exposer.def( 
                "isEnergyComponent"
                , isEnergyComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::ForceFields::isUserProperty
        
            typedef bool ( ::SireFF::ForceFields::*isUserProperty_function_type )( ::QString const & ) const;
            isUserProperty_function_type isUserProperty_function_value( &::SireFF::ForceFields::isUserProperty );
            
            ForceFields_exposer.def( 
                "isUserProperty"
                , isUserProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::list
        
            typedef ::QVector< SireBase::PropPtr< SireFF::FF > > const & ( ::SireFF::ForceFields::*list_function_type )(  ) const;
            list_function_type list_function_value( &::SireFF::ForceFields::list );
            
            ForceFields_exposer.def( 
                "list"
                , list_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::ForceFields::map
        
            typedef ::QList< SireFF::FFIdx > ( ::SireFF::ForceFields::*map_function_type )( ::SireFF::FFID const & ) const;
            map_function_type map_function_value( &::SireFF::ForceFields::map );
            
            ForceFields_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireFF::ForceFields::map
        
            typedef ::QList< SireFF::FFIdx > ( ::SireFF::ForceFields::*map_function_type )( ::SireFF::FFIdx const & ) const;
            map_function_type map_function_value( &::SireFF::ForceFields::map );
            
            ForceFields_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("ffidx") ) );
        
        }
        { //::SireFF::ForceFields::map
        
            typedef ::QList< SireFF::FFIdx > ( ::SireFF::ForceFields::*map_function_type )( ::SireFF::FFName const & ) const;
            map_function_type map_function_value( &::SireFF::ForceFields::map );
            
            ForceFields_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("ffname") ) );
        
        }
        { //::SireFF::ForceFields::mustNowRecalculateFromScratch
        
            typedef void ( ::SireFF::ForceFields::*mustNowRecalculateFromScratch_function_type )(  ) ;
            mustNowRecalculateFromScratch_function_type mustNowRecalculateFromScratch_function_value( &::SireFF::ForceFields::mustNowRecalculateFromScratch );
            
            ForceFields_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_value );
        
        }
        { //::SireFF::ForceFields::nForceFields
        
            typedef int ( ::SireFF::ForceFields::*nForceFields_function_type )(  ) const;
            nForceFields_function_type nForceFields_function_value( &::SireFF::ForceFields::nForceFields );
            
            ForceFields_exposer.def( 
                "nForceFields"
                , nForceFields_function_value );
        
        }
        { //::SireFF::ForceFields::names
        
            typedef ::QList< SireFF::FFName > ( ::SireFF::ForceFields::*names_function_type )(  ) const;
            names_function_type names_function_value( &::SireFF::ForceFields::names );
            
            ForceFields_exposer.def( 
                "names"
                , names_function_value );
        
        }
        { //::SireFF::ForceFields::needsAccepting
        
            typedef bool ( ::SireFF::ForceFields::*needsAccepting_function_type )(  ) const;
            needsAccepting_function_type needsAccepting_function_value( &::SireFF::ForceFields::needsAccepting );
            
            ForceFields_exposer.def( 
                "needsAccepting"
                , needsAccepting_function_value );
        
        }
        ForceFields_exposer.def( bp::self != bp::self );
        { //::SireFF::ForceFields::operator=
        
            typedef ::SireFF::ForceFields & ( ::SireFF::ForceFields::*assign_function_type )( ::SireFF::ForceFields const & ) ;
            assign_function_type assign_function_value( &::SireFF::ForceFields::operator= );
            
            ForceFields_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ForceFields_exposer.def( bp::self == bp::self );
        { //::SireFF::ForceFields::operator[]
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*__getitem___function_type )( ::SireFF::FFName const & ) const;
            __getitem___function_type __getitem___function_value( &::SireFF::ForceFields::operator[] );
            
            ForceFields_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("ffname") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::operator[]
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*__getitem___function_type )( ::SireFF::FFIdx const & ) const;
            __getitem___function_type __getitem___function_value( &::SireFF::ForceFields::operator[] );
            
            ForceFields_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("ffidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::operator[]
        
            typedef ::SireFF::FF const & ( ::SireFF::ForceFields::*__getitem___function_type )( ::SireFF::FFID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireFF::ForceFields::operator[] );
            
            ForceFields_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::potential
        
            typedef void ( ::SireFF::ForceFields::*potential_function_type )( ::SireFF::PotentialTable &,::SireFF::Probe const &,double ) ;
            potential_function_type potential_function_value( &::SireFF::ForceFields::potential );
            
            ForceFields_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("probe"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireFF::ForceFields::potential
        
            typedef void ( ::SireFF::ForceFields::*potential_function_type )( ::SireFF::PotentialTable &,::SireCAS::Symbol const &,::SireFF::Probe const &,double ) ;
            potential_function_type potential_function_value( &::SireFF::ForceFields::potential );
            
            ForceFields_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("component"), bp::arg("probe"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireFF::ForceFields::potential
        
            typedef void ( ::SireFF::ForceFields::*potential_function_type )( ::SireFF::PotentialTable &,double ) ;
            potential_function_type potential_function_value( &::SireFF::ForceFields::potential );
            
            ForceFields_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireFF::ForceFields::potential
        
            typedef void ( ::SireFF::ForceFields::*potential_function_type )( ::SireFF::PotentialTable &,::SireCAS::Symbol const &,double ) ;
            potential_function_type potential_function_value( &::SireFF::ForceFields::potential );
            
            ForceFields_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("component"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireFF::ForceFields::properties
        
            typedef ::SireBase::Properties ( ::SireFF::ForceFields::*properties_function_type )(  ) const;
            properties_function_type properties_function_value( &::SireFF::ForceFields::properties );
            
            ForceFields_exposer.def( 
                "properties"
                , properties_function_value );
        
        }
        { //::SireFF::ForceFields::properties
        
            typedef ::SireBase::Properties ( ::SireFF::ForceFields::*properties_function_type )( ::SireFF::FFID const & ) const;
            properties_function_type properties_function_value( &::SireFF::ForceFields::properties );
            
            ForceFields_exposer.def( 
                "properties"
                , properties_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireFF::ForceFields::property
        
            typedef ::SireBase::Property const & ( ::SireFF::ForceFields::*property_function_type )( ::QString const & ) const;
            property_function_type property_function_value( &::SireFF::ForceFields::property );
            
            ForceFields_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::property
        
            typedef ::SireBase::Property const & ( ::SireFF::ForceFields::*property_function_type )( ::SireFF::FFID const &,::QString const & ) const;
            property_function_type property_function_value( &::SireFF::ForceFields::property );
            
            ForceFields_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("ffid"), bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::propertyKeys
        
            typedef ::QStringList ( ::SireFF::ForceFields::*propertyKeys_function_type )(  ) const;
            propertyKeys_function_type propertyKeys_function_value( &::SireFF::ForceFields::propertyKeys );
            
            ForceFields_exposer.def( 
                "propertyKeys"
                , propertyKeys_function_value );
        
        }
        { //::SireFF::ForceFields::propertyKeys
        
            typedef ::QStringList ( ::SireFF::ForceFields::*propertyKeys_function_type )( ::SireFF::FFID const & ) const;
            propertyKeys_function_type propertyKeys_function_value( &::SireFF::ForceFields::propertyKeys );
            
            ForceFields_exposer.def( 
                "propertyKeys"
                , propertyKeys_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef void ( ::SireFF::ForceFields::*remove_function_type )( ::SireFF::FFIdx const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("ffidx") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef void ( ::SireFF::ForceFields::*remove_function_type )( ::SireFF::FFName const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("ffname") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef void ( ::SireFF::ForceFields::*remove_function_type )( ::SireFF::FFID const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef bool ( ::SireFF::ForceFields::*remove_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef bool ( ::SireFF::ForceFields::*remove_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef bool ( ::SireFF::ForceFields::*remove_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef bool ( ::SireFF::ForceFields::*remove_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef bool ( ::SireFF::ForceFields::*remove_function_type )( ::SireMol::MolNum,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::remove
        
            typedef bool ( ::SireFF::ForceFields::*remove_function_type )( ::QSet< SireMol::MolNum > const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireFF::ForceFields::remove );
            
            ForceFields_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::removeAll
        
            typedef bool ( ::SireFF::ForceFields::*removeAll_function_type )( ::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::ForceFields::removeAll );
            
            ForceFields_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::removeAll
        
            typedef bool ( ::SireFF::ForceFields::*removeAll_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::ForceFields::removeAll );
            
            ForceFields_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::removeAll
        
            typedef bool ( ::SireFF::ForceFields::*removeAll_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::ForceFields::removeAll );
            
            ForceFields_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::removeAll
        
            typedef bool ( ::SireFF::ForceFields::*removeAll_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::ForceFields::removeAll );
            
            ForceFields_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::removeAll
        
            typedef bool ( ::SireFF::ForceFields::*removeAll_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireFF::ForceFields::removeAll );
            
            ForceFields_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireFF::ForceFields::removeAllForceFields
        
            typedef void ( ::SireFF::ForceFields::*removeAllForceFields_function_type )(  ) ;
            removeAllForceFields_function_type removeAllForceFields_function_value( &::SireFF::ForceFields::removeAllForceFields );
            
            ForceFields_exposer.def( 
                "removeAllForceFields"
                , removeAllForceFields_function_value );
        
        }
        { //::SireFF::ForceFields::removeProperty
        
            typedef void ( ::SireFF::ForceFields::*removeProperty_function_type )( ::QString const & ) ;
            removeProperty_function_type removeProperty_function_value( &::SireFF::ForceFields::removeProperty );
            
            ForceFields_exposer.def( 
                "removeProperty"
                , removeProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::ForceFields::setComponent
        
            typedef void ( ::SireFF::ForceFields::*setComponent_function_type )( ::SireCAS::Symbol const &,double ) ;
            setComponent_function_type setComponent_function_value( &::SireFF::ForceFields::setComponent );
            
            ForceFields_exposer.def( 
                "setComponent"
                , setComponent_function_value
                , ( bp::arg("symbol"), bp::arg("value") ) );
        
        }
        { //::SireFF::ForceFields::setComponent
        
            typedef void ( ::SireFF::ForceFields::*setComponent_function_type )( ::SireCAS::Symbol const &,::SireCAS::Expression const & ) ;
            setComponent_function_type setComponent_function_value( &::SireFF::ForceFields::setComponent );
            
            ForceFields_exposer.def( 
                "setComponent"
                , setComponent_function_value
                , ( bp::arg("symbol"), bp::arg("expression") ) );
        
        }
        { //::SireFF::ForceFields::setConstantComponent
        
            typedef void ( ::SireFF::ForceFields::*setConstantComponent_function_type )( ::SireCAS::Symbol const &,double ) ;
            setConstantComponent_function_type setConstantComponent_function_value( &::SireFF::ForceFields::setConstantComponent );
            
            ForceFields_exposer.def( 
                "setConstantComponent"
                , setConstantComponent_function_value
                , ( bp::arg("symbol"), bp::arg("value") ) );
        
        }
        { //::SireFF::ForceFields::setConstantComponent
        
            typedef void ( ::SireFF::ForceFields::*setConstantComponent_function_type )( ::SireCAS::Symbol const &,::SireCAS::Expression const & ) ;
            setConstantComponent_function_type setConstantComponent_function_value( &::SireFF::ForceFields::setConstantComponent );
            
            ForceFields_exposer.def( 
                "setConstantComponent"
                , setConstantComponent_function_value
                , ( bp::arg("symbol"), bp::arg("expression") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molview"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::ViewsOfMol const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molviews"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::Molecules const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molecules"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molgroup"), bp::arg("map") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeView const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molview") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::ViewsOfMol const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molviews") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::Molecules const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molecules") ) );
        
        }
        { //::SireFF::ForceFields::setContents
        
            typedef void ( ::SireFF::ForceFields::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeGroup const & ) ;
            setContents_function_type setContents_function_value( &::SireFF::ForceFields::setContents );
            
            ForceFields_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molgroup") ) );
        
        }
        { //::SireFF::ForceFields::setEnergyComponent
        
            typedef void ( ::SireFF::ForceFields::*setEnergyComponent_function_type )( ::SireCAS::Symbol const &,::SireCAS::Expression const & ) ;
            setEnergyComponent_function_type setEnergyComponent_function_value( &::SireFF::ForceFields::setEnergyComponent );
            
            ForceFields_exposer.def( 
                "setEnergyComponent"
                , setEnergyComponent_function_value
                , ( bp::arg("symbol"), bp::arg("expression") ) );
        
        }
        { //::SireFF::ForceFields::setProperty
        
            typedef void ( ::SireFF::ForceFields::*setProperty_function_type )( ::QString const &,::SireBase::Property const & ) ;
            setProperty_function_type setProperty_function_value( &::SireFF::ForceFields::setProperty );
            
            ForceFields_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireFF::ForceFields::setProperty
        
            typedef void ( ::SireFF::ForceFields::*setProperty_function_type )( ::SireFF::FFID const &,::QString const &,::SireBase::Property const & ) ;
            setProperty_function_type setProperty_function_value( &::SireFF::ForceFields::setProperty );
            
            ForceFields_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("ffid"), bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireFF::ForceFields::toString
        
            typedef ::QString ( ::SireFF::ForceFields::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireFF::ForceFields::toString );
            
            ForceFields_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireFF::ForceFields::totalComponent
        
            typedef ::SireCAS::Symbol const & ( *totalComponent_function_type )(  );
            totalComponent_function_type totalComponent_function_value( &::SireFF::ForceFields::totalComponent );
            
            ForceFields_exposer.def( 
                "totalComponent"
                , totalComponent_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireFF::ForceFields::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireFF::ForceFields::typeName );
            
            ForceFields_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireFF::ForceFields::update
        
            typedef void ( ::SireFF::ForceFields::*update_function_type )( ::SireMol::MoleculeData const &,bool ) ;
            update_function_type update_function_value( &::SireFF::ForceFields::update );
            
            ForceFields_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata"), bp::arg("auto_commit")=(bool)(true) ) );
        
        }
        { //::SireFF::ForceFields::update
        
            typedef void ( ::SireFF::ForceFields::*update_function_type )( ::SireMol::Molecules const &,bool ) ;
            update_function_type update_function_value( &::SireFF::ForceFields::update );
            
            ForceFields_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molecules"), bp::arg("auto_commit")=(bool)(true) ) );
        
        }
        { //::SireFF::ForceFields::update
        
            typedef void ( ::SireFF::ForceFields::*update_function_type )( ::SireMol::MoleculeGroup const &,bool ) ;
            update_function_type update_function_value( &::SireFF::ForceFields::update );
            
            ForceFields_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molgroup"), bp::arg("auto_commit")=(bool)(true) ) );
        
        }
        { //::SireFF::ForceFields::userProperties
        
            typedef ::SireBase::Properties ( ::SireFF::ForceFields::*userProperties_function_type )(  ) const;
            userProperties_function_type userProperties_function_value( &::SireFF::ForceFields::userProperties );
            
            ForceFields_exposer.def( 
                "userProperties"
                , userProperties_function_value );
        
        }
        { //::SireFF::ForceFields::userProperty
        
            typedef ::SireBase::Property const & ( ::SireFF::ForceFields::*userProperty_function_type )( ::QString const & ) const;
            userProperty_function_type userProperty_function_value( &::SireFF::ForceFields::userProperty );
            
            ForceFields_exposer.def( 
                "userProperty"
                , userProperty_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        ForceFields_exposer.staticmethod( "totalComponent" );
        ForceFields_exposer.staticmethod( "typeName" );
        ForceFields_exposer.def( "__copy__", &__copy__);
        ForceFields_exposer.def( "__deepcopy__", &__copy__);
        ForceFields_exposer.def( "clone", &__copy__);
        ForceFields_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireFF::ForceFields >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ForceFields_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireFF::ForceFields >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ForceFields_exposer.def( "__str__", &__str__< ::SireFF::ForceFields > );
        ForceFields_exposer.def( "__repr__", &__str__< ::SireFF::ForceFields > );
        ForceFields_exposer.def( "__len__", &__len_count< ::SireFF::ForceFields > );
    }

}
