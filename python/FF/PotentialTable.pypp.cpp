// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PotentialTable.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMol/atomselection.h"

#include "SireMol/errors.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleculeview.h"

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "potentialtable.h"

#include "potentialtable.h"

SireFF::PotentialTable __copy__(const SireFF::PotentialTable &other){ return SireFF::PotentialTable(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireFF::PotentialTable&){ return "SireFF::PotentialTable";}

void register_PotentialTable_class(){

    { //::SireFF::PotentialTable
        typedef bp::class_< SireFF::PotentialTable > PotentialTable_exposer_t;
        PotentialTable_exposer_t PotentialTable_exposer = PotentialTable_exposer_t( "PotentialTable", bp::init< >() );
        bp::scope PotentialTable_scope( PotentialTable_exposer );
        PotentialTable_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("molgroup") )) );
        PotentialTable_exposer.def( bp::init< SireVol::Grid const & >(( bp::arg("grid") )) );
        PotentialTable_exposer.def( bp::init< QVector< SireBase::PropPtr< SireVol::Grid > > const & >(( bp::arg("grids") )) );
        PotentialTable_exposer.def( bp::init< SireMol::MoleculeGroup const &, SireVol::Grid const & >(( bp::arg("molgroup"), bp::arg("grid") )) );
        PotentialTable_exposer.def( bp::init< SireMol::MoleculeGroup const &, QVector< SireBase::PropPtr< SireVol::Grid > > const & >(( bp::arg("molgroup"), bp::arg("grids") )) );
        PotentialTable_exposer.def( bp::init< SireFF::PotentialTable const & >(( bp::arg("other") )) );
        { //::SireFF::PotentialTable::add
        
            typedef void ( ::SireFF::PotentialTable::*add_function_type )( ::SireFF::PotentialTable const & ) ;
            add_function_type add_function_value( &::SireFF::PotentialTable::add );
            
            PotentialTable_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireFF::PotentialTable::add
        
            typedef void ( ::SireFF::PotentialTable::*add_function_type )( ::SireUnits::Dimension::MolarEnergy const & ) ;
            add_function_type add_function_value( &::SireFF::PotentialTable::add );
            
            PotentialTable_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("potential") ) );
        
        }
        { //::SireFF::PotentialTable::assertContainsTableFor
        
            typedef void ( ::SireFF::PotentialTable::*assertContainsTableFor_function_type )( ::SireMol::MolNum ) const;
            assertContainsTableFor_function_type assertContainsTableFor_function_value( &::SireFF::PotentialTable::assertContainsTableFor );
            
            PotentialTable_exposer.def( 
                "assertContainsTableFor"
                , assertContainsTableFor_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireFF::PotentialTable::assertContainsTableFor
        
            typedef void ( ::SireFF::PotentialTable::*assertContainsTableFor_function_type )( ::SireVol::Grid const & ) const;
            assertContainsTableFor_function_type assertContainsTableFor_function_value( &::SireFF::PotentialTable::assertContainsTableFor );
            
            PotentialTable_exposer.def( 
                "assertContainsTableFor"
                , assertContainsTableFor_function_value
                , ( bp::arg("grid") ) );
        
        }
        { //::SireFF::PotentialTable::constGetTable
        
            typedef ::SireFF::MolPotentialTable const & ( ::SireFF::PotentialTable::*constGetTable_function_type )( ::SireMol::MolNum ) const;
            constGetTable_function_type constGetTable_function_value( &::SireFF::PotentialTable::constGetTable );
            
            PotentialTable_exposer.def( 
                "constGetTable"
                , constGetTable_function_value
                , ( bp::arg("molnum") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::PotentialTable::constGetTable
        
            typedef ::SireFF::GridPotentialTable const & ( ::SireFF::PotentialTable::*constGetTable_function_type )( ::SireVol::Grid const & ) const;
            constGetTable_function_type constGetTable_function_value( &::SireFF::PotentialTable::constGetTable );
            
            PotentialTable_exposer.def( 
                "constGetTable"
                , constGetTable_function_value
                , ( bp::arg("grid") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::PotentialTable::contains
        
            typedef bool ( ::SireFF::PotentialTable::*contains_function_type )( ::SireMol::MolNum ) const;
            contains_function_type contains_function_value( &::SireFF::PotentialTable::contains );
            
            PotentialTable_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireFF::PotentialTable::contains
        
            typedef bool ( ::SireFF::PotentialTable::*contains_function_type )( ::SireVol::Grid const & ) const;
            contains_function_type contains_function_value( &::SireFF::PotentialTable::contains );
            
            PotentialTable_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("grid") ) );
        
        }
        { //::SireFF::PotentialTable::divide
        
            typedef void ( ::SireFF::PotentialTable::*divide_function_type )( double ) ;
            divide_function_type divide_function_value( &::SireFF::PotentialTable::divide );
            
            PotentialTable_exposer.def( 
                "divide"
                , divide_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireFF::PotentialTable::getTable
        
            typedef ::SireFF::MolPotentialTable const & ( ::SireFF::PotentialTable::*getTable_function_type )( ::SireMol::MolNum ) const;
            getTable_function_type getTable_function_value( &::SireFF::PotentialTable::getTable );
            
            PotentialTable_exposer.def( 
                "getTable"
                , getTable_function_value
                , ( bp::arg("molnum") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::PotentialTable::getTable
        
            typedef ::SireFF::GridPotentialTable const & ( ::SireFF::PotentialTable::*getTable_function_type )( ::SireVol::Grid const & ) const;
            getTable_function_type getTable_function_value( &::SireFF::PotentialTable::getTable );
            
            PotentialTable_exposer.def( 
                "getTable"
                , getTable_function_value
                , ( bp::arg("grid") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::PotentialTable::index
        
            typedef ::QHash< SireMol::MolNum, int > const & ( ::SireFF::PotentialTable::*index_function_type )(  ) const;
            index_function_type index_function_value( &::SireFF::PotentialTable::index );
            
            PotentialTable_exposer.def( 
                "index"
                , index_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::PotentialTable::indexOf
        
            typedef int ( ::SireFF::PotentialTable::*indexOf_function_type )( ::SireMol::MolNum ) const;
            indexOf_function_type indexOf_function_value( &::SireFF::PotentialTable::indexOf );
            
            PotentialTable_exposer.def( 
                "indexOf"
                , indexOf_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireFF::PotentialTable::initialiseTable
        
            typedef void ( ::SireFF::PotentialTable::*initialiseTable_function_type )( ::SireMol::MolNum ) ;
            initialiseTable_function_type initialiseTable_function_value( &::SireFF::PotentialTable::initialiseTable );
            
            PotentialTable_exposer.def( 
                "initialiseTable"
                , initialiseTable_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireFF::PotentialTable::initialiseTable
        
            typedef void ( ::SireFF::PotentialTable::*initialiseTable_function_type )( ::SireVol::Grid const & ) ;
            initialiseTable_function_type initialiseTable_function_value( &::SireFF::PotentialTable::initialiseTable );
            
            PotentialTable_exposer.def( 
                "initialiseTable"
                , initialiseTable_function_value
                , ( bp::arg("grid") ) );
        
        }
        { //::SireFF::PotentialTable::initialiseTables
        
            typedef void ( ::SireFF::PotentialTable::*initialiseTables_function_type )(  ) ;
            initialiseTables_function_type initialiseTables_function_value( &::SireFF::PotentialTable::initialiseTables );
            
            PotentialTable_exposer.def( 
                "initialiseTables"
                , initialiseTables_function_value );
        
        }
        { //::SireFF::PotentialTable::isEmpty
        
            typedef bool ( ::SireFF::PotentialTable::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireFF::PotentialTable::isEmpty );
            
            PotentialTable_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireFF::PotentialTable::molNums
        
            typedef ::QList< SireMol::MolNum > ( ::SireFF::PotentialTable::*molNums_function_type )(  ) const;
            molNums_function_type molNums_function_value( &::SireFF::PotentialTable::molNums );
            
            PotentialTable_exposer.def( 
                "molNums"
                , molNums_function_value );
        
        }
        { //::SireFF::PotentialTable::multiply
        
            typedef void ( ::SireFF::PotentialTable::*multiply_function_type )( double ) ;
            multiply_function_type multiply_function_value( &::SireFF::PotentialTable::multiply );
            
            PotentialTable_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireFF::PotentialTable::nGrids
        
            typedef int ( ::SireFF::PotentialTable::*nGrids_function_type )(  ) const;
            nGrids_function_type nGrids_function_value( &::SireFF::PotentialTable::nGrids );
            
            PotentialTable_exposer.def( 
                "nGrids"
                , nGrids_function_value );
        
        }
        { //::SireFF::PotentialTable::nMolecules
        
            typedef int ( ::SireFF::PotentialTable::*nMolecules_function_type )(  ) const;
            nMolecules_function_type nMolecules_function_value( &::SireFF::PotentialTable::nMolecules );
            
            PotentialTable_exposer.def( 
                "nMolecules"
                , nMolecules_function_value );
        
        }
        PotentialTable_exposer.def( bp::self != bp::self );
        PotentialTable_exposer.def( bp::self * bp::other< double >() );
        PotentialTable_exposer.def( bp::self + bp::self );
        PotentialTable_exposer.def( bp::self + bp::other< SireUnits::Dimension::PhysUnit< 1, 2, -2, 0, 0, -1, 0 > >() );
        PotentialTable_exposer.def( bp::self - bp::self );
        PotentialTable_exposer.def( bp::self - bp::other< SireUnits::Dimension::PhysUnit< 1, 2, -2, 0, 0, -1, 0 > >() );
        PotentialTable_exposer.def( -bp::self );
        PotentialTable_exposer.def( bp::self / bp::other< double >() );
        { //::SireFF::PotentialTable::operator=
        
            typedef ::SireFF::PotentialTable & ( ::SireFF::PotentialTable::*assign_function_type )( ::SireFF::PotentialTable const & ) ;
            assign_function_type assign_function_value( &::SireFF::PotentialTable::operator= );
            
            PotentialTable_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::SireFF::PotentialTable::operator=
        
            typedef ::SireFF::PotentialTable & ( ::SireFF::PotentialTable::*assign_function_type )( ::SireUnits::Dimension::MolarEnergy const & ) ;
            assign_function_type assign_function_value( &::SireFF::PotentialTable::operator= );
            
            PotentialTable_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("potential") )
                , bp::return_self< >() );
        
        }
        PotentialTable_exposer.def( bp::self == bp::self );
        { //::SireFF::PotentialTable::setAll
        
            typedef void ( ::SireFF::PotentialTable::*setAll_function_type )( ::SireUnits::Dimension::MolarEnergy const & ) ;
            setAll_function_type setAll_function_value( &::SireFF::PotentialTable::setAll );
            
            PotentialTable_exposer.def( 
                "setAll"
                , setAll_function_value
                , ( bp::arg("potential") ) );
        
        }
        { //::SireFF::PotentialTable::subtract
        
            typedef void ( ::SireFF::PotentialTable::*subtract_function_type )( ::SireFF::PotentialTable const & ) ;
            subtract_function_type subtract_function_value( &::SireFF::PotentialTable::subtract );
            
            PotentialTable_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireFF::PotentialTable::subtract
        
            typedef void ( ::SireFF::PotentialTable::*subtract_function_type )( ::SireUnits::Dimension::MolarEnergy const & ) ;
            subtract_function_type subtract_function_value( &::SireFF::PotentialTable::subtract );
            
            PotentialTable_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("potential") ) );
        
        }
        { //::SireFF::PotentialTable::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireFF::PotentialTable::typeName );
            
            PotentialTable_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireFF::PotentialTable::what
        
            typedef char const * ( ::SireFF::PotentialTable::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireFF::PotentialTable::what );
            
            PotentialTable_exposer.def( 
                "what"
                , what_function_value );
        
        }
        PotentialTable_exposer.staticmethod( "typeName" );
        PotentialTable_exposer.def( "__copy__", &__copy__);
        PotentialTable_exposer.def( "__deepcopy__", &__copy__);
        PotentialTable_exposer.def( "clone", &__copy__);
        PotentialTable_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireFF::PotentialTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PotentialTable_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireFF::PotentialTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PotentialTable_exposer.def( "__str__", &pvt_get_name);
        PotentialTable_exposer.def( "__repr__", &pvt_get_name);
    }

}
