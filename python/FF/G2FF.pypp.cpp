// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "G2FF.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/errors.h"

#include "SireMol/mgname.h"

#include "SireMol/mgnum.h"

#include "SireMol/molecule.h"

#include "SireMol/molname.h"

#include "SireMol/molnum.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "g2ff.h"

#include <QDebug>

#include "g2ff.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_G2FF_class(){

    { //::SireFF::G2FF
        typedef bp::class_< SireFF::G2FF, bp::bases< SireFF::FF, SireMol::MolGroupsBase, SireBase::Property >, boost::noncopyable > G2FF_exposer_t;
        G2FF_exposer_t G2FF_exposer = G2FF_exposer_t( "G2FF", bp::no_init );
        bp::scope G2FF_scope( G2FF_exposer );
        { //::SireFF::G2FF::assertContains
        
            typedef void ( ::SireFF::G2FF::*assertContains_function_type )( ::SireMol::MGNum ) const;
            assertContains_function_type assertContains_function_value( &::SireFF::G2FF::assertContains );
            
            G2FF_exposer.def( 
                "assertContains"
                , assertContains_function_value
                , ( bp::arg("mgnum") ) );
        
        }
        { //::SireFF::G2FF::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireFF::G2FF::*at_function_type )( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireFF::G2FF::at );
            
            G2FF_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        G2FF_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireFF::G2FF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        G2FF_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireFF::G2FF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        G2FF_exposer.def( "__str__", &__str__< ::SireFF::G2FF > );
        G2FF_exposer.def( "__repr__", &__str__< ::SireFF::G2FF > );
    }

}
