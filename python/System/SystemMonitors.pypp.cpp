// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "SystemMonitors.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/errors.h"

#include "monitoridx.h"

#include "monitorname.h"

#include "system.h"

#include "systemmonitors.h"

#include "tostring.h"

#include "systemmonitors.h"

SireSystem::SystemMonitors __copy__(const SireSystem::SystemMonitors &other){ return SireSystem::SystemMonitors(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireSystem::SystemMonitors&){ return "SireSystem::SystemMonitors";}

void register_SystemMonitors_class(){

    { //::SireSystem::SystemMonitors
        typedef bp::class_< SireSystem::SystemMonitors > SystemMonitors_exposer_t;
        SystemMonitors_exposer_t SystemMonitors_exposer = SystemMonitors_exposer_t( "SystemMonitors", bp::init< >() );
        bp::scope SystemMonitors_scope( SystemMonitors_exposer );
        SystemMonitors_exposer.def( bp::init< SireSystem::SystemMonitors const & >(( bp::arg("other") )) );
        { //::SireSystem::SystemMonitors::add
        
            typedef void ( ::SireSystem::SystemMonitors::*add_function_type )( ::QString const &,::SireSystem::SystemMonitor const &,int ) ;
            add_function_type add_function_value( &::SireSystem::SystemMonitors::add );
            
            SystemMonitors_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("name"), bp::arg("monitor"), bp::arg("frequency")=(int)(1) ) );
        
        }
        { //::SireSystem::SystemMonitors::add
        
            typedef void ( ::SireSystem::SystemMonitors::*add_function_type )( ::SireSystem::SystemMonitors const & ) ;
            add_function_type add_function_value( &::SireSystem::SystemMonitors::add );
            
            SystemMonitors_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireSystem::SystemMonitors::add
        
            typedef void ( ::SireSystem::SystemMonitors::*add_function_type )( ::SireSystem::SystemMonitors const &,int ) ;
            add_function_type add_function_value( &::SireSystem::SystemMonitors::add );
            
            SystemMonitors_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("other"), bp::arg("frequency") ) );
        
        }
        { //::SireSystem::SystemMonitors::at
        
            typedef ::SireSystem::SystemMonitor const & ( ::SireSystem::SystemMonitors::*at_function_type )( ::SireSystem::MonitorID const & ) const;
            at_function_type at_function_value( &::SireSystem::SystemMonitors::at );
            
            SystemMonitors_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("monid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::SystemMonitors::clearStatistics
        
            typedef void ( ::SireSystem::SystemMonitors::*clearStatistics_function_type )(  ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireSystem::SystemMonitors::clearStatistics );
            
            SystemMonitors_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value );
        
        }
        { //::SireSystem::SystemMonitors::clearStatistics
        
            typedef void ( ::SireSystem::SystemMonitors::*clearStatistics_function_type )( ::SireSystem::MonitorID const & ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireSystem::SystemMonitors::clearStatistics );
            
            SystemMonitors_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::SystemMonitors::count
        
            typedef int ( ::SireSystem::SystemMonitors::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireSystem::SystemMonitors::count );
            
            SystemMonitors_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireSystem::SystemMonitors::getFrequency
        
            typedef int ( ::SireSystem::SystemMonitors::*getFrequency_function_type )( ::SireSystem::MonitorID const & ) const;
            getFrequency_function_type getFrequency_function_value( &::SireSystem::SystemMonitors::getFrequency );
            
            SystemMonitors_exposer.def( 
                "getFrequency"
                , getFrequency_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::SystemMonitors::isEmpty
        
            typedef bool ( ::SireSystem::SystemMonitors::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireSystem::SystemMonitors::isEmpty );
            
            SystemMonitors_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireSystem::SystemMonitors::list
        
            typedef ::QList< SireBase::PropPtr< SireSystem::SystemMonitor > > ( ::SireSystem::SystemMonitors::*list_function_type )(  ) const;
            list_function_type list_function_value( &::SireSystem::SystemMonitors::list );
            
            SystemMonitors_exposer.def( 
                "list"
                , list_function_value );
        
        }
        { //::SireSystem::SystemMonitors::map
        
            typedef ::QList< SireSystem::MonitorName > ( ::SireSystem::SystemMonitors::*map_function_type )( ::SireSystem::MonitorName const & ) const;
            map_function_type map_function_value( &::SireSystem::SystemMonitors::map );
            
            SystemMonitors_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("monname") ) );
        
        }
        { //::SireSystem::SystemMonitors::map
        
            typedef ::QList< SireSystem::MonitorName > ( ::SireSystem::SystemMonitors::*map_function_type )( ::SireSystem::MonitorIdx const & ) const;
            map_function_type map_function_value( &::SireSystem::SystemMonitors::map );
            
            SystemMonitors_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("monidx") ) );
        
        }
        { //::SireSystem::SystemMonitors::map
        
            typedef ::QList< SireSystem::MonitorName > ( ::SireSystem::SystemMonitors::*map_function_type )( ::SireSystem::MonitorID const & ) const;
            map_function_type map_function_value( &::SireSystem::SystemMonitors::map );
            
            SystemMonitors_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::SystemMonitors::monitor
        
            typedef ::SireSystem::SystemMonitor const & ( ::SireSystem::SystemMonitors::*monitor_function_type )( ::SireSystem::MonitorID const & ) const;
            monitor_function_type monitor_function_value( &::SireSystem::SystemMonitors::monitor );
            
            SystemMonitors_exposer.def( 
                "monitor"
                , monitor_function_value
                , ( bp::arg("monid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::SystemMonitors::monitor
        
            typedef void ( ::SireSystem::SystemMonitors::*monitor_function_type )( ::SireSystem::System & ) ;
            monitor_function_type monitor_function_value( &::SireSystem::SystemMonitors::monitor );
            
            SystemMonitors_exposer.def( 
                "monitor"
                , monitor_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::SystemMonitors::monitorName
        
            typedef ::SireSystem::MonitorName ( ::SireSystem::SystemMonitors::*monitorName_function_type )( ::SireSystem::MonitorID const & ) const;
            monitorName_function_type monitorName_function_value( &::SireSystem::SystemMonitors::monitorName );
            
            SystemMonitors_exposer.def( 
                "monitorName"
                , monitorName_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::SystemMonitors::monitorNames
        
            typedef ::QList< SireSystem::MonitorName > ( ::SireSystem::SystemMonitors::*monitorNames_function_type )(  ) const;
            monitorNames_function_type monitorNames_function_value( &::SireSystem::SystemMonitors::monitorNames );
            
            SystemMonitors_exposer.def( 
                "monitorNames"
                , monitorNames_function_value );
        
        }
        { //::SireSystem::SystemMonitors::monitors
        
            typedef ::QList< SireBase::PropPtr< SireSystem::SystemMonitor > > ( ::SireSystem::SystemMonitors::*monitors_function_type )( ::SireSystem::MonitorID const & ) const;
            monitors_function_type monitors_function_value( &::SireSystem::SystemMonitors::monitors );
            
            SystemMonitors_exposer.def( 
                "monitors"
                , monitors_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::SystemMonitors::monitors
        
            typedef ::QList< SireBase::PropPtr< SireSystem::SystemMonitor > > ( ::SireSystem::SystemMonitors::*monitors_function_type )(  ) const;
            monitors_function_type monitors_function_value( &::SireSystem::SystemMonitors::monitors );
            
            SystemMonitors_exposer.def( 
                "monitors"
                , monitors_function_value );
        
        }
        { //::SireSystem::SystemMonitors::nMonitors
        
            typedef int ( ::SireSystem::SystemMonitors::*nMonitors_function_type )(  ) const;
            nMonitors_function_type nMonitors_function_value( &::SireSystem::SystemMonitors::nMonitors );
            
            SystemMonitors_exposer.def( 
                "nMonitors"
                , nMonitors_function_value );
        
        }
        { //::SireSystem::SystemMonitors::names
        
            typedef ::QList< SireSystem::MonitorName > ( ::SireSystem::SystemMonitors::*names_function_type )(  ) const;
            names_function_type names_function_value( &::SireSystem::SystemMonitors::names );
            
            SystemMonitors_exposer.def( 
                "names"
                , names_function_value );
        
        }
        SystemMonitors_exposer.def( bp::self != bp::self );
        { //::SireSystem::SystemMonitors::operator=
        
            typedef ::SireSystem::SystemMonitors & ( ::SireSystem::SystemMonitors::*assign_function_type )( ::SireSystem::SystemMonitors const & ) ;
            assign_function_type assign_function_value( &::SireSystem::SystemMonitors::operator= );
            
            SystemMonitors_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SystemMonitors_exposer.def( bp::self == bp::self );
        { //::SireSystem::SystemMonitors::operator[]
        
            typedef ::SireSystem::SystemMonitor const & ( ::SireSystem::SystemMonitors::*__getitem___function_type )( ::SireSystem::MonitorID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::SystemMonitors::operator[] );
            
            SystemMonitors_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("monid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::SystemMonitors::remove
        
            typedef void ( ::SireSystem::SystemMonitors::*remove_function_type )( ::SireSystem::MonitorID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::SystemMonitors::remove );
            
            SystemMonitors_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::SystemMonitors::removeAll
        
            typedef void ( ::SireSystem::SystemMonitors::*removeAll_function_type )(  ) ;
            removeAll_function_type removeAll_function_value( &::SireSystem::SystemMonitors::removeAll );
            
            SystemMonitors_exposer.def( 
                "removeAll"
                , removeAll_function_value );
        
        }
        { //::SireSystem::SystemMonitors::setAllFrequency
        
            typedef void ( ::SireSystem::SystemMonitors::*setAllFrequency_function_type )( int ) ;
            setAllFrequency_function_type setAllFrequency_function_value( &::SireSystem::SystemMonitors::setAllFrequency );
            
            SystemMonitors_exposer.def( 
                "setAllFrequency"
                , setAllFrequency_function_value
                , ( bp::arg("frequency") ) );
        
        }
        { //::SireSystem::SystemMonitors::setFrequency
        
            typedef void ( ::SireSystem::SystemMonitors::*setFrequency_function_type )( ::SireSystem::MonitorID const &,int ) ;
            setFrequency_function_type setFrequency_function_value( &::SireSystem::SystemMonitors::setFrequency );
            
            SystemMonitors_exposer.def( 
                "setFrequency"
                , setFrequency_function_value
                , ( bp::arg("monid"), bp::arg("frequency") ) );
        
        }
        { //::SireSystem::SystemMonitors::size
        
            typedef int ( ::SireSystem::SystemMonitors::*size_function_type )(  ) const;
            size_function_type size_function_value( &::SireSystem::SystemMonitors::size );
            
            SystemMonitors_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::SireSystem::SystemMonitors::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::SystemMonitors::typeName );
            
            SystemMonitors_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::SystemMonitors::what
        
            typedef char const * ( ::SireSystem::SystemMonitors::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireSystem::SystemMonitors::what );
            
            SystemMonitors_exposer.def( 
                "what"
                , what_function_value );
        
        }
        SystemMonitors_exposer.staticmethod( "typeName" );
        SystemMonitors_exposer.def( "__copy__", &__copy__);
        SystemMonitors_exposer.def( "__deepcopy__", &__copy__);
        SystemMonitors_exposer.def( "clone", &__copy__);
        SystemMonitors_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::SystemMonitors >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SystemMonitors_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::SystemMonitors >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SystemMonitors_exposer.def( "__str__", &pvt_get_name);
        SystemMonitors_exposer.def( "__repr__", &pvt_get_name);
    }

}
