// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "FreeEnergyMonitor.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMM/atomljs.h"

#include "SireMM/ljpair.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/mgname.h"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/freeenergymonitor.h"

#include "SireSystem/system.h"

#include "SireUnits/units.h"

#include "freeenergymonitor.h"

#include <QTime>

#include "freeenergymonitor.h"

SireSystem::FreeEnergyMonitor __copy__(const SireSystem::FreeEnergyMonitor &other){ return SireSystem::FreeEnergyMonitor(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_FreeEnergyMonitor_class(){

    { //::SireSystem::FreeEnergyMonitor
        typedef bp::class_< SireSystem::FreeEnergyMonitor, bp::bases< SireSystem::SystemMonitor, SireBase::Property > > FreeEnergyMonitor_exposer_t;
        FreeEnergyMonitor_exposer_t FreeEnergyMonitor_exposer = FreeEnergyMonitor_exposer_t( "FreeEnergyMonitor", bp::init< >() );
        bp::scope FreeEnergyMonitor_scope( FreeEnergyMonitor_exposer );
        FreeEnergyMonitor_exposer.def( bp::init< SireSystem::AssignerGroup const &, SireSystem::AssignerGroup const &, SireSystem::AssignerGroup const & >(( bp::arg("reference"), bp::arg("groupA"), bp::arg("groupB") )) );
        FreeEnergyMonitor_exposer.def( bp::init< SireSystem::FreeEnergyMonitor const & >(( bp::arg("other") )) );
        { //::SireSystem::FreeEnergyMonitor::binWidth
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireSystem::FreeEnergyMonitor::*binWidth_function_type )(  ) const;
            binWidth_function_type binWidth_function_value( &::SireSystem::FreeEnergyMonitor::binWidth );
            
            FreeEnergyMonitor_exposer.def( 
                "binWidth"
                , binWidth_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::clearStatistics
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*clearStatistics_function_type )(  ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireSystem::FreeEnergyMonitor::clearStatistics );
            
            FreeEnergyMonitor_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::conserveMemory
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*conserveMemory_function_type )( ::SireSystem::FreeEnergyMonitor const & ) ;
            conserveMemory_function_type conserveMemory_function_value( &::SireSystem::FreeEnergyMonitor::conserveMemory );
            
            FreeEnergyMonitor_exposer.def( 
                "conserveMemory"
                , conserveMemory_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::coulombFreeEnergies
        
            typedef ::QVector< SireMaths::FreeEnergyAverage > ( ::SireSystem::FreeEnergyMonitor::*coulombFreeEnergies_function_type )(  ) const;
            coulombFreeEnergies_function_type coulombFreeEnergies_function_value( &::SireSystem::FreeEnergyMonitor::coulombFreeEnergies );
            
            FreeEnergyMonitor_exposer.def( 
                "coulombFreeEnergies"
                , coulombFreeEnergies_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::coulombPower
        
            typedef int ( ::SireSystem::FreeEnergyMonitor::*coulombPower_function_type )(  ) const;
            coulombPower_function_type coulombPower_function_value( &::SireSystem::FreeEnergyMonitor::coulombPower );
            
            FreeEnergyMonitor_exposer.def( 
                "coulombPower"
                , coulombPower_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::deltaLambda
        
            typedef double ( ::SireSystem::FreeEnergyMonitor::*deltaLambda_function_type )(  ) const;
            deltaLambda_function_type deltaLambda_function_value( &::SireSystem::FreeEnergyMonitor::deltaLambda );
            
            FreeEnergyMonitor_exposer.def( 
                "deltaLambda"
                , deltaLambda_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::freeEnergies
        
            typedef ::QVector< SireMaths::FreeEnergyAverage > ( ::SireSystem::FreeEnergyMonitor::*freeEnergies_function_type )(  ) const;
            freeEnergies_function_type freeEnergies_function_value( &::SireSystem::FreeEnergyMonitor::freeEnergies );
            
            FreeEnergyMonitor_exposer.def( 
                "freeEnergies"
                , freeEnergies_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::groupA
        
            typedef ::SireSystem::AssignerGroup const & ( ::SireSystem::FreeEnergyMonitor::*groupA_function_type )(  ) const;
            groupA_function_type groupA_function_value( &::SireSystem::FreeEnergyMonitor::groupA );
            
            FreeEnergyMonitor_exposer.def( 
                "groupA"
                , groupA_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::FreeEnergyMonitor::groupB
        
            typedef ::SireSystem::AssignerGroup const & ( ::SireSystem::FreeEnergyMonitor::*groupB_function_type )(  ) const;
            groupB_function_type groupB_function_value( &::SireSystem::FreeEnergyMonitor::groupB );
            
            FreeEnergyMonitor_exposer.def( 
                "groupB"
                , groupB_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::FreeEnergyMonitor::isCompatible
        
            typedef bool ( ::SireSystem::FreeEnergyMonitor::*isCompatible_function_type )( ::SireSystem::FreeEnergyMonitor const & ) const;
            isCompatible_function_type isCompatible_function_value( &::SireSystem::FreeEnergyMonitor::isCompatible );
            
            FreeEnergyMonitor_exposer.def( 
                "isCompatible"
                , isCompatible_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::isCompatibleExceptLambda
        
            typedef bool ( ::SireSystem::FreeEnergyMonitor::*isCompatibleExceptLambda_function_type )( ::SireSystem::FreeEnergyMonitor const & ) const;
            isCompatibleExceptLambda_function_type isCompatibleExceptLambda_function_value( &::SireSystem::FreeEnergyMonitor::isCompatibleExceptLambda );
            
            FreeEnergyMonitor_exposer.def( 
                "isCompatibleExceptLambda"
                , isCompatibleExceptLambda_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::isEmpty
        
            typedef bool ( ::SireSystem::FreeEnergyMonitor::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireSystem::FreeEnergyMonitor::isEmpty );
            
            FreeEnergyMonitor_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::lambdaComponent
        
            typedef ::SireCAS::Symbol ( ::SireSystem::FreeEnergyMonitor::*lambdaComponent_function_type )(  ) const;
            lambdaComponent_function_type lambdaComponent_function_value( &::SireSystem::FreeEnergyMonitor::lambdaComponent );
            
            FreeEnergyMonitor_exposer.def( 
                "lambdaComponent"
                , lambdaComponent_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::lambdaValue
        
            typedef double ( ::SireSystem::FreeEnergyMonitor::*lambdaValue_function_type )(  ) const;
            lambdaValue_function_type lambdaValue_function_value( &::SireSystem::FreeEnergyMonitor::lambdaValue );
            
            FreeEnergyMonitor_exposer.def( 
                "lambdaValue"
                , lambdaValue_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::ljFreeEnergies
        
            typedef ::QVector< SireMaths::FreeEnergyAverage > ( ::SireSystem::FreeEnergyMonitor::*ljFreeEnergies_function_type )(  ) const;
            ljFreeEnergies_function_type ljFreeEnergies_function_value( &::SireSystem::FreeEnergyMonitor::ljFreeEnergies );
            
            FreeEnergyMonitor_exposer.def( 
                "ljFreeEnergies"
                , ljFreeEnergies_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::merge
        
            typedef ::SireSystem::FreeEnergyMonitor ( *merge_function_type )( ::QList< SireSystem::FreeEnergyMonitor > const & );
            merge_function_type merge_function_value( &::SireSystem::FreeEnergyMonitor::merge );
            
            FreeEnergyMonitor_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("monitors") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::monitor
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*monitor_function_type )( ::SireSystem::System & ) ;
            monitor_function_type monitor_function_value( &::SireSystem::FreeEnergyMonitor::monitor );
            
            FreeEnergyMonitor_exposer.def( 
                "monitor"
                , monitor_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::nSamples
        
            typedef int ( ::SireSystem::FreeEnergyMonitor::*nSamples_function_type )(  ) const;
            nSamples_function_type nSamples_function_value( &::SireSystem::FreeEnergyMonitor::nSamples );
            
            FreeEnergyMonitor_exposer.def( 
                "nSamples"
                , nSamples_function_value );
        
        }
        FreeEnergyMonitor_exposer.def( bp::self != bp::self );
        FreeEnergyMonitor_exposer.def( bp::self + bp::self );
        { //::SireSystem::FreeEnergyMonitor::operator=
        
            typedef ::SireSystem::FreeEnergyMonitor & ( ::SireSystem::FreeEnergyMonitor::*assign_function_type )( ::SireSystem::FreeEnergyMonitor const & ) ;
            assign_function_type assign_function_value( &::SireSystem::FreeEnergyMonitor::operator= );
            
            FreeEnergyMonitor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        FreeEnergyMonitor_exposer.def( bp::self == bp::self );
        { //::SireSystem::FreeEnergyMonitor::referenceGroup
        
            typedef ::SireSystem::AssignerGroup const & ( ::SireSystem::FreeEnergyMonitor::*referenceGroup_function_type )(  ) const;
            referenceGroup_function_type referenceGroup_function_value( &::SireSystem::FreeEnergyMonitor::referenceGroup );
            
            FreeEnergyMonitor_exposer.def( 
                "referenceGroup"
                , referenceGroup_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::FreeEnergyMonitor::referenceViews
        
            typedef ::QVector< SireMol::PartialMolecule > ( ::SireSystem::FreeEnergyMonitor::*referenceViews_function_type )(  ) const;
            referenceViews_function_type referenceViews_function_value( &::SireSystem::FreeEnergyMonitor::referenceViews );
            
            FreeEnergyMonitor_exposer.def( 
                "referenceViews"
                , referenceViews_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::setBinWidth
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*setBinWidth_function_type )( ::SireUnits::Dimension::MolarEnergy const & ) ;
            setBinWidth_function_type setBinWidth_function_value( &::SireSystem::FreeEnergyMonitor::setBinWidth );
            
            FreeEnergyMonitor_exposer.def( 
                "setBinWidth"
                , setBinWidth_function_value
                , ( bp::arg("binwidth") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::setCoulombPower
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*setCoulombPower_function_type )( int ) ;
            setCoulombPower_function_type setCoulombPower_function_value( &::SireSystem::FreeEnergyMonitor::setCoulombPower );
            
            FreeEnergyMonitor_exposer.def( 
                "setCoulombPower"
                , setCoulombPower_function_value
                , ( bp::arg("power") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::setDeltaLambda
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*setDeltaLambda_function_type )( double ) ;
            setDeltaLambda_function_type setDeltaLambda_function_value( &::SireSystem::FreeEnergyMonitor::setDeltaLambda );
            
            FreeEnergyMonitor_exposer.def( 
                "setDeltaLambda"
                , setDeltaLambda_function_value
                , ( bp::arg("delta_lam") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::setLambdaComponent
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*setLambdaComponent_function_type )( ::SireCAS::Symbol const & ) ;
            setLambdaComponent_function_type setLambdaComponent_function_value( &::SireSystem::FreeEnergyMonitor::setLambdaComponent );
            
            FreeEnergyMonitor_exposer.def( 
                "setLambdaComponent"
                , setLambdaComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::setShiftDelta
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*setShiftDelta_function_type )( double ) ;
            setShiftDelta_function_type setShiftDelta_function_value( &::SireSystem::FreeEnergyMonitor::setShiftDelta );
            
            FreeEnergyMonitor_exposer.def( 
                "setShiftDelta"
                , setShiftDelta_function_value
                , ( bp::arg("delta") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::setTemperature
        
            typedef void ( ::SireSystem::FreeEnergyMonitor::*setTemperature_function_type )( ::SireUnits::Dimension::Temperature const & ) ;
            setTemperature_function_type setTemperature_function_value( &::SireSystem::FreeEnergyMonitor::setTemperature );
            
            FreeEnergyMonitor_exposer.def( 
                "setTemperature"
                , setTemperature_function_value
                , ( bp::arg("temperature") ) );
        
        }
        { //::SireSystem::FreeEnergyMonitor::shiftDelta
        
            typedef double ( ::SireSystem::FreeEnergyMonitor::*shiftDelta_function_type )(  ) const;
            shiftDelta_function_type shiftDelta_function_value( &::SireSystem::FreeEnergyMonitor::shiftDelta );
            
            FreeEnergyMonitor_exposer.def( 
                "shiftDelta"
                , shiftDelta_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::temperature
        
            typedef ::SireUnits::Dimension::Temperature ( ::SireSystem::FreeEnergyMonitor::*temperature_function_type )(  ) const;
            temperature_function_type temperature_function_value( &::SireSystem::FreeEnergyMonitor::temperature );
            
            FreeEnergyMonitor_exposer.def( 
                "temperature"
                , temperature_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::FreeEnergyMonitor::typeName );
            
            FreeEnergyMonitor_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::FreeEnergyMonitor::usesSoftCore
        
            typedef bool ( ::SireSystem::FreeEnergyMonitor::*usesSoftCore_function_type )(  ) const;
            usesSoftCore_function_type usesSoftCore_function_value( &::SireSystem::FreeEnergyMonitor::usesSoftCore );
            
            FreeEnergyMonitor_exposer.def( 
                "usesSoftCore"
                , usesSoftCore_function_value );
        
        }
        FreeEnergyMonitor_exposer.staticmethod( "merge" );
        FreeEnergyMonitor_exposer.staticmethod( "typeName" );
        FreeEnergyMonitor_exposer.def( "__copy__", &__copy__);
        FreeEnergyMonitor_exposer.def( "__deepcopy__", &__copy__);
        FreeEnergyMonitor_exposer.def( "clone", &__copy__);
        FreeEnergyMonitor_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::FreeEnergyMonitor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FreeEnergyMonitor_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::FreeEnergyMonitor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FreeEnergyMonitor_exposer.def( "__str__", &__str__< ::SireSystem::FreeEnergyMonitor > );
        FreeEnergyMonitor_exposer.def( "__repr__", &__str__< ::SireSystem::FreeEnergyMonitor > );
    }

}
