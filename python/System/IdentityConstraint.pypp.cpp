// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "IdentityConstraint.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/linearap.h"

#include "SireMaths/nmatrix.h"

#include "SireMaths/nvector.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/molecules.h"

#include "SireMol/moleditor.h"

#include "SireMol/viewsofmol.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/errors.h"

#include "SireVol/space.h"

#include "closemols.h"

#include "delta.h"

#include "identityconstraint.h"

#include "system.h"

#include <QDebug>

#include <QTime>

#include <QVarLengthArray>

#include "identityconstraint.h"

SireSystem::IdentityConstraint __copy__(const SireSystem::IdentityConstraint &other){ return SireSystem::IdentityConstraint(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_IdentityConstraint_class(){

    { //::SireSystem::IdentityConstraint
        typedef bp::class_< SireSystem::IdentityConstraint, bp::bases< SireSystem::MoleculeConstraint, SireSystem::Constraint, SireBase::Property > > IdentityConstraint_exposer_t;
        IdentityConstraint_exposer_t IdentityConstraint_exposer = IdentityConstraint_exposer_t( "IdentityConstraint", bp::init< >() );
        bp::scope IdentityConstraint_scope( IdentityConstraint_exposer );
        IdentityConstraint_exposer.def( bp::init< SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        IdentityConstraint_exposer.def( bp::init< SireFF::PointRef const &, SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("point"), bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        IdentityConstraint_exposer.def( bp::init< QList< SireBase::PropPtr< SireFF::Point > > const &, SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("points"), bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        IdentityConstraint_exposer.def( bp::init< QVector< SireBase::PropPtr< SireFF::Point > > const &, SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("points"), bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        IdentityConstraint_exposer.def( bp::init< SireSystem::IdentityConstraint const & >(( bp::arg("other") )) );
        { //::SireSystem::IdentityConstraint::constrain
        
            typedef ::SireMol::MolGroupPtr ( *constrain_function_type )( ::SireMol::MoleculeGroup const &,::SireFF::PointRef const &,::SireBase::PropertyMap const & );
            constrain_function_type constrain_function_value( &::SireSystem::IdentityConstraint::constrain );
            
            IdentityConstraint_exposer.def( 
                "constrain"
                , constrain_function_value
                , ( bp::arg("molgroup"), bp::arg("point"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireSystem::IdentityConstraint::constrain
        
            typedef ::SireMol::MolGroupPtr ( *constrain_function_type )( ::SireMol::MoleculeGroup const &,::QVector< SireBase::PropPtr< SireFF::Point > > const &,::SireBase::PropertyMap const & );
            constrain_function_type constrain_function_value( &::SireSystem::IdentityConstraint::constrain );
            
            IdentityConstraint_exposer.def( 
                "constrain"
                , constrain_function_value
                , ( bp::arg("molgroup"), bp::arg("points"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireSystem::IdentityConstraint::constrain
        
            typedef ::SireMol::MolGroupPtr ( *constrain_function_type )( ::SireMol::MoleculeGroup const &,::QList< SireBase::PropPtr< SireFF::Point > > const &,::SireBase::PropertyMap const & );
            constrain_function_type constrain_function_value( &::SireSystem::IdentityConstraint::constrain );
            
            IdentityConstraint_exposer.def( 
                "constrain"
                , constrain_function_value
                , ( bp::arg("molgroup"), bp::arg("points"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireSystem::IdentityConstraint::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireSystem::IdentityConstraint::*moleculeGroup_function_type )(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireSystem::IdentityConstraint::moleculeGroup );
            
            IdentityConstraint_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        IdentityConstraint_exposer.def( bp::self != bp::self );
        { //::SireSystem::IdentityConstraint::operator=
        
            typedef ::SireSystem::IdentityConstraint & ( ::SireSystem::IdentityConstraint::*assign_function_type )( ::SireSystem::IdentityConstraint const & ) ;
            assign_function_type assign_function_value( &::SireSystem::IdentityConstraint::operator= );
            
            IdentityConstraint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        IdentityConstraint_exposer.def( bp::self == bp::self );
        { //::SireSystem::IdentityConstraint::points
        
            typedef ::QVector< SireBase::PropPtr< SireFF::Point > > ( ::SireSystem::IdentityConstraint::*points_function_type )(  ) const;
            points_function_type points_function_value( &::SireSystem::IdentityConstraint::points );
            
            IdentityConstraint_exposer.def( 
                "points"
                , points_function_value );
        
        }
        { //::SireSystem::IdentityConstraint::propertyMap
        
            typedef ::SireBase::PropertyMap const & ( ::SireSystem::IdentityConstraint::*propertyMap_function_type )(  ) const;
            propertyMap_function_type propertyMap_function_value( &::SireSystem::IdentityConstraint::propertyMap );
            
            IdentityConstraint_exposer.def( 
                "propertyMap"
                , propertyMap_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::IdentityConstraint::toString
        
            typedef ::QString ( ::SireSystem::IdentityConstraint::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSystem::IdentityConstraint::toString );
            
            IdentityConstraint_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireSystem::IdentityConstraint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::IdentityConstraint::typeName );
            
            IdentityConstraint_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::IdentityConstraint::useFewPointsAlgorithm
        
            typedef void ( ::SireSystem::IdentityConstraint::*useFewPointsAlgorithm_function_type )(  ) ;
            useFewPointsAlgorithm_function_type useFewPointsAlgorithm_function_value( &::SireSystem::IdentityConstraint::useFewPointsAlgorithm );
            
            IdentityConstraint_exposer.def( 
                "useFewPointsAlgorithm"
                , useFewPointsAlgorithm_function_value );
        
        }
        { //::SireSystem::IdentityConstraint::useManyPointsAlgorithm
        
            typedef void ( ::SireSystem::IdentityConstraint::*useManyPointsAlgorithm_function_type )(  ) ;
            useManyPointsAlgorithm_function_type useManyPointsAlgorithm_function_value( &::SireSystem::IdentityConstraint::useManyPointsAlgorithm );
            
            IdentityConstraint_exposer.def( 
                "useManyPointsAlgorithm"
                , useManyPointsAlgorithm_function_value );
        
        }
        { //::SireSystem::IdentityConstraint::useSinglePointAlgorithm
        
            typedef void ( ::SireSystem::IdentityConstraint::*useSinglePointAlgorithm_function_type )(  ) ;
            useSinglePointAlgorithm_function_type useSinglePointAlgorithm_function_value( &::SireSystem::IdentityConstraint::useSinglePointAlgorithm );
            
            IdentityConstraint_exposer.def( 
                "useSinglePointAlgorithm"
                , useSinglePointAlgorithm_function_value );
        
        }
        IdentityConstraint_exposer.staticmethod( "constrain" );
        IdentityConstraint_exposer.staticmethod( "typeName" );
        IdentityConstraint_exposer.def( "__copy__", &__copy__);
        IdentityConstraint_exposer.def( "__deepcopy__", &__copy__);
        IdentityConstraint_exposer.def( "clone", &__copy__);
        IdentityConstraint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::IdentityConstraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        IdentityConstraint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::IdentityConstraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        IdentityConstraint_exposer.def( "__str__", &__str__< ::SireSystem::IdentityConstraint > );
        IdentityConstraint_exposer.def( "__repr__", &__str__< ::SireSystem::IdentityConstraint > );
    }

}
