// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "WindowedComponent.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/errors.h"

#include "constraint.h"

#include "delta.h"

#include "system.h"

#include <QDebug>

#include "constraint.h"

SireSystem::WindowedComponent __copy__(const SireSystem::WindowedComponent &other){ return SireSystem::WindowedComponent(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_WindowedComponent_class(){

    { //::SireSystem::WindowedComponent
        typedef bp::class_< SireSystem::WindowedComponent, bp::bases< SireSystem::Constraint, SireBase::Property > > WindowedComponent_exposer_t;
        WindowedComponent_exposer_t WindowedComponent_exposer = WindowedComponent_exposer_t( "WindowedComponent", bp::init< >() );
        bp::scope WindowedComponent_scope( WindowedComponent_exposer );
        WindowedComponent_exposer.def( bp::init< SireCAS::Symbol const &, SireCAS::Symbol const &, QVector< double > const &, bp::optional< int > >(( bp::arg("component"), bp::arg("reference"), bp::arg("values"), bp::arg("step_size")=(int)(1) )) );
        WindowedComponent_exposer.def( bp::init< SireSystem::WindowedComponent const & >(( bp::arg("other") )) );
        { //::SireSystem::WindowedComponent::component
        
            typedef ::SireCAS::Symbol const & ( ::SireSystem::WindowedComponent::*component_function_type )(  ) const;
            component_function_type component_function_value( &::SireSystem::WindowedComponent::component );
            
            WindowedComponent_exposer.def( 
                "component"
                , component_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        WindowedComponent_exposer.def( bp::self != bp::self );
        { //::SireSystem::WindowedComponent::operator=
        
            typedef ::SireSystem::WindowedComponent & ( ::SireSystem::WindowedComponent::*assign_function_type )( ::SireSystem::WindowedComponent const & ) ;
            assign_function_type assign_function_value( &::SireSystem::WindowedComponent::operator= );
            
            WindowedComponent_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        WindowedComponent_exposer.def( bp::self == bp::self );
        { //::SireSystem::WindowedComponent::referenceComponent
        
            typedef ::SireCAS::Symbol const & ( ::SireSystem::WindowedComponent::*referenceComponent_function_type )(  ) const;
            referenceComponent_function_type referenceComponent_function_value( &::SireSystem::WindowedComponent::referenceComponent );
            
            WindowedComponent_exposer.def( 
                "referenceComponent"
                , referenceComponent_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::WindowedComponent::stepSize
        
            typedef int ( ::SireSystem::WindowedComponent::*stepSize_function_type )(  ) const;
            stepSize_function_type stepSize_function_value( &::SireSystem::WindowedComponent::stepSize );
            
            WindowedComponent_exposer.def( 
                "stepSize"
                , stepSize_function_value );
        
        }
        { //::SireSystem::WindowedComponent::toString
        
            typedef ::QString ( ::SireSystem::WindowedComponent::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSystem::WindowedComponent::toString );
            
            WindowedComponent_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireSystem::WindowedComponent::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::WindowedComponent::typeName );
            
            WindowedComponent_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::WindowedComponent::windowValues
        
            typedef ::QVector< double > const & ( ::SireSystem::WindowedComponent::*windowValues_function_type )(  ) const;
            windowValues_function_type windowValues_function_value( &::SireSystem::WindowedComponent::windowValues );
            
            WindowedComponent_exposer.def( 
                "windowValues"
                , windowValues_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        WindowedComponent_exposer.staticmethod( "typeName" );
        WindowedComponent_exposer.def( "__copy__", &__copy__);
        WindowedComponent_exposer.def( "__deepcopy__", &__copy__);
        WindowedComponent_exposer.def( "clone", &__copy__);
        WindowedComponent_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::WindowedComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        WindowedComponent_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::WindowedComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        WindowedComponent_exposer.def( "__str__", &__str__< ::SireSystem::WindowedComponent > );
        WindowedComponent_exposer.def( "__repr__", &__str__< ::SireSystem::WindowedComponent > );
    }

}
