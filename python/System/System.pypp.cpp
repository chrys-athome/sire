// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "System.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/savestate.h"

#include "SireError/errors.h"

#include "SireFF/ff.h"

#include "SireFF/ffidx.h"

#include "SireFF/ffmolgroup.h"

#include "SireFF/fieldtable.h"

#include "SireFF/forcefield.h"

#include "SireFF/forcetable.h"

#include "SireFF/potentialtable.h"

#include "SireFF/probe.h"

#include "SireMM/ljparameterdb.h"

#include "SireMol/atomcoords.h"

#include "SireMol/errors.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/molecules.h"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "delta.h"

#include "monitorname.h"

#include "system.h"

#include <QDebug>

#include <QHash>

#include <QMutex>

#include <QTime>

#include "system.h"

SireSystem::System __copy__(const SireSystem::System &other){ return SireSystem::System(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_System_class(){

    { //::SireSystem::System
        typedef bp::class_< SireSystem::System, bp::bases< SireMol::MolGroupsBase, SireBase::Property > > System_exposer_t;
        System_exposer_t System_exposer = System_exposer_t( "System", bp::init< >() );
        bp::scope System_scope( System_exposer );
        System_exposer.def( bp::init< QString const & >(( bp::arg("name") )) );
        System_exposer.def( bp::init< SireSystem::System const & >(( bp::arg("other") )) );
        { //::SireSystem::System::UID
        
            typedef ::QUuid const & ( ::SireSystem::System::*UID_function_type )(  ) const;
            UID_function_type UID_function_value( &::SireSystem::System::UID );
            
            System_exposer.def( 
                "UID"
                , UID_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::QString const &,::SireSystem::SystemMonitor const &,int ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("name"), bp::arg("monitor"), bp::arg("frequency")=(int)(1) ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireSystem::SystemMonitors const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("monitors") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireSystem::SystemMonitors const &,int ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("monitors"), bp::arg("frequency") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireFF::FF const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("forcefield") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::MoleculeGroup const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireSystem::Constraint const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("constraint") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireSystem::Constraints const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("constraints") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::add
        
            typedef void ( ::SireSystem::System::*add_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            add_function_type add_function_value( &::SireSystem::System::add );
            
            System_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const &,::SireBase::PropertyMap const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::addIfUnique
        
            typedef void ( ::SireSystem::System::*addIfUnique_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            addIfUnique_function_type addIfUnique_function_value( &::SireSystem::System::addIfUnique );
            
            System_exposer.def( 
                "addIfUnique"
                , addIfUnique_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::applyConstraints
        
            typedef void ( ::SireSystem::System::*applyConstraints_function_type )(  ) ;
            applyConstraints_function_type applyConstraints_function_value( &::SireSystem::System::applyConstraints );
            
            System_exposer.def( 
                "applyConstraints"
                , applyConstraints_function_value );
        
        }
        { //::SireSystem::System::at
        
            typedef ::SireFF::FF const & ( ::SireSystem::System::*at_function_type )( ::SireFF::FFID const & ) const;
            at_function_type at_function_value( &::SireSystem::System::at );
            
            System_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::at
        
            typedef ::SireSystem::SystemMonitor const & ( ::SireSystem::System::*at_function_type )( ::SireSystem::MonitorID const & ) const;
            at_function_type at_function_value( &::SireSystem::System::at );
            
            System_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("monid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::at
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireSystem::System::*at_function_type )( ::SireMol::MGNum ) const;
            at_function_type at_function_value( &::SireSystem::System::at );
            
            System_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("mgnum") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::builtinProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::System::*builtinProperties_function_type )(  ) const;
            builtinProperties_function_type builtinProperties_function_value( &::SireSystem::System::builtinProperties );
            
            System_exposer.def( 
                "builtinProperties"
                , builtinProperties_function_value );
        
        }
        { //::SireSystem::System::builtinProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::System::*builtinProperty_function_type )( ::QString const & ) const;
            builtinProperty_function_type builtinProperty_function_value( &::SireSystem::System::builtinProperty );
            
            System_exposer.def( 
                "builtinProperty"
                , builtinProperty_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::clearStatistics
        
            typedef void ( ::SireSystem::System::*clearStatistics_function_type )(  ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireSystem::System::clearStatistics );
            
            System_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value );
        
        }
        { //::SireSystem::System::clearStatistics
        
            typedef void ( ::SireSystem::System::*clearStatistics_function_type )( ::SireSystem::MonitorID const & ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireSystem::System::clearStatistics );
            
            System_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::System::collectStats
        
            typedef void ( ::SireSystem::System::*collectStats_function_type )(  ) ;
            collectStats_function_type collectStats_function_value( &::SireSystem::System::collectStats );
            
            System_exposer.def( 
                "collectStats"
                , collectStats_function_value );
        
        }
        { //::SireSystem::System::componentExpression
        
            typedef ::SireCAS::Expression ( ::SireSystem::System::*componentExpression_function_type )( ::SireCAS::Symbol const & ) const;
            componentExpression_function_type componentExpression_function_value( &::SireSystem::System::componentExpression );
            
            System_exposer.def( 
                "componentExpression"
                , componentExpression_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireSystem::System::componentExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireSystem::System::*componentExpressions_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            componentExpressions_function_type componentExpressions_function_value( &::SireSystem::System::componentExpressions );
            
            System_exposer.def( 
                "componentExpressions"
                , componentExpressions_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireSystem::System::componentExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireSystem::System::*componentExpressions_function_type )(  ) const;
            componentExpressions_function_type componentExpressions_function_value( &::SireSystem::System::componentExpressions );
            
            System_exposer.def( 
                "componentExpressions"
                , componentExpressions_function_value );
        
        }
        { //::SireSystem::System::componentSymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireSystem::System::*componentSymbols_function_type )(  ) const;
            componentSymbols_function_type componentSymbols_function_value( &::SireSystem::System::componentSymbols );
            
            System_exposer.def( 
                "componentSymbols"
                , componentSymbols_function_value );
        
        }
        { //::SireSystem::System::componentValue
        
            typedef double ( ::SireSystem::System::*componentValue_function_type )( ::SireCAS::Symbol const & ) ;
            componentValue_function_type componentValue_function_value( &::SireSystem::System::componentValue );
            
            System_exposer.def( 
                "componentValue"
                , componentValue_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireSystem::System::componentValues
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*componentValues_function_type )(  ) ;
            componentValues_function_type componentValues_function_value( &::SireSystem::System::componentValues );
            
            System_exposer.def( 
                "componentValues"
                , componentValues_function_value );
        
        }
        { //::SireSystem::System::componentValues
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*componentValues_function_type )( ::QSet< SireCAS::Symbol > const & ) ;
            componentValues_function_type componentValues_function_value( &::SireSystem::System::componentValues );
            
            System_exposer.def( 
                "componentValues"
                , componentValues_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireSystem::System::compoundProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::System::*compoundProperty_function_type )( ::QString const & ) const;
            compoundProperty_function_type compoundProperty_function_value( &::SireSystem::System::compoundProperty );
            
            System_exposer.def( 
                "compoundProperty"
                , compoundProperty_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::constant
        
            typedef double ( ::SireSystem::System::*constant_function_type )( ::SireCAS::Symbol const & ) const;
            constant_function_type constant_function_value( &::SireSystem::System::constant );
            
            System_exposer.def( 
                "constant"
                , constant_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::System::constantComponents
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*constantComponents_function_type )(  ) const;
            constantComponents_function_type constantComponents_function_value( &::SireSystem::System::constantComponents );
            
            System_exposer.def( 
                "constantComponents"
                , constantComponents_function_value );
        
        }
        { //::SireSystem::System::constantExpression
        
            typedef ::SireCAS::Expression ( ::SireSystem::System::*constantExpression_function_type )( ::SireCAS::Symbol const & ) const;
            constantExpression_function_type constantExpression_function_value( &::SireSystem::System::constantExpression );
            
            System_exposer.def( 
                "constantExpression"
                , constantExpression_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireSystem::System::constantExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireSystem::System::*constantExpressions_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            constantExpressions_function_type constantExpressions_function_value( &::SireSystem::System::constantExpressions );
            
            System_exposer.def( 
                "constantExpressions"
                , constantExpressions_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireSystem::System::constantExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireSystem::System::*constantExpressions_function_type )(  ) const;
            constantExpressions_function_type constantExpressions_function_value( &::SireSystem::System::constantExpressions );
            
            System_exposer.def( 
                "constantExpressions"
                , constantExpressions_function_value );
        
        }
        { //::SireSystem::System::constantSymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireSystem::System::*constantSymbols_function_type )(  ) const;
            constantSymbols_function_type constantSymbols_function_value( &::SireSystem::System::constantSymbols );
            
            System_exposer.def( 
                "constantSymbols"
                , constantSymbols_function_value );
        
        }
        { //::SireSystem::System::constants
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*constants_function_type )(  ) const;
            constants_function_type constants_function_value( &::SireSystem::System::constants );
            
            System_exposer.def( 
                "constants"
                , constants_function_value );
        
        }
        { //::SireSystem::System::constants
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*constants_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            constants_function_type constants_function_value( &::SireSystem::System::constants );
            
            System_exposer.def( 
                "constants"
                , constants_function_value
                , ( bp::arg("components") ) );
        
        }
        { //::SireSystem::System::constraints
        
            typedef ::SireSystem::Constraints const & ( ::SireSystem::System::*constraints_function_type )(  ) const;
            constraints_function_type constraints_function_value( &::SireSystem::System::constraints );
            
            System_exposer.def( 
                "constraints"
                , constraints_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::System::constraintsSatisfied
        
            typedef bool ( ::SireSystem::System::*constraintsSatisfied_function_type )(  ) const;
            constraintsSatisfied_function_type constraintsSatisfied_function_value( &::SireSystem::System::constraintsSatisfied );
            
            System_exposer.def( 
                "constraintsSatisfied"
                , constraintsSatisfied_function_value );
        
        }
        { //::SireSystem::System::containsProperty
        
            typedef bool ( ::SireSystem::System::*containsProperty_function_type )( ::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireSystem::System::containsProperty );
            
            System_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireSystem::System::containsProperty
        
            typedef bool ( ::SireSystem::System::*containsProperty_function_type )( ::SireFF::FFID const &,::QString const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireSystem::System::containsProperty );
            
            System_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("ffid"), bp::arg("name") ) );
        
        }
        { //::SireSystem::System::containsProperty
        
            typedef bool ( ::SireSystem::System::*containsProperty_function_type )( ::SireBase::PropertyName const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireSystem::System::containsProperty );
            
            System_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireSystem::System::containsProperty
        
            typedef bool ( ::SireSystem::System::*containsProperty_function_type )( ::SireFF::FFID const &,::SireBase::PropertyName const & ) const;
            containsProperty_function_type containsProperty_function_value( &::SireSystem::System::containsProperty );
            
            System_exposer.def( 
                "containsProperty"
                , containsProperty_function_value
                , ( bp::arg("ffid"), bp::arg("name") ) );
        
        }
        { //::SireSystem::System::energies
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*energies_function_type )(  ) ;
            energies_function_type energies_function_value( &::SireSystem::System::energies );
            
            System_exposer.def( 
                "energies"
                , energies_function_value );
        
        }
        { //::SireSystem::System::energies
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*energies_function_type )( ::QSet< SireCAS::Symbol > const & ) ;
            energies_function_type energies_function_value( &::SireSystem::System::energies );
            
            System_exposer.def( 
                "energies"
                , energies_function_value
                , ( bp::arg("components") ) );
        
        }
        { //::SireSystem::System::energy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireSystem::System::*energy_function_type )(  ) ;
            energy_function_type energy_function_value( &::SireSystem::System::energy );
            
            System_exposer.def( 
                "energy"
                , energy_function_value );
        
        }
        { //::SireSystem::System::energy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireSystem::System::*energy_function_type )( ::SireCAS::Symbol const & ) ;
            energy_function_type energy_function_value( &::SireSystem::System::energy );
            
            System_exposer.def( 
                "energy"
                , energy_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::System::energyComponents
        
            typedef ::SireCAS::Values ( ::SireSystem::System::*energyComponents_function_type )(  ) ;
            energyComponents_function_type energyComponents_function_value( &::SireSystem::System::energyComponents );
            
            System_exposer.def( 
                "energyComponents"
                , energyComponents_function_value );
        
        }
        { //::SireSystem::System::energyExpression
        
            typedef ::SireCAS::Expression ( ::SireSystem::System::*energyExpression_function_type )( ::SireCAS::Symbol const & ) const;
            energyExpression_function_type energyExpression_function_value( &::SireSystem::System::energyExpression );
            
            System_exposer.def( 
                "energyExpression"
                , energyExpression_function_value
                , ( bp::arg("expression") ) );
        
        }
        { //::SireSystem::System::energyExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireSystem::System::*energyExpressions_function_type )( ::QSet< SireCAS::Symbol > const & ) const;
            energyExpressions_function_type energyExpressions_function_value( &::SireSystem::System::energyExpressions );
            
            System_exposer.def( 
                "energyExpressions"
                , energyExpressions_function_value
                , ( bp::arg("symbols") ) );
        
        }
        { //::SireSystem::System::energyExpressions
        
            typedef ::QHash< SireCAS::Symbol, SireCAS::Expression > ( ::SireSystem::System::*energyExpressions_function_type )(  ) const;
            energyExpressions_function_type energyExpressions_function_value( &::SireSystem::System::energyExpressions );
            
            System_exposer.def( 
                "energyExpressions"
                , energyExpressions_function_value );
        
        }
        { //::SireSystem::System::energySymbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireSystem::System::*energySymbols_function_type )(  ) const;
            energySymbols_function_type energySymbols_function_value( &::SireSystem::System::energySymbols );
            
            System_exposer.def( 
                "energySymbols"
                , energySymbols_function_value );
        
        }
        { //::SireSystem::System::extraGroups
        
            typedef ::SireMol::MoleculeGroups const & ( ::SireSystem::System::*extraGroups_function_type )(  ) const;
            extraGroups_function_type extraGroups_function_value( &::SireSystem::System::extraGroups );
            
            System_exposer.def( 
                "extraGroups"
                , extraGroups_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::ffIdx
        
            typedef ::SireFF::FFIdx ( ::SireSystem::System::*ffIdx_function_type )( ::SireFF::FFID const & ) const;
            ffIdx_function_type ffIdx_function_value( &::SireSystem::System::ffIdx );
            
            System_exposer.def( 
                "ffIdx"
                , ffIdx_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireSystem::System::ffName
        
            typedef ::SireFF::FFName const & ( ::SireSystem::System::*ffName_function_type )( ::SireFF::FFID const & ) const;
            ffName_function_type ffName_function_value( &::SireSystem::System::ffName );
            
            System_exposer.def( 
                "ffName"
                , ffName_function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::field
        
            typedef void ( ::SireSystem::System::*field_function_type )( ::SireFF::FieldTable &,double ) ;
            field_function_type field_function_value( &::SireSystem::System::field );
            
            System_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireSystem::System::field
        
            typedef void ( ::SireSystem::System::*field_function_type )( ::SireFF::FieldTable &,::SireCAS::Symbol const &,double ) ;
            field_function_type field_function_value( &::SireSystem::System::field );
            
            System_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("component"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireSystem::System::field
        
            typedef void ( ::SireSystem::System::*field_function_type )( ::SireFF::FieldTable &,::SireFF::Probe const &,double ) ;
            field_function_type field_function_value( &::SireSystem::System::field );
            
            System_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("probe"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireSystem::System::field
        
            typedef void ( ::SireSystem::System::*field_function_type )( ::SireFF::FieldTable &,::SireCAS::Symbol const &,::SireFF::Probe const &,double ) ;
            field_function_type field_function_value( &::SireSystem::System::field );
            
            System_exposer.def( 
                "field"
                , field_function_value
                , ( bp::arg("fieldtable"), bp::arg("component"), bp::arg("probe"), bp::arg("scale_field")=1 ) );
        
        }
        { //::SireSystem::System::force
        
            typedef void ( ::SireSystem::System::*force_function_type )( ::SireFF::ForceTable &,double ) ;
            force_function_type force_function_value( &::SireSystem::System::force );
            
            System_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("forcetable"), bp::arg("scale_force")=1 ) );
        
        }
        { //::SireSystem::System::force
        
            typedef void ( ::SireSystem::System::*force_function_type )( ::SireFF::ForceTable &,::SireCAS::Symbol const &,double ) ;
            force_function_type force_function_value( &::SireSystem::System::force );
            
            System_exposer.def( 
                "force"
                , force_function_value
                , ( bp::arg("forcetable"), bp::arg("component"), bp::arg("scale_force")=1 ) );
        
        }
        { //::SireSystem::System::forceField
        
            typedef ::SireFF::FF const & ( ::SireSystem::System::*forceField_function_type )( ::SireFF::FFID const & ) const;
            forceField_function_type forceField_function_value( &::SireSystem::System::forceField );
            
            System_exposer.def( 
                "forceField"
                , forceField_function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::forceField
        
            typedef ::SireFF::FF const & ( ::SireSystem::System::*forceField_function_type )( ::SireMol::MGID const & ) const;
            forceField_function_type forceField_function_value( &::SireSystem::System::forceField );
            
            System_exposer.def( 
                "forceField"
                , forceField_function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::forceFields
        
            typedef ::SireFF::ForceFields const & ( ::SireSystem::System::*forceFields_function_type )(  ) const;
            forceFields_function_type forceFields_function_value( &::SireSystem::System::forceFields );
            
            System_exposer.def( 
                "forceFields"
                , forceFields_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::System::hasComponent
        
            typedef bool ( ::SireSystem::System::*hasComponent_function_type )( ::SireCAS::Symbol const & ) const;
            hasComponent_function_type hasComponent_function_value( &::SireSystem::System::hasComponent );
            
            System_exposer.def( 
                "hasComponent"
                , hasComponent_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireSystem::System::hasConstantComponent
        
            typedef bool ( ::SireSystem::System::*hasConstantComponent_function_type )( ::SireCAS::Symbol const & ) const;
            hasConstantComponent_function_type hasConstantComponent_function_value( &::SireSystem::System::hasConstantComponent );
            
            System_exposer.def( 
                "hasConstantComponent"
                , hasConstantComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::System::hasEnergyComponent
        
            typedef bool ( ::SireSystem::System::*hasEnergyComponent_function_type )( ::SireCAS::Symbol const & ) const;
            hasEnergyComponent_function_type hasEnergyComponent_function_value( &::SireSystem::System::hasEnergyComponent );
            
            System_exposer.def( 
                "hasEnergyComponent"
                , hasEnergyComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::System::isBuiltinProperty
        
            typedef bool ( ::SireSystem::System::*isBuiltinProperty_function_type )( ::QString const & ) const;
            isBuiltinProperty_function_type isBuiltinProperty_function_value( &::SireSystem::System::isBuiltinProperty );
            
            System_exposer.def( 
                "isBuiltinProperty"
                , isBuiltinProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireSystem::System::isClean
        
            typedef bool ( ::SireSystem::System::*isClean_function_type )(  ) const;
            isClean_function_type isClean_function_value( &::SireSystem::System::isClean );
            
            System_exposer.def( 
                "isClean"
                , isClean_function_value );
        
        }
        { //::SireSystem::System::isCompoundProperty
        
            typedef bool ( ::SireSystem::System::*isCompoundProperty_function_type )( ::QString const & ) const;
            isCompoundProperty_function_type isCompoundProperty_function_value( &::SireSystem::System::isCompoundProperty );
            
            System_exposer.def( 
                "isCompoundProperty"
                , isCompoundProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireSystem::System::isConstantComponent
        
            typedef bool ( ::SireSystem::System::*isConstantComponent_function_type )( ::SireCAS::Symbol const & ) const;
            isConstantComponent_function_type isConstantComponent_function_value( &::SireSystem::System::isConstantComponent );
            
            System_exposer.def( 
                "isConstantComponent"
                , isConstantComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::System::isDirty
        
            typedef bool ( ::SireSystem::System::*isDirty_function_type )(  ) const;
            isDirty_function_type isDirty_function_value( &::SireSystem::System::isDirty );
            
            System_exposer.def( 
                "isDirty"
                , isDirty_function_value );
        
        }
        { //::SireSystem::System::isEnergyComponent
        
            typedef bool ( ::SireSystem::System::*isEnergyComponent_function_type )( ::SireCAS::Symbol const & ) const;
            isEnergyComponent_function_type isEnergyComponent_function_value( &::SireSystem::System::isEnergyComponent );
            
            System_exposer.def( 
                "isEnergyComponent"
                , isEnergyComponent_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::System::isUserProperty
        
            typedef bool ( ::SireSystem::System::*isUserProperty_function_type )( ::QString const & ) const;
            isUserProperty_function_type isUserProperty_function_value( &::SireSystem::System::isUserProperty );
            
            System_exposer.def( 
                "isUserProperty"
                , isUserProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireSystem::System::monitor
        
            typedef ::SireSystem::SystemMonitor const & ( ::SireSystem::System::*monitor_function_type )( ::SireSystem::MonitorID const & ) const;
            monitor_function_type monitor_function_value( &::SireSystem::System::monitor );
            
            System_exposer.def( 
                "monitor"
                , monitor_function_value
                , ( bp::arg("monid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::monitorName
        
            typedef ::SireSystem::MonitorName ( ::SireSystem::System::*monitorName_function_type )( ::SireSystem::MonitorID const & ) const;
            monitorName_function_type monitorName_function_value( &::SireSystem::System::monitorName );
            
            System_exposer.def( 
                "monitorName"
                , monitorName_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::System::monitors
        
            typedef ::QList< SireBase::PropPtr< SireSystem::SystemMonitor > > ( ::SireSystem::System::*monitors_function_type )( ::SireSystem::MonitorID const & ) const;
            monitors_function_type monitors_function_value( &::SireSystem::System::monitors );
            
            System_exposer.def( 
                "monitors"
                , monitors_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::System::monitors
        
            typedef ::SireSystem::SystemMonitors const & ( ::SireSystem::System::*monitors_function_type )(  ) const;
            monitors_function_type monitors_function_value( &::SireSystem::System::monitors );
            
            System_exposer.def( 
                "monitors"
                , monitors_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::System::mustNowRecalculateFromScratch
        
            typedef void ( ::SireSystem::System::*mustNowRecalculateFromScratch_function_type )(  ) ;
            mustNowRecalculateFromScratch_function_type mustNowRecalculateFromScratch_function_value( &::SireSystem::System::mustNowRecalculateFromScratch );
            
            System_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_value );
        
        }
        { //::SireSystem::System::nConstraints
        
            typedef int ( ::SireSystem::System::*nConstraints_function_type )(  ) const;
            nConstraints_function_type nConstraints_function_value( &::SireSystem::System::nConstraints );
            
            System_exposer.def( 
                "nConstraints"
                , nConstraints_function_value );
        
        }
        { //::SireSystem::System::nForceFields
        
            typedef int ( ::SireSystem::System::*nForceFields_function_type )(  ) const;
            nForceFields_function_type nForceFields_function_value( &::SireSystem::System::nForceFields );
            
            System_exposer.def( 
                "nForceFields"
                , nForceFields_function_value );
        
        }
        { //::SireSystem::System::nMonitors
        
            typedef int ( ::SireSystem::System::*nMonitors_function_type )(  ) const;
            nMonitors_function_type nMonitors_function_value( &::SireSystem::System::nMonitors );
            
            System_exposer.def( 
                "nMonitors"
                , nMonitors_function_value );
        
        }
        { //::SireSystem::System::name
        
            typedef ::SireSystem::SysName const & ( ::SireSystem::System::*name_function_type )(  ) const;
            name_function_type name_function_value( &::SireSystem::System::name );
            
            System_exposer.def( 
                "name"
                , name_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::null
        
            typedef ::SireSystem::System const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireSystem::System::null );
            
            System_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        System_exposer.def( bp::self != bp::self );
        { //::SireSystem::System::operator=
        
            typedef ::SireSystem::System & ( ::SireSystem::System::*assign_function_type )( ::SireSystem::System const & ) ;
            assign_function_type assign_function_value( &::SireSystem::System::operator= );
            
            System_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        System_exposer.def( bp::self == bp::self );
        { //::SireSystem::System::operator[]
        
            typedef ::SireFF::FF const & ( ::SireSystem::System::*__getitem___function_type )( ::SireFF::FFID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::System::operator[] );
            
            System_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("ffid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::operator[]
        
            typedef ::SireSystem::SystemMonitor const & ( ::SireSystem::System::*__getitem___function_type )( ::SireSystem::MonitorID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::System::operator[] );
            
            System_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("monid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::operator[]
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireSystem::System::*__getitem___function_type )( ::SireMol::MGID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::System::operator[] );
            
            System_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("mgid") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireSystem::System::*__getitem___function_type )( ::SireMol::MolNum ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::System::operator[] );
            
            System_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireSystem::System::operator[]
        
            typedef ::SireMol::ViewsOfMol ( ::SireSystem::System::*__getitem___function_type )( ::SireMol::MolID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::System::operator[] );
            
            System_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireSystem::System::potential
        
            typedef void ( ::SireSystem::System::*potential_function_type )( ::SireFF::PotentialTable &,::SireFF::Probe const &,double ) ;
            potential_function_type potential_function_value( &::SireSystem::System::potential );
            
            System_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("probe"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireSystem::System::potential
        
            typedef void ( ::SireSystem::System::*potential_function_type )( ::SireFF::PotentialTable &,::SireCAS::Symbol const &,::SireFF::Probe const &,double ) ;
            potential_function_type potential_function_value( &::SireSystem::System::potential );
            
            System_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("component"), bp::arg("probe"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireSystem::System::potential
        
            typedef void ( ::SireSystem::System::*potential_function_type )( ::SireFF::PotentialTable &,double ) ;
            potential_function_type potential_function_value( &::SireSystem::System::potential );
            
            System_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireSystem::System::potential
        
            typedef void ( ::SireSystem::System::*potential_function_type )( ::SireFF::PotentialTable &,::SireCAS::Symbol const &,double ) ;
            potential_function_type potential_function_value( &::SireSystem::System::potential );
            
            System_exposer.def( 
                "potential"
                , potential_function_value
                , ( bp::arg("pottable"), bp::arg("component"), bp::arg("scale_potential")=1 ) );
        
        }
        { //::SireSystem::System::properties
        
            typedef ::SireBase::Properties ( ::SireSystem::System::*properties_function_type )(  ) const;
            properties_function_type properties_function_value( &::SireSystem::System::properties );
            
            System_exposer.def( 
                "properties"
                , properties_function_value );
        
        }
        { //::SireSystem::System::properties
        
            typedef ::SireBase::Properties ( ::SireSystem::System::*properties_function_type )( ::SireFF::FFID const & ) const;
            properties_function_type properties_function_value( &::SireSystem::System::properties );
            
            System_exposer.def( 
                "properties"
                , properties_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireSystem::System::property
        
            typedef ::SireBase::Property const & ( ::SireSystem::System::*property_function_type )( ::SireBase::PropertyName const & ) const;
            property_function_type property_function_value( &::SireSystem::System::property );
            
            System_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::property
        
            typedef ::SireBase::Property const & ( ::SireSystem::System::*property_function_type )( ::SireFF::FFID const &,::SireBase::PropertyName const & ) const;
            property_function_type property_function_value( &::SireSystem::System::property );
            
            System_exposer.def( 
                "property"
                , property_function_value
                , ( bp::arg("ffid"), bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::propertyKeys
        
            typedef ::QStringList ( ::SireSystem::System::*propertyKeys_function_type )(  ) const;
            propertyKeys_function_type propertyKeys_function_value( &::SireSystem::System::propertyKeys );
            
            System_exposer.def( 
                "propertyKeys"
                , propertyKeys_function_value );
        
        }
        { //::SireSystem::System::propertyKeys
        
            typedef ::QStringList ( ::SireSystem::System::*propertyKeys_function_type )( ::SireFF::FFID const & ) const;
            propertyKeys_function_type propertyKeys_function_value( &::SireSystem::System::propertyKeys );
            
            System_exposer.def( 
                "propertyKeys"
                , propertyKeys_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef void ( ::SireSystem::System::*remove_function_type )( ::SireSystem::MonitorID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("monid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef void ( ::SireSystem::System::*remove_function_type )( ::SireFF::FFID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("ffid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef void ( ::SireSystem::System::*remove_function_type )( ::SireFF::FF const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("ff") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::MoleculeGroup const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::MolID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef void ( ::SireSystem::System::*remove_function_type )( ::SireSystem::Constraint const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("constraint") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef void ( ::SireSystem::System::*remove_function_type )( ::SireSystem::Constraints const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("constraints") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::SireMol::MolNum,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnum"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::remove
        
            typedef bool ( ::SireSystem::System::*remove_function_type )( ::QSet< SireMol::MolNum > const &,::SireMol::MGID const & ) ;
            remove_function_type remove_function_value( &::SireSystem::System::remove );
            
            System_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("molnums"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::removeAll
        
            typedef bool ( ::SireSystem::System::*removeAll_function_type )( ::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireSystem::System::removeAll );
            
            System_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::removeAll
        
            typedef bool ( ::SireSystem::System::*removeAll_function_type )( ::SireMol::MoleculeView const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireSystem::System::removeAll );
            
            System_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molview"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::removeAll
        
            typedef bool ( ::SireSystem::System::*removeAll_function_type )( ::SireMol::ViewsOfMol const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireSystem::System::removeAll );
            
            System_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molviews"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::removeAll
        
            typedef bool ( ::SireSystem::System::*removeAll_function_type )( ::SireMol::Molecules const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireSystem::System::removeAll );
            
            System_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molecules"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::removeAll
        
            typedef bool ( ::SireSystem::System::*removeAll_function_type )( ::SireMol::MoleculeGroup const &,::SireMol::MGID const & ) ;
            removeAll_function_type removeAll_function_value( &::SireSystem::System::removeAll );
            
            System_exposer.def( 
                "removeAll"
                , removeAll_function_value
                , ( bp::arg("molgroup"), bp::arg("mgid") ) );
        
        }
        { //::SireSystem::System::removeAllConstraints
        
            typedef void ( ::SireSystem::System::*removeAllConstraints_function_type )(  ) ;
            removeAllConstraints_function_type removeAllConstraints_function_value( &::SireSystem::System::removeAllConstraints );
            
            System_exposer.def( 
                "removeAllConstraints"
                , removeAllConstraints_function_value );
        
        }
        { //::SireSystem::System::removeAllForceFields
        
            typedef void ( ::SireSystem::System::*removeAllForceFields_function_type )(  ) ;
            removeAllForceFields_function_type removeAllForceFields_function_value( &::SireSystem::System::removeAllForceFields );
            
            System_exposer.def( 
                "removeAllForceFields"
                , removeAllForceFields_function_value );
        
        }
        { //::SireSystem::System::removeAllMoleculeGroups
        
            typedef void ( ::SireSystem::System::*removeAllMoleculeGroups_function_type )(  ) ;
            removeAllMoleculeGroups_function_type removeAllMoleculeGroups_function_value( &::SireSystem::System::removeAllMoleculeGroups );
            
            System_exposer.def( 
                "removeAllMoleculeGroups"
                , removeAllMoleculeGroups_function_value );
        
        }
        { //::SireSystem::System::removeAllMolecules
        
            typedef bool ( ::SireSystem::System::*removeAllMolecules_function_type )(  ) ;
            removeAllMolecules_function_type removeAllMolecules_function_value( &::SireSystem::System::removeAllMolecules );
            
            System_exposer.def( 
                "removeAllMolecules"
                , removeAllMolecules_function_value );
        
        }
        { //::SireSystem::System::removeAllMonitors
        
            typedef void ( ::SireSystem::System::*removeAllMonitors_function_type )(  ) ;
            removeAllMonitors_function_type removeAllMonitors_function_value( &::SireSystem::System::removeAllMonitors );
            
            System_exposer.def( 
                "removeAllMonitors"
                , removeAllMonitors_function_value );
        
        }
        { //::SireSystem::System::removeProperty
        
            typedef void ( ::SireSystem::System::*removeProperty_function_type )( ::QString const & ) ;
            removeProperty_function_type removeProperty_function_value( &::SireSystem::System::removeProperty );
            
            System_exposer.def( 
                "removeProperty"
                , removeProperty_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireSystem::System::setComponent
        
            typedef void ( ::SireSystem::System::*setComponent_function_type )( ::SireCAS::Symbol const &,double ) ;
            setComponent_function_type setComponent_function_value( &::SireSystem::System::setComponent );
            
            System_exposer.def( 
                "setComponent"
                , setComponent_function_value
                , ( bp::arg("symbol"), bp::arg("value") ) );
        
        }
        { //::SireSystem::System::setComponent
        
            typedef void ( ::SireSystem::System::*setComponent_function_type )( ::SireCAS::Symbol const &,::SireCAS::Expression const & ) ;
            setComponent_function_type setComponent_function_value( &::SireSystem::System::setComponent );
            
            System_exposer.def( 
                "setComponent"
                , setComponent_function_value
                , ( bp::arg("symbol"), bp::arg("expression") ) );
        
        }
        { //::SireSystem::System::setConstant
        
            typedef void ( ::SireSystem::System::*setConstant_function_type )( ::SireCAS::Symbol const &,double ) ;
            setConstant_function_type setConstant_function_value( &::SireSystem::System::setConstant );
            
            System_exposer.def( 
                "setConstant"
                , setConstant_function_value
                , ( bp::arg("symbol"), bp::arg("value") ) );
        
        }
        { //::SireSystem::System::setConstant
        
            typedef void ( ::SireSystem::System::*setConstant_function_type )( ::SireCAS::Symbol const &,::SireCAS::Expression const & ) ;
            setConstant_function_type setConstant_function_value( &::SireSystem::System::setConstant );
            
            System_exposer.def( 
                "setConstant"
                , setConstant_function_value
                , ( bp::arg("symbol"), bp::arg("expression") ) );
        
        }
        { //::SireSystem::System::setConstantComponent
        
            typedef void ( ::SireSystem::System::*setConstantComponent_function_type )( ::SireCAS::Symbol const &,double ) ;
            setConstantComponent_function_type setConstantComponent_function_value( &::SireSystem::System::setConstantComponent );
            
            System_exposer.def( 
                "setConstantComponent"
                , setConstantComponent_function_value
                , ( bp::arg("symbol"), bp::arg("value") ) );
        
        }
        { //::SireSystem::System::setConstantComponent
        
            typedef void ( ::SireSystem::System::*setConstantComponent_function_type )( ::SireCAS::Symbol const &,::SireCAS::Expression const & ) ;
            setConstantComponent_function_type setConstantComponent_function_value( &::SireSystem::System::setConstantComponent );
            
            System_exposer.def( 
                "setConstantComponent"
                , setConstantComponent_function_value
                , ( bp::arg("symbol"), bp::arg("expression") ) );
        
        }
        { //::SireSystem::System::setConstraints
        
            typedef void ( ::SireSystem::System::*setConstraints_function_type )( ::SireSystem::Constraints const & ) ;
            setConstraints_function_type setConstraints_function_value( &::SireSystem::System::setConstraints );
            
            System_exposer.def( 
                "setConstraints"
                , setConstraints_function_value
                , ( bp::arg("constraints") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molview"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::ViewsOfMol const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molviews"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::Molecules const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molecules"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molgroup"), bp::arg("map") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeView const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molview") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::ViewsOfMol const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molviews") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::Molecules const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molecules") ) );
        
        }
        { //::SireSystem::System::setContents
        
            typedef void ( ::SireSystem::System::*setContents_function_type )( ::SireMol::MGID const &,::SireMol::MoleculeGroup const & ) ;
            setContents_function_type setContents_function_value( &::SireSystem::System::setContents );
            
            System_exposer.def( 
                "setContents"
                , setContents_function_value
                , ( bp::arg("mgid"), bp::arg("molgroup") ) );
        
        }
        { //::SireSystem::System::setEnergyComponent
        
            typedef void ( ::SireSystem::System::*setEnergyComponent_function_type )( ::SireCAS::Symbol const &,::SireCAS::Expression const & ) ;
            setEnergyComponent_function_type setEnergyComponent_function_value( &::SireSystem::System::setEnergyComponent );
            
            System_exposer.def( 
                "setEnergyComponent"
                , setEnergyComponent_function_value
                , ( bp::arg("symbol"), bp::arg("expression") ) );
        
        }
        { //::SireSystem::System::setMonitors
        
            typedef void ( ::SireSystem::System::*setMonitors_function_type )( ::SireSystem::SystemMonitors const & ) ;
            setMonitors_function_type setMonitors_function_value( &::SireSystem::System::setMonitors );
            
            System_exposer.def( 
                "setMonitors"
                , setMonitors_function_value
                , ( bp::arg("monitors") ) );
        
        }
        { //::SireSystem::System::setMonitors
        
            typedef void ( ::SireSystem::System::*setMonitors_function_type )( ::SireSystem::SystemMonitors const &,int ) ;
            setMonitors_function_type setMonitors_function_value( &::SireSystem::System::setMonitors );
            
            System_exposer.def( 
                "setMonitors"
                , setMonitors_function_value
                , ( bp::arg("monitors"), bp::arg("frequency") ) );
        
        }
        { //::SireSystem::System::setName
        
            typedef void ( ::SireSystem::System::*setName_function_type )( ::QString const & ) ;
            setName_function_type setName_function_value( &::SireSystem::System::setName );
            
            System_exposer.def( 
                "setName"
                , setName_function_value
                , ( bp::arg("newname") ) );
        
        }
        { //::SireSystem::System::setProperty
        
            typedef void ( ::SireSystem::System::*setProperty_function_type )( ::QString const &,::SireBase::Property const & ) ;
            setProperty_function_type setProperty_function_value( &::SireSystem::System::setProperty );
            
            System_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireSystem::System::setProperty
        
            typedef void ( ::SireSystem::System::*setProperty_function_type )( ::SireFF::FFID const &,::QString const &,::SireBase::Property const & ) ;
            setProperty_function_type setProperty_function_value( &::SireSystem::System::setProperty );
            
            System_exposer.def( 
                "setProperty"
                , setProperty_function_value
                , ( bp::arg("ffid"), bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireSystem::System::subVersion
        
            typedef ::quint32 ( ::SireSystem::System::*subVersion_function_type )(  ) const;
            subVersion_function_type subVersion_function_value( &::SireSystem::System::subVersion );
            
            System_exposer.def( 
                "subVersion"
                , subVersion_function_value );
        
        }
        { //::SireSystem::System::toString
        
            typedef ::QString ( ::SireSystem::System::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSystem::System::toString );
            
            System_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireSystem::System::totalComponent
        
            typedef ::SireCAS::Symbol const & ( ::SireSystem::System::*totalComponent_function_type )(  ) const;
            totalComponent_function_type totalComponent_function_value( &::SireSystem::System::totalComponent );
            
            System_exposer.def( 
                "totalComponent"
                , totalComponent_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::System::typeName );
            
            System_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::System::update
        
            typedef void ( ::SireSystem::System::*update_function_type )( ::SireMol::MoleculeData const & ) ;
            update_function_type update_function_value( &::SireSystem::System::update );
            
            System_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("moldata") ) );
        
        }
        { //::SireSystem::System::update
        
            typedef void ( ::SireSystem::System::*update_function_type )( ::SireMol::Molecules const & ) ;
            update_function_type update_function_value( &::SireSystem::System::update );
            
            System_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireSystem::System::update
        
            typedef void ( ::SireSystem::System::*update_function_type )( ::SireMol::MoleculeGroup const & ) ;
            update_function_type update_function_value( &::SireSystem::System::update );
            
            System_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireSystem::System::userProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::System::*userProperties_function_type )(  ) const;
            userProperties_function_type userProperties_function_value( &::SireSystem::System::userProperties );
            
            System_exposer.def( 
                "userProperties"
                , userProperties_function_value );
        
        }
        { //::SireSystem::System::userProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::System::*userProperty_function_type )( ::QString const & ) const;
            userProperty_function_type userProperty_function_value( &::SireSystem::System::userProperty );
            
            System_exposer.def( 
                "userProperty"
                , userProperty_function_value
                , ( bp::arg("name") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::System::version
        
            typedef ::SireBase::Version const & ( ::SireSystem::System::*version_function_type )(  ) const;
            version_function_type version_function_value( &::SireSystem::System::version );
            
            System_exposer.def( 
                "version"
                , version_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        System_exposer.staticmethod( "null" );
        System_exposer.staticmethod( "typeName" );
        System_exposer.def( "__copy__", &__copy__);
        System_exposer.def( "__deepcopy__", &__copy__);
        System_exposer.def( "clone", &__copy__);
        System_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::System >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        System_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::System >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        System_exposer.def( "__str__", &__str__< ::SireSystem::System > );
        System_exposer.def( "__repr__", &__str__< ::SireSystem::System > );
        System_exposer.def( "__len__", &__len_count< ::SireSystem::System > );
    }

}
