// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Replicas.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMaths/rangenerator.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "replica.h"

#include "replicas.h"

#include "replicas.h"

SireMove::Replicas __copy__(const SireMove::Replicas &other){ return SireMove::Replicas(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_Replicas_class(){

    { //::SireMove::Replicas
        typedef bp::class_< SireMove::Replicas, bp::bases< SireMove::SupraSystem, SireBase::Property > > Replicas_exposer_t;
        Replicas_exposer_t Replicas_exposer = Replicas_exposer_t( "Replicas", bp::init< >() );
        bp::scope Replicas_scope( Replicas_exposer );
        Replicas_exposer.def( bp::init< int >(( bp::arg("n") )) );
        Replicas_exposer.def( bp::init< SireSystem::System const &, bp::optional< int > >(( bp::arg("system"), bp::arg("n")=(int)(1) )) );
        Replicas_exposer.def( bp::init< QVector< SireSystem::System > const & >(( bp::arg("systems") )) );
        Replicas_exposer.def( bp::init< SireMove::SupraSubSystem const &, bp::optional< int > >(( bp::arg("subsystem"), bp::arg("n")=(int)(1) )) );
        Replicas_exposer.def( bp::init< SireMove::SupraSystem const & >(( bp::arg("suprasystem") )) );
        Replicas_exposer.def( bp::init< SireMove::Replicas const & >(( bp::arg("other") )) );
        { //::SireMove::Replicas::at
        
            typedef ::SireMove::Replica const & ( ::SireMove::Replicas::*at_function_type )( int ) const;
            at_function_type at_function_value( &::SireMove::Replicas::at );
            
            Replicas_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::Replicas::lambdaTrajectory
        
            typedef ::QVector< double > ( ::SireMove::Replicas::*lambdaTrajectory_function_type )(  ) const;
            lambdaTrajectory_function_type lambdaTrajectory_function_value( &::SireMove::Replicas::lambdaTrajectory );
            
            Replicas_exposer.def( 
                "lambdaTrajectory"
                , lambdaTrajectory_function_value );
        
        }
        { //::SireMove::Replicas::nReplicas
        
            typedef int ( ::SireMove::Replicas::*nReplicas_function_type )(  ) const;
            nReplicas_function_type nReplicas_function_value( &::SireMove::Replicas::nReplicas );
            
            Replicas_exposer.def( 
                "nReplicas"
                , nReplicas_function_value );
        
        }
        Replicas_exposer.def( bp::self != bp::self );
        { //::SireMove::Replicas::operator=
        
            typedef ::SireMove::Replicas & ( ::SireMove::Replicas::*assign_function_type )( ::SireMove::Replicas const & ) ;
            assign_function_type assign_function_value( &::SireMove::Replicas::operator= );
            
            Replicas_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Replicas_exposer.def( bp::self == bp::self );
        { //::SireMove::Replicas::operator[]
        
            typedef ::SireMove::Replica const & ( ::SireMove::Replicas::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMove::Replicas::operator[] );
            
            Replicas_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::Replicas::replicaIDs
        
            typedef ::QVector< unsigned int > const & ( ::SireMove::Replicas::*replicaIDs_function_type )(  ) const;
            replicaIDs_function_type replicaIDs_function_value( &::SireMove::Replicas::replicaIDs );
            
            Replicas_exposer.def( 
                "replicaIDs"
                , replicaIDs_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::Replicas::resetReplicaIDs
        
            typedef void ( ::SireMove::Replicas::*resetReplicaIDs_function_type )(  ) ;
            resetReplicaIDs_function_type resetReplicaIDs_function_value( &::SireMove::Replicas::resetReplicaIDs );
            
            Replicas_exposer.def( 
                "resetReplicaIDs"
                , resetReplicaIDs_function_value );
        
        }
        { //::SireMove::Replicas::setChemicalPotential
        
            typedef void ( ::SireMove::Replicas::*setChemicalPotential_function_type )( ::SireUnits::Dimension::MolarEnergy const & ) ;
            setChemicalPotential_function_type setChemicalPotential_function_value( &::SireMove::Replicas::setChemicalPotential );
            
            Replicas_exposer.def( 
                "setChemicalPotential"
                , setChemicalPotential_function_value
                , ( bp::arg("chemical_potential") ) );
        
        }
        { //::SireMove::Replicas::setChemicalPotential
        
            typedef void ( ::SireMove::Replicas::*setChemicalPotential_function_type )( int,::SireUnits::Dimension::MolarEnergy const & ) ;
            setChemicalPotential_function_type setChemicalPotential_function_value( &::SireMove::Replicas::setChemicalPotential );
            
            Replicas_exposer.def( 
                "setChemicalPotential"
                , setChemicalPotential_function_value
                , ( bp::arg("i"), bp::arg("chemical_potential") ) );
        
        }
        { //::SireMove::Replicas::setEnergyComponent
        
            typedef void ( ::SireMove::Replicas::*setEnergyComponent_function_type )( ::SireCAS::Symbol const & ) ;
            setEnergyComponent_function_type setEnergyComponent_function_value( &::SireMove::Replicas::setEnergyComponent );
            
            Replicas_exposer.def( 
                "setEnergyComponent"
                , setEnergyComponent_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireMove::Replicas::setEnergyComponent
        
            typedef void ( ::SireMove::Replicas::*setEnergyComponent_function_type )( int,::SireCAS::Symbol const & ) ;
            setEnergyComponent_function_type setEnergyComponent_function_value( &::SireMove::Replicas::setEnergyComponent );
            
            Replicas_exposer.def( 
                "setEnergyComponent"
                , setEnergyComponent_function_value
                , ( bp::arg("i"), bp::arg("symbol") ) );
        
        }
        { //::SireMove::Replicas::setFugacity
        
            typedef void ( ::SireMove::Replicas::*setFugacity_function_type )( ::SireUnits::Dimension::Pressure const & ) ;
            setFugacity_function_type setFugacity_function_value( &::SireMove::Replicas::setFugacity );
            
            Replicas_exposer.def( 
                "setFugacity"
                , setFugacity_function_value
                , ( bp::arg("fugacity") ) );
        
        }
        { //::SireMove::Replicas::setFugacity
        
            typedef void ( ::SireMove::Replicas::*setFugacity_function_type )( int,::SireUnits::Dimension::Pressure const & ) ;
            setFugacity_function_type setFugacity_function_value( &::SireMove::Replicas::setFugacity );
            
            Replicas_exposer.def( 
                "setFugacity"
                , setFugacity_function_value
                , ( bp::arg("i"), bp::arg("fugacity") ) );
        
        }
        { //::SireMove::Replicas::setGenerator
        
            typedef void ( ::SireMove::Replicas::*setGenerator_function_type )( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::Replicas::setGenerator );
            
            Replicas_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("rangenerator") ) );
        
        }
        { //::SireMove::Replicas::setGenerator
        
            typedef void ( ::SireMove::Replicas::*setGenerator_function_type )( int,::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::Replicas::setGenerator );
            
            Replicas_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("i"), bp::arg("rangenerator") ) );
        
        }
        { //::SireMove::Replicas::setLambdaComponent
        
            typedef void ( ::SireMove::Replicas::*setLambdaComponent_function_type )( ::SireCAS::Symbol const & ) ;
            setLambdaComponent_function_type setLambdaComponent_function_value( &::SireMove::Replicas::setLambdaComponent );
            
            Replicas_exposer.def( 
                "setLambdaComponent"
                , setLambdaComponent_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireMove::Replicas::setLambdaComponent
        
            typedef void ( ::SireMove::Replicas::*setLambdaComponent_function_type )( int,::SireCAS::Symbol const & ) ;
            setLambdaComponent_function_type setLambdaComponent_function_value( &::SireMove::Replicas::setLambdaComponent );
            
            Replicas_exposer.def( 
                "setLambdaComponent"
                , setLambdaComponent_function_value
                , ( bp::arg("i"), bp::arg("symbol") ) );
        
        }
        { //::SireMove::Replicas::setLambdaValue
        
            typedef void ( ::SireMove::Replicas::*setLambdaValue_function_type )( double ) ;
            setLambdaValue_function_type setLambdaValue_function_value( &::SireMove::Replicas::setLambdaValue );
            
            Replicas_exposer.def( 
                "setLambdaValue"
                , setLambdaValue_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMove::Replicas::setLambdaValue
        
            typedef void ( ::SireMove::Replicas::*setLambdaValue_function_type )( int,double ) ;
            setLambdaValue_function_type setLambdaValue_function_value( &::SireMove::Replicas::setLambdaValue );
            
            Replicas_exposer.def( 
                "setLambdaValue"
                , setLambdaValue_function_value
                , ( bp::arg("i"), bp::arg("value") ) );
        
        }
        { //::SireMove::Replicas::setPressure
        
            typedef void ( ::SireMove::Replicas::*setPressure_function_type )( ::SireUnits::Dimension::Pressure const & ) ;
            setPressure_function_type setPressure_function_value( &::SireMove::Replicas::setPressure );
            
            Replicas_exposer.def( 
                "setPressure"
                , setPressure_function_value
                , ( bp::arg("pressure") ) );
        
        }
        { //::SireMove::Replicas::setPressure
        
            typedef void ( ::SireMove::Replicas::*setPressure_function_type )( int,::SireUnits::Dimension::Pressure const & ) ;
            setPressure_function_type setPressure_function_value( &::SireMove::Replicas::setPressure );
            
            Replicas_exposer.def( 
                "setPressure"
                , setPressure_function_value
                , ( bp::arg("i"), bp::arg("pressure") ) );
        
        }
        { //::SireMove::Replicas::setReplica
        
            typedef void ( ::SireMove::Replicas::*setReplica_function_type )( ::SireMove::Replica const & ) ;
            setReplica_function_type setReplica_function_value( &::SireMove::Replicas::setReplica );
            
            Replicas_exposer.def( 
                "setReplica"
                , setReplica_function_value
                , ( bp::arg("replica") ) );
        
        }
        { //::SireMove::Replicas::setReplica
        
            typedef void ( ::SireMove::Replicas::*setReplica_function_type )( int,::SireMove::Replica const & ) ;
            setReplica_function_type setReplica_function_value( &::SireMove::Replicas::setReplica );
            
            Replicas_exposer.def( 
                "setReplica"
                , setReplica_function_value
                , ( bp::arg("i"), bp::arg("replica") ) );
        
        }
        { //::SireMove::Replicas::setReplicas
        
            typedef void ( ::SireMove::Replicas::*setReplicas_function_type )( ::SireMove::Replicas const & ) ;
            setReplicas_function_type setReplicas_function_value( &::SireMove::Replicas::setReplicas );
            
            Replicas_exposer.def( 
                "setReplicas"
                , setReplicas_function_value
                , ( bp::arg("replicas") ) );
        
        }
        { //::SireMove::Replicas::setSpaceProperty
        
            typedef void ( ::SireMove::Replicas::*setSpaceProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setSpaceProperty_function_type setSpaceProperty_function_value( &::SireMove::Replicas::setSpaceProperty );
            
            Replicas_exposer.def( 
                "setSpaceProperty"
                , setSpaceProperty_function_value
                , ( bp::arg("spaceproperty") ) );
        
        }
        { //::SireMove::Replicas::setSpaceProperty
        
            typedef void ( ::SireMove::Replicas::*setSpaceProperty_function_type )( int,::SireBase::PropertyName const & ) ;
            setSpaceProperty_function_type setSpaceProperty_function_value( &::SireMove::Replicas::setSpaceProperty );
            
            Replicas_exposer.def( 
                "setSpaceProperty"
                , setSpaceProperty_function_value
                , ( bp::arg("i"), bp::arg("spaceproperty") ) );
        
        }
        { //::SireMove::Replicas::setSubSystem
        
            typedef void ( ::SireMove::Replicas::*setSubSystem_function_type )( ::SireSystem::System const & ) ;
            setSubSystem_function_type setSubSystem_function_value( &::SireMove::Replicas::setSubSystem );
            
            Replicas_exposer.def( 
                "setSubSystem"
                , setSubSystem_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireMove::Replicas::setSubSystem
        
            typedef void ( ::SireMove::Replicas::*setSubSystem_function_type )( ::SireMove::SupraSubSystem const & ) ;
            setSubSystem_function_type setSubSystem_function_value( &::SireMove::Replicas::setSubSystem );
            
            Replicas_exposer.def( 
                "setSubSystem"
                , setSubSystem_function_value
                , ( bp::arg("subsystem") ) );
        
        }
        { //::SireMove::Replicas::setSubSystem
        
            typedef void ( ::SireMove::Replicas::*setSubSystem_function_type )( int,::SireSystem::System const & ) ;
            setSubSystem_function_type setSubSystem_function_value( &::SireMove::Replicas::setSubSystem );
            
            Replicas_exposer.def( 
                "setSubSystem"
                , setSubSystem_function_value
                , ( bp::arg("i"), bp::arg("system") ) );
        
        }
        { //::SireMove::Replicas::setSubSystem
        
            typedef void ( ::SireMove::Replicas::*setSubSystem_function_type )( int,::SireMove::SupraSubSystem const & ) ;
            setSubSystem_function_type setSubSystem_function_value( &::SireMove::Replicas::setSubSystem );
            
            Replicas_exposer.def( 
                "setSubSystem"
                , setSubSystem_function_value
                , ( bp::arg("i"), bp::arg("subsystem") ) );
        
        }
        { //::SireMove::Replicas::setTemperature
        
            typedef void ( ::SireMove::Replicas::*setTemperature_function_type )( ::SireUnits::Dimension::Temperature const & ) ;
            setTemperature_function_type setTemperature_function_value( &::SireMove::Replicas::setTemperature );
            
            Replicas_exposer.def( 
                "setTemperature"
                , setTemperature_function_value
                , ( bp::arg("temperature") ) );
        
        }
        { //::SireMove::Replicas::setTemperature
        
            typedef void ( ::SireMove::Replicas::*setTemperature_function_type )( int,::SireUnits::Dimension::Temperature const & ) ;
            setTemperature_function_type setTemperature_function_value( &::SireMove::Replicas::setTemperature );
            
            Replicas_exposer.def( 
                "setTemperature"
                , setTemperature_function_value
                , ( bp::arg("i"), bp::arg("temperature") ) );
        
        }
        { //::SireMove::Replicas::swapMolecules
        
            typedef void ( ::SireMove::Replicas::*swapMolecules_function_type )( int,int ) ;
            swapMolecules_function_type swapMolecules_function_value( &::SireMove::Replicas::swapMolecules );
            
            Replicas_exposer.def( 
                "swapMolecules"
                , swapMolecules_function_value
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        { //::SireMove::Replicas::swapSystems
        
            typedef void ( ::SireMove::Replicas::*swapSystems_function_type )( int,int,bool ) ;
            swapSystems_function_type swapSystems_function_value( &::SireMove::Replicas::swapSystems );
            
            Replicas_exposer.def( 
                "swapSystems"
                , swapSystems_function_value
                , ( bp::arg("i"), bp::arg("j"), bp::arg("swap_monitors")=(bool)(true) ) );
        
        }
        { //::SireMove::Replicas::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::Replicas::typeName );
            
            Replicas_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        Replicas_exposer.staticmethod( "typeName" );
        Replicas_exposer.def( "__copy__", &__copy__);
        Replicas_exposer.def( "__deepcopy__", &__copy__);
        Replicas_exposer.def( "clone", &__copy__);
        Replicas_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::Replicas >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Replicas_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::Replicas >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Replicas_exposer.def( "__str__", &__str__< ::SireMove::Replicas > );
        Replicas_exposer.def( "__repr__", &__str__< ::SireMove::Replicas > );
        Replicas_exposer.def( "__len__", &__len_size< ::SireMove::Replicas > );
    }

}
