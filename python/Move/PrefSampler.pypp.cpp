// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "PrefSampler.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/majorminorversion.h"

#include "SireCAS/errors.h"

#include "SireCAS/symbol.h"

#include "SireMol/atomselection.h"

#include "SireMol/molecule.h"

#include "SireMol/molidentifier.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "prefsampler.h"

#include <QDebug>

#include <QMutex>

#include "prefsampler.h"

SireMove::PrefSampler __copy__(const SireMove::PrefSampler &other){ return SireMove::PrefSampler(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_PrefSampler_class(){

    { //::SireMove::PrefSampler
        typedef bp::class_< SireMove::PrefSampler, bp::bases< SireMove::Sampler, SireBase::Property > > PrefSampler_exposer_t;
        PrefSampler_exposer_t PrefSampler_exposer = PrefSampler_exposer_t( "PrefSampler", bp::init< >() );
        bp::scope PrefSampler_scope( PrefSampler_exposer );
        PrefSampler_exposer.def( bp::init< SireUnits::Dimension::Area >(( bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireCAS::Expression const & >(( bp::arg("f") )) );
        PrefSampler_exposer.def( bp::init< SireCAS::Expression const &, SireUnits::Dimension::Area >(( bp::arg("f"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const & >(( bp::arg("point") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const &, SireUnits::Dimension::Area >(( bp::arg("point"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const &, SireCAS::Expression const & >(( bp::arg("point"), bp::arg("f") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const &, SireCAS::Expression const &, SireUnits::Dimension::Area >(( bp::arg("point"), bp::arg("f"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const &, SireMol::MoleculeGroup const & >(( bp::arg("point"), bp::arg("molgroup") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const &, SireMol::MoleculeGroup const &, SireUnits::Dimension::Area >(( bp::arg("point"), bp::arg("molgroup"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const &, SireMol::MoleculeGroup const &, SireCAS::Expression const & >(( bp::arg("point"), bp::arg("molgroup"), bp::arg("f") )) );
        PrefSampler_exposer.def( bp::init< SireMaths::Vector const &, SireMol::MoleculeGroup const &, SireCAS::Expression const &, SireUnits::Dimension::Area >(( bp::arg("point"), bp::arg("molgroup"), bp::arg("f"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molview") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const &, SireUnits::Dimension::Area >(( bp::arg("molview"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const &, SireCAS::Expression const & >(( bp::arg("molview"), bp::arg("f") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const &, SireCAS::Expression const &, SireUnits::Dimension::Area >(( bp::arg("molview"), bp::arg("f"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const &, SireMol::MoleculeGroup const & >(( bp::arg("molview"), bp::arg("molgroup") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const &, SireMol::MoleculeGroup const &, SireUnits::Dimension::Area >(( bp::arg("molview"), bp::arg("molgroup"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const &, SireMol::MoleculeGroup const &, SireCAS::Expression const & >(( bp::arg("molview"), bp::arg("molgroup"), bp::arg("f") )) );
        PrefSampler_exposer.def( bp::init< SireMol::MoleculeView const &, SireMol::MoleculeGroup const &, SireCAS::Expression const &, SireUnits::Dimension::Area >(( bp::arg("molview"), bp::arg("molgroup"), bp::arg("f"), bp::arg("k") )) );
        PrefSampler_exposer.def( bp::init< SireMove::PrefSampler const & >(( bp::arg("other") )) );
        { //::SireMove::PrefSampler::biasingFunction
        
            typedef ::SireCAS::Expression ( ::SireMove::PrefSampler::*biasingFunction_function_type )(  ) const;
            biasingFunction_function_type biasingFunction_function_value( &::SireMove::PrefSampler::biasingFunction );
            
            PrefSampler_exposer.def( 
                "biasingFunction"
                , biasingFunction_function_value );
        
        }
        { //::SireMove::PrefSampler::coordinatesProperty
        
            typedef ::SireBase::PropertyName const & ( ::SireMove::PrefSampler::*coordinatesProperty_function_type )(  ) const;
            coordinatesProperty_function_type coordinatesProperty_function_value( &::SireMove::PrefSampler::coordinatesProperty );
            
            PrefSampler_exposer.def( 
                "coordinatesProperty"
                , coordinatesProperty_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::PrefSampler::focalMolecule
        
            typedef ::SireMol::PartialMolecule const & ( ::SireMove::PrefSampler::*focalMolecule_function_type )(  ) const;
            focalMolecule_function_type focalMolecule_function_value( &::SireMove::PrefSampler::focalMolecule );
            
            PrefSampler_exposer.def( 
                "focalMolecule"
                , focalMolecule_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::PrefSampler::focalPoint
        
            typedef ::SireMaths::Vector const & ( ::SireMove::PrefSampler::*focalPoint_function_type )(  ) const;
            focalPoint_function_type focalPoint_function_value( &::SireMove::PrefSampler::focalPoint );
            
            PrefSampler_exposer.def( 
                "focalPoint"
                , focalPoint_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::PrefSampler::isBiased
        
            typedef bool ( ::SireMove::PrefSampler::*isBiased_function_type )(  ) const;
            isBiased_function_type isBiased_function_value( &::SireMove::PrefSampler::isBiased );
            
            PrefSampler_exposer.def( 
                "isBiased"
                , isBiased_function_value );
        
        }
        { //::SireMove::PrefSampler::k
        
            typedef ::SireCAS::Symbol ( *k_function_type )(  );
            k_function_type k_function_value( &::SireMove::PrefSampler::k );
            
            PrefSampler_exposer.def( 
                "k"
                , k_function_value );
        
        }
        PrefSampler_exposer.def( bp::self != bp::self );
        { //::SireMove::PrefSampler::operator=
        
            typedef ::SireMove::PrefSampler & ( ::SireMove::PrefSampler::*assign_function_type )( ::SireMove::PrefSampler const & ) ;
            assign_function_type assign_function_value( &::SireMove::PrefSampler::operator= );
            
            PrefSampler_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PrefSampler_exposer.def( bp::self == bp::self );
        { //::SireMove::PrefSampler::probabilityOf
        
            typedef double ( ::SireMove::PrefSampler::*probabilityOf_function_type )( ::SireMol::PartialMolecule const & ) const;
            probabilityOf_function_type probabilityOf_function_value( &::SireMove::PrefSampler::probabilityOf );
            
            PrefSampler_exposer.def( 
                "probabilityOf"
                , probabilityOf_function_value
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMove::PrefSampler::probabilityOfMolecule
        
            typedef double ( ::SireMove::PrefSampler::*probabilityOfMolecule_function_type )( ::SireMol::Molecule const & ) const;
            probabilityOfMolecule_function_type probabilityOfMolecule_function_value( &::SireMove::PrefSampler::probabilityOfMolecule );
            
            PrefSampler_exposer.def( 
                "probabilityOfMolecule"
                , probabilityOfMolecule_function_value
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMove::PrefSampler::r
        
            typedef ::SireCAS::Symbol ( *r_function_type )(  );
            r_function_type r_function_value( &::SireMove::PrefSampler::r );
            
            PrefSampler_exposer.def( 
                "r"
                , r_function_value );
        
        }
        { //::SireMove::PrefSampler::sample
        
            typedef ::boost::tuples::tuple< SireMol::PartialMolecule, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMove::PrefSampler::*sample_function_type )(  ) const;
            sample_function_type sample_function_value( &::SireMove::PrefSampler::sample );
            
            PrefSampler_exposer.def( 
                "sample"
                , sample_function_value );
        
        }
        { //::SireMove::PrefSampler::sampleMolecule
        
            typedef ::boost::tuples::tuple< SireMol::Molecule, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireMove::PrefSampler::*sampleMolecule_function_type )(  ) const;
            sampleMolecule_function_type sampleMolecule_function_value( &::SireMove::PrefSampler::sampleMolecule );
            
            PrefSampler_exposer.def( 
                "sampleMolecule"
                , sampleMolecule_function_value );
        
        }
        { //::SireMove::PrefSampler::samplingConstant
        
            typedef ::SireUnits::Dimension::Area ( ::SireMove::PrefSampler::*samplingConstant_function_type )(  ) const;
            samplingConstant_function_type samplingConstant_function_value( &::SireMove::PrefSampler::samplingConstant );
            
            PrefSampler_exposer.def( 
                "samplingConstant"
                , samplingConstant_function_value );
        
        }
        { //::SireMove::PrefSampler::setBiasingFunction
        
            typedef void ( ::SireMove::PrefSampler::*setBiasingFunction_function_type )( ::SireCAS::Expression const & ) ;
            setBiasingFunction_function_type setBiasingFunction_function_value( &::SireMove::PrefSampler::setBiasingFunction );
            
            PrefSampler_exposer.def( 
                "setBiasingFunction"
                , setBiasingFunction_function_value
                , ( bp::arg("f") ) );
        
        }
        { //::SireMove::PrefSampler::setCoordinatesProperty
        
            typedef void ( ::SireMove::PrefSampler::*setCoordinatesProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setCoordinatesProperty_function_type setCoordinatesProperty_function_value( &::SireMove::PrefSampler::setCoordinatesProperty );
            
            PrefSampler_exposer.def( 
                "setCoordinatesProperty"
                , setCoordinatesProperty_function_value
                , ( bp::arg("coords_property") ) );
        
        }
        { //::SireMove::PrefSampler::setFocalMolecule
        
            typedef void ( ::SireMove::PrefSampler::*setFocalMolecule_function_type )( ::SireMol::MoleculeView const & ) ;
            setFocalMolecule_function_type setFocalMolecule_function_value( &::SireMove::PrefSampler::setFocalMolecule );
            
            PrefSampler_exposer.def( 
                "setFocalMolecule"
                , setFocalMolecule_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMove::PrefSampler::setFocalPoint
        
            typedef void ( ::SireMove::PrefSampler::*setFocalPoint_function_type )( ::SireMaths::Vector const & ) ;
            setFocalPoint_function_type setFocalPoint_function_value( &::SireMove::PrefSampler::setFocalPoint );
            
            PrefSampler_exposer.def( 
                "setFocalPoint"
                , setFocalPoint_function_value
                , ( bp::arg("point") ) );
        
        }
        { //::SireMove::PrefSampler::setGroup
        
            typedef void ( ::SireMove::PrefSampler::*setGroup_function_type )( ::SireMol::MoleculeGroup const & ) ;
            setGroup_function_type setGroup_function_value( &::SireMove::PrefSampler::setGroup );
            
            PrefSampler_exposer.def( 
                "setGroup"
                , setGroup_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMove::PrefSampler::setSamplingConstant
        
            typedef void ( ::SireMove::PrefSampler::*setSamplingConstant_function_type )( ::SireUnits::Dimension::Area ) ;
            setSamplingConstant_function_type setSamplingConstant_function_value( &::SireMove::PrefSampler::setSamplingConstant );
            
            PrefSampler_exposer.def( 
                "setSamplingConstant"
                , setSamplingConstant_function_value
                , ( bp::arg("k") ) );
        
        }
        { //::SireMove::PrefSampler::setSpaceProperty
        
            typedef void ( ::SireMove::PrefSampler::*setSpaceProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setSpaceProperty_function_type setSpaceProperty_function_value( &::SireMove::PrefSampler::setSpaceProperty );
            
            PrefSampler_exposer.def( 
                "setSpaceProperty"
                , setSpaceProperty_function_value
                , ( bp::arg("space_property") ) );
        
        }
        { //::SireMove::PrefSampler::spaceProperty
        
            typedef ::SireBase::PropertyName const & ( ::SireMove::PrefSampler::*spaceProperty_function_type )(  ) const;
            spaceProperty_function_type spaceProperty_function_value( &::SireMove::PrefSampler::spaceProperty );
            
            PrefSampler_exposer.def( 
                "spaceProperty"
                , spaceProperty_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::PrefSampler::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::PrefSampler::typeName );
            
            PrefSampler_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMove::PrefSampler::updateFrom
        
            typedef void ( ::SireMove::PrefSampler::*updateFrom_function_type )( ::SireSystem::System const & ) ;
            updateFrom_function_type updateFrom_function_value( &::SireMove::PrefSampler::updateFrom );
            
            PrefSampler_exposer.def( 
                "updateFrom"
                , updateFrom_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireMove::PrefSampler::usingFocalMolecule
        
            typedef bool ( ::SireMove::PrefSampler::*usingFocalMolecule_function_type )(  ) const;
            usingFocalMolecule_function_type usingFocalMolecule_function_value( &::SireMove::PrefSampler::usingFocalMolecule );
            
            PrefSampler_exposer.def( 
                "usingFocalMolecule"
                , usingFocalMolecule_function_value );
        
        }
        { //::SireMove::PrefSampler::usingFocalPoint
        
            typedef bool ( ::SireMove::PrefSampler::*usingFocalPoint_function_type )(  ) const;
            usingFocalPoint_function_type usingFocalPoint_function_value( &::SireMove::PrefSampler::usingFocalPoint );
            
            PrefSampler_exposer.def( 
                "usingFocalPoint"
                , usingFocalPoint_function_value );
        
        }
        PrefSampler_exposer.staticmethod( "k" );
        PrefSampler_exposer.staticmethod( "r" );
        PrefSampler_exposer.staticmethod( "typeName" );
        PrefSampler_exposer.def( "__copy__", &__copy__);
        PrefSampler_exposer.def( "__deepcopy__", &__copy__);
        PrefSampler_exposer.def( "clone", &__copy__);
        PrefSampler_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::PrefSampler >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PrefSampler_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::PrefSampler >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PrefSampler_exposer.def( "__str__", &__str__< ::SireMove::PrefSampler > );
        PrefSampler_exposer.def( "__repr__", &__str__< ::SireMove::PrefSampler > );
    }

}
