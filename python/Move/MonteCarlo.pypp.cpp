// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "MonteCarlo.pypp.hpp"

namespace bp = boost::python;

#include "SireFF/forcefields.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "montecarlo.h"

#include <QDebug>

#include <cmath>

#include "montecarlo.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_MonteCarlo_class(){

    { //::SireMove::MonteCarlo
        typedef bp::class_< SireMove::MonteCarlo, bp::bases< SireMove::Move, SireBase::Property >, boost::noncopyable > MonteCarlo_exposer_t;
        MonteCarlo_exposer_t MonteCarlo_exposer = MonteCarlo_exposer_t( "MonteCarlo", bp::no_init );
        bp::scope MonteCarlo_scope( MonteCarlo_exposer );
        { //::SireMove::MonteCarlo::acceptanceRatio
        
            typedef double ( ::SireMove::MonteCarlo::*acceptanceRatio_function_type )(  ) const;
            acceptanceRatio_function_type acceptanceRatio_function_value( &::SireMove::MonteCarlo::acceptanceRatio );
            
            MonteCarlo_exposer.def( 
                "acceptanceRatio"
                , acceptanceRatio_function_value );
        
        }
        { //::SireMove::MonteCarlo::clearStatistics
        
            typedef void ( ::SireMove::MonteCarlo::*clearStatistics_function_type )(  ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireMove::MonteCarlo::clearStatistics );
            
            MonteCarlo_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value );
        
        }
        { //::SireMove::MonteCarlo::ensemble
        
            typedef ::SireMove::Ensemble ( ::SireMove::MonteCarlo::*ensemble_function_type )(  ) const;
            ensemble_function_type ensemble_function_value( &::SireMove::MonteCarlo::ensemble );
            
            MonteCarlo_exposer.def( 
                "ensemble"
                , ensemble_function_value );
        
        }
        { //::SireMove::MonteCarlo::generator
        
            typedef ::SireMaths::RanGenerator const & ( ::SireMove::MonteCarlo::*generator_function_type )(  ) const;
            generator_function_type generator_function_value( &::SireMove::MonteCarlo::generator );
            
            MonteCarlo_exposer.def( 
                "generator"
                , generator_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::MonteCarlo::nAccepted
        
            typedef ::quint32 ( ::SireMove::MonteCarlo::*nAccepted_function_type )(  ) const;
            nAccepted_function_type nAccepted_function_value( &::SireMove::MonteCarlo::nAccepted );
            
            MonteCarlo_exposer.def( 
                "nAccepted"
                , nAccepted_function_value );
        
        }
        { //::SireMove::MonteCarlo::nAttempted
        
            typedef ::quint32 ( ::SireMove::MonteCarlo::*nAttempted_function_type )(  ) const;
            nAttempted_function_type nAttempted_function_value( &::SireMove::MonteCarlo::nAttempted );
            
            MonteCarlo_exposer.def( 
                "nAttempted"
                , nAttempted_function_value );
        
        }
        { //::SireMove::MonteCarlo::nMoves
        
            typedef int ( ::SireMove::MonteCarlo::*nMoves_function_type )(  ) const;
            nMoves_function_type nMoves_function_value( &::SireMove::MonteCarlo::nMoves );
            
            MonteCarlo_exposer.def( 
                "nMoves"
                , nMoves_function_value );
        
        }
        { //::SireMove::MonteCarlo::nRejected
        
            typedef ::quint32 ( ::SireMove::MonteCarlo::*nRejected_function_type )(  ) const;
            nRejected_function_type nRejected_function_value( &::SireMove::MonteCarlo::nRejected );
            
            MonteCarlo_exposer.def( 
                "nRejected"
                , nRejected_function_value );
        
        }
        { //::SireMove::MonteCarlo::setGenerator
        
            typedef void ( ::SireMove::MonteCarlo::*setGenerator_function_type )( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::MonteCarlo::setGenerator );
            
            MonteCarlo_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("generator") ) );
        
        }
        { //::SireMove::MonteCarlo::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::MonteCarlo::typeName );
            
            MonteCarlo_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        MonteCarlo_exposer.staticmethod( "typeName" );
        MonteCarlo_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::MonteCarlo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MonteCarlo_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::MonteCarlo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MonteCarlo_exposer.def( "__str__", &__str__< ::SireMove::MonteCarlo > );
        MonteCarlo_exposer.def( "__repr__", &__str__< ::SireMove::MonteCarlo > );
    }

}
