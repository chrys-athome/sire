// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "ZMatrixCoords.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMol/angleid.h"

#include "SireMol/atommatcher.h"

#include "SireMol/bondid.h"

#include "SireMol/dihedralid.h"

#include "SireMol/errors.h"

#include "SireMol/molecule.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireMove/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/convert.h"

#include "SireUnits/units.h"

#include "zmatrix.h"

#include <QDebug>

#include <QTime>

#include "zmatrix.h"

SireMove::ZMatrixCoords __copy__(const SireMove::ZMatrixCoords &other){ return SireMove::ZMatrixCoords(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_ZMatrixCoords_class(){

    { //::SireMove::ZMatrixCoords
        typedef bp::class_< SireMove::ZMatrixCoords, bp::bases< SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > ZMatrixCoords_exposer_t;
        ZMatrixCoords_exposer_t ZMatrixCoords_exposer = ZMatrixCoords_exposer_t( "ZMatrixCoords", bp::init< >() );
        bp::scope ZMatrixCoords_scope( ZMatrixCoords_exposer );
        ZMatrixCoords_exposer.def( bp::init< SireMol::PartialMolecule const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molecule"), bp::arg("map")=SireBase::PropertyMap() )) );
        ZMatrixCoords_exposer.def( bp::init< SireMove::ZMatrix const &, SireMol::PartialMolecule const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("zmatrix"), bp::arg("molecule"), bp::arg("map")=SireBase::PropertyMap() )) );
        ZMatrixCoords_exposer.def( bp::init< SireMove::ZMatrix const &, SireMol::AtomCoords const & >(( bp::arg("zmatrix"), bp::arg("coords") )) );
        ZMatrixCoords_exposer.def( bp::init< SireMove::ZMatrixCoords const & >(( bp::arg("other") )) );
        { //::SireMove::ZMatrixCoords::add
        
            typedef void ( ::SireMove::ZMatrixCoords::*add_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) ;
            add_function_type add_function_value( &::SireMove::ZMatrixCoords::add );
            
            ZMatrixCoords_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::add
        
            typedef void ( ::SireMove::ZMatrixCoords::*add_function_type )( ::SireMol::DihedralID const & ) ;
            add_function_type add_function_value( &::SireMove::ZMatrixCoords::add );
            
            ZMatrixCoords_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::add
        
            typedef void ( ::SireMove::ZMatrixCoords::*add_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Length const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const &,::SireMol::AtomID const & ) ;
            add_function_type add_function_value( &::SireMove::ZMatrixCoords::add );
            
            ZMatrixCoords_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("atom"), bp::arg("bondlength"), bp::arg("bond"), bp::arg("anglesize"), bp::arg("angle"), bp::arg("dihedralsize"), bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::add
        
            typedef void ( ::SireMove::ZMatrixCoords::*add_function_type )( ::SireMove::ZMatrixLine const & ) ;
            add_function_type add_function_value( &::SireMove::ZMatrixCoords::add );
            
            ZMatrixCoords_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("zmatline") ) );
        
        }
        { //::SireMove::ZMatrixCoords::add
        
            typedef void ( ::SireMove::ZMatrixCoords::*add_function_type )( ::SireMove::ZMatrixCoordsLine const & ) ;
            add_function_type add_function_value( &::SireMove::ZMatrixCoords::add );
            
            ZMatrixCoords_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("zmatline") ) );
        
        }
        { //::SireMove::ZMatrixCoords::angleDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*angleDelta_function_type )( ::SireMol::AtomID const & ) const;
            angleDelta_function_type angleDelta_function_value( &::SireMove::ZMatrixCoords::angleDelta );
            
            ZMatrixCoords_exposer.def( 
                "angleDelta"
                , angleDelta_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::angleDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*angleDelta_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            angleDelta_function_type angleDelta_function_value( &::SireMove::ZMatrixCoords::angleDelta );
            
            ZMatrixCoords_exposer.def( 
                "angleDelta"
                , angleDelta_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::angleSize
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*angleSize_function_type )( ::SireMol::AtomID const & ) const;
            angleSize_function_type angleSize_function_value( &::SireMove::ZMatrixCoords::angleSize );
            
            ZMatrixCoords_exposer.def( 
                "angleSize"
                , angleSize_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::angleSize
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*angleSize_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            angleSize_function_type angleSize_function_value( &::SireMove::ZMatrixCoords::angleSize );
            
            ZMatrixCoords_exposer.def( 
                "angleSize"
                , angleSize_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::at
        
            typedef ::SireMove::ZMatrixCoordsLine ( ::SireMove::ZMatrixCoords::*at_function_type )( ::SireMol::AtomID const & ) const;
            at_function_type at_function_value( &::SireMove::ZMatrixCoords::at );
            
            ZMatrixCoords_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::bondDelta
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::ZMatrixCoords::*bondDelta_function_type )( ::SireMol::AtomID const & ) const;
            bondDelta_function_type bondDelta_function_value( &::SireMove::ZMatrixCoords::bondDelta );
            
            ZMatrixCoords_exposer.def( 
                "bondDelta"
                , bondDelta_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::bondDelta
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::ZMatrixCoords::*bondDelta_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            bondDelta_function_type bondDelta_function_value( &::SireMove::ZMatrixCoords::bondDelta );
            
            ZMatrixCoords_exposer.def( 
                "bondDelta"
                , bondDelta_function_value
                , ( bp::arg("atom"), bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::bondLength
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::ZMatrixCoords::*bondLength_function_type )( ::SireMol::AtomID const & ) const;
            bondLength_function_type bondLength_function_value( &::SireMove::ZMatrixCoords::bondLength );
            
            ZMatrixCoords_exposer.def( 
                "bondLength"
                , bondLength_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::bondLength
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::ZMatrixCoords::*bondLength_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            bondLength_function_type bondLength_function_value( &::SireMove::ZMatrixCoords::bondLength );
            
            ZMatrixCoords_exposer.def( 
                "bondLength"
                , bondLength_function_value
                , ( bp::arg("atom"), bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::contains
        
            typedef bool ( ::SireMove::ZMatrixCoords::*contains_function_type )( ::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMove::ZMatrixCoords::contains );
            
            ZMatrixCoords_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::contains
        
            typedef bool ( ::SireMove::ZMatrixCoords::*contains_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMove::ZMatrixCoords::contains );
            
            ZMatrixCoords_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("atom"), bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::contains
        
            typedef bool ( ::SireMove::ZMatrixCoords::*contains_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMove::ZMatrixCoords::contains );
            
            ZMatrixCoords_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::contains
        
            typedef bool ( ::SireMove::ZMatrixCoords::*contains_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            contains_function_type contains_function_value( &::SireMove::ZMatrixCoords::contains );
            
            ZMatrixCoords_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::contains
        
            typedef bool ( ::SireMove::ZMatrixCoords::*contains_function_type )( ::SireMol::BondID const & ) const;
            contains_function_type contains_function_value( &::SireMove::ZMatrixCoords::contains );
            
            ZMatrixCoords_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::contains
        
            typedef bool ( ::SireMove::ZMatrixCoords::*contains_function_type )( ::SireMol::AngleID const & ) const;
            contains_function_type contains_function_value( &::SireMove::ZMatrixCoords::contains );
            
            ZMatrixCoords_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::contains
        
            typedef bool ( ::SireMove::ZMatrixCoords::*contains_function_type )( ::SireMol::DihedralID const & ) const;
            contains_function_type contains_function_value( &::SireMove::ZMatrixCoords::contains );
            
            ZMatrixCoords_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::delta
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::ZMatrixCoords::*delta_function_type )( ::SireMol::BondID const & ) const;
            delta_function_type delta_function_value( &::SireMove::ZMatrixCoords::delta );
            
            ZMatrixCoords_exposer.def( 
                "delta"
                , delta_function_value
                , ( bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::delta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*delta_function_type )( ::SireMol::AngleID const & ) const;
            delta_function_type delta_function_value( &::SireMove::ZMatrixCoords::delta );
            
            ZMatrixCoords_exposer.def( 
                "delta"
                , delta_function_value
                , ( bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::delta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*delta_function_type )( ::SireMol::DihedralID const & ) const;
            delta_function_type delta_function_value( &::SireMove::ZMatrixCoords::delta );
            
            ZMatrixCoords_exposer.def( 
                "delta"
                , delta_function_value
                , ( bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::dihedralDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*dihedralDelta_function_type )( ::SireMol::AtomID const & ) const;
            dihedralDelta_function_type dihedralDelta_function_value( &::SireMove::ZMatrixCoords::dihedralDelta );
            
            ZMatrixCoords_exposer.def( 
                "dihedralDelta"
                , dihedralDelta_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::dihedralDelta
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*dihedralDelta_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            dihedralDelta_function_type dihedralDelta_function_value( &::SireMove::ZMatrixCoords::dihedralDelta );
            
            ZMatrixCoords_exposer.def( 
                "dihedralDelta"
                , dihedralDelta_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::dihedralSize
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*dihedralSize_function_type )( ::SireMol::AtomID const & ) const;
            dihedralSize_function_type dihedralSize_function_value( &::SireMove::ZMatrixCoords::dihedralSize );
            
            ZMatrixCoords_exposer.def( 
                "dihedralSize"
                , dihedralSize_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::dihedralSize
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*dihedralSize_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            dihedralSize_function_type dihedralSize_function_value( &::SireMove::ZMatrixCoords::dihedralSize );
            
            ZMatrixCoords_exposer.def( 
                "dihedralSize"
                , dihedralSize_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::getIndex
        
            typedef int ( ::SireMove::ZMatrixCoords::*getIndex_function_type )( ::SireMol::AtomID const & ) const;
            getIndex_function_type getIndex_function_value( &::SireMove::ZMatrixCoords::getIndex );
            
            ZMatrixCoords_exposer.def( 
                "getIndex"
                , getIndex_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::getIndex
        
            typedef int ( ::SireMove::ZMatrixCoords::*getIndex_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            getIndex_function_type getIndex_function_value( &::SireMove::ZMatrixCoords::getIndex );
            
            ZMatrixCoords_exposer.def( 
                "getIndex"
                , getIndex_function_value
                , ( bp::arg("atom"), bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::getIndex
        
            typedef int ( ::SireMove::ZMatrixCoords::*getIndex_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            getIndex_function_type getIndex_function_value( &::SireMove::ZMatrixCoords::getIndex );
            
            ZMatrixCoords_exposer.def( 
                "getIndex"
                , getIndex_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::getIndex
        
            typedef int ( ::SireMove::ZMatrixCoords::*getIndex_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) const;
            getIndex_function_type getIndex_function_value( &::SireMove::ZMatrixCoords::getIndex );
            
            ZMatrixCoords_exposer.def( 
                "getIndex"
                , getIndex_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::getIndex
        
            typedef int ( ::SireMove::ZMatrixCoords::*getIndex_function_type )( ::SireMol::BondID const & ) const;
            getIndex_function_type getIndex_function_value( &::SireMove::ZMatrixCoords::getIndex );
            
            ZMatrixCoords_exposer.def( 
                "getIndex"
                , getIndex_function_value
                , ( bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::getIndex
        
            typedef int ( ::SireMove::ZMatrixCoords::*getIndex_function_type )( ::SireMol::AngleID const & ) const;
            getIndex_function_type getIndex_function_value( &::SireMove::ZMatrixCoords::getIndex );
            
            ZMatrixCoords_exposer.def( 
                "getIndex"
                , getIndex_function_value
                , ( bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::getIndex
        
            typedef int ( ::SireMove::ZMatrixCoords::*getIndex_function_type )( ::SireMol::DihedralID const & ) const;
            getIndex_function_type getIndex_function_value( &::SireMove::ZMatrixCoords::getIndex );
            
            ZMatrixCoords_exposer.def( 
                "getIndex"
                , getIndex_function_value
                , ( bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::index
        
            typedef ::QHash< SireMol::AtomIdx, int > const & ( ::SireMove::ZMatrixCoords::*index_function_type )(  ) const;
            index_function_type index_function_value( &::SireMove::ZMatrixCoords::index );
            
            ZMatrixCoords_exposer.def( 
                "index"
                , index_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::ZMatrixCoords::info
        
            typedef ::SireMol::MoleculeInfoData const & ( ::SireMove::ZMatrixCoords::*info_function_type )(  ) const;
            info_function_type info_function_value( &::SireMove::ZMatrixCoords::info );
            
            ZMatrixCoords_exposer.def( 
                "info"
                , info_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::ZMatrixCoords::internalCoordinates
        
            typedef ::QVector< SireMaths::Vector > const & ( ::SireMove::ZMatrixCoords::*internalCoordinates_function_type )(  ) const;
            internalCoordinates_function_type internalCoordinates_function_value( &::SireMove::ZMatrixCoords::internalCoordinates );
            
            ZMatrixCoords_exposer.def( 
                "internalCoordinates"
                , internalCoordinates_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::ZMatrixCoords::isCompatibleWith
        
            typedef bool ( ::SireMove::ZMatrixCoords::*isCompatibleWith_function_type )( ::SireMol::MoleculeInfoData const & ) const;
            isCompatibleWith_function_type isCompatibleWith_function_value( &::SireMove::ZMatrixCoords::isCompatibleWith );
            
            ZMatrixCoords_exposer.def( 
                "isCompatibleWith"
                , isCompatibleWith_function_value
                , ( bp::arg("molinfo") ) );
        
        }
        { //::SireMove::ZMatrixCoords::length
        
            typedef ::SireUnits::Dimension::Length ( ::SireMove::ZMatrixCoords::*length_function_type )( ::SireMol::BondID const & ) const;
            length_function_type length_function_value( &::SireMove::ZMatrixCoords::length );
            
            ZMatrixCoords_exposer.def( 
                "length"
                , length_function_value
                , ( bp::arg("bond") ) );
        
        }
        { //::SireMove::ZMatrixCoords::lines
        
            typedef ::QVector< SireMove::ZMatrixCoordsLine > ( ::SireMove::ZMatrixCoords::*lines_function_type )(  ) const;
            lines_function_type lines_function_value( &::SireMove::ZMatrixCoords::lines );
            
            ZMatrixCoords_exposer.def( 
                "lines"
                , lines_function_value );
        
        }
        { //::SireMove::ZMatrixCoords::matchToSelection
        
            typedef ::SireMove::ZMatrixCoords ( ::SireMove::ZMatrixCoords::*matchToSelection_function_type )( ::SireMol::AtomSelection const & ) const;
            matchToSelection_function_type matchToSelection_function_value( &::SireMove::ZMatrixCoords::matchToSelection );
            
            ZMatrixCoords_exposer.def( 
                "matchToSelection"
                , matchToSelection_function_value
                , ( bp::arg("selection") ) );
        
        }
        { //::SireMove::ZMatrixCoords::move
        
            typedef void ( ::SireMove::ZMatrixCoords::*move_function_type )( ::SireMol::BondID const &,::SireUnits::Dimension::Length const & ) ;
            move_function_type move_function_value( &::SireMove::ZMatrixCoords::move );
            
            ZMatrixCoords_exposer.def( 
                "move"
                , move_function_value
                , ( bp::arg("bond"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::move
        
            typedef void ( ::SireMove::ZMatrixCoords::*move_function_type )( ::SireMol::AngleID const &,::SireUnits::Dimension::Angle const & ) ;
            move_function_type move_function_value( &::SireMove::ZMatrixCoords::move );
            
            ZMatrixCoords_exposer.def( 
                "move"
                , move_function_value
                , ( bp::arg("angle"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::move
        
            typedef void ( ::SireMove::ZMatrixCoords::*move_function_type )( ::SireMol::DihedralID const &,::SireUnits::Dimension::Angle const & ) ;
            move_function_type move_function_value( &::SireMove::ZMatrixCoords::move );
            
            ZMatrixCoords_exposer.def( 
                "move"
                , move_function_value
                , ( bp::arg("dihedral"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::moveAngle
        
            typedef void ( ::SireMove::ZMatrixCoords::*moveAngle_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            moveAngle_function_type moveAngle_function_value( &::SireMove::ZMatrixCoords::moveAngle );
            
            ZMatrixCoords_exposer.def( 
                "moveAngle"
                , moveAngle_function_value
                , ( bp::arg("atom"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::moveAngle
        
            typedef void ( ::SireMove::ZMatrixCoords::*moveAngle_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            moveAngle_function_type moveAngle_function_value( &::SireMove::ZMatrixCoords::moveAngle );
            
            ZMatrixCoords_exposer.def( 
                "moveAngle"
                , moveAngle_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::moveBond
        
            typedef void ( ::SireMove::ZMatrixCoords::*moveBond_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Length const & ) ;
            moveBond_function_type moveBond_function_value( &::SireMove::ZMatrixCoords::moveBond );
            
            ZMatrixCoords_exposer.def( 
                "moveBond"
                , moveBond_function_value
                , ( bp::arg("atom"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::moveBond
        
            typedef void ( ::SireMove::ZMatrixCoords::*moveBond_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Length const & ) ;
            moveBond_function_type moveBond_function_value( &::SireMove::ZMatrixCoords::moveBond );
            
            ZMatrixCoords_exposer.def( 
                "moveBond"
                , moveBond_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::moveDihedral
        
            typedef void ( ::SireMove::ZMatrixCoords::*moveDihedral_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            moveDihedral_function_type moveDihedral_function_value( &::SireMove::ZMatrixCoords::moveDihedral );
            
            ZMatrixCoords_exposer.def( 
                "moveDihedral"
                , moveDihedral_function_value
                , ( bp::arg("atom"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::moveDihedral
        
            typedef void ( ::SireMove::ZMatrixCoords::*moveDihedral_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            moveDihedral_function_type moveDihedral_function_value( &::SireMove::ZMatrixCoords::moveDihedral );
            
            ZMatrixCoords_exposer.def( 
                "moveDihedral"
                , moveDihedral_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("delta") ) );
        
        }
        ZMatrixCoords_exposer.def( bp::self != bp::self );
        { //::SireMove::ZMatrixCoords::operator=
        
            typedef ::SireMove::ZMatrixCoords & ( ::SireMove::ZMatrixCoords::*assign_function_type )( ::SireMove::ZMatrixCoords const & ) ;
            assign_function_type assign_function_value( &::SireMove::ZMatrixCoords::operator= );
            
            ZMatrixCoords_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ZMatrixCoords_exposer.def( bp::self == bp::self );
        { //::SireMove::ZMatrixCoords::operator[]
        
            typedef ::SireMove::ZMatrixCoordsLine ( ::SireMove::ZMatrixCoords::*__getitem___function_type )( ::SireMol::AtomID const & ) const;
            __getitem___function_type __getitem___function_value( &::SireMove::ZMatrixCoords::operator[] );
            
            ZMatrixCoords_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::remove
        
            typedef void ( ::SireMove::ZMatrixCoords::*remove_function_type )( ::SireMol::AtomID const & ) ;
            remove_function_type remove_function_value( &::SireMove::ZMatrixCoords::remove );
            
            ZMatrixCoords_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMove::ZMatrixCoords::remove
        
            typedef void ( ::SireMove::ZMatrixCoords::*remove_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const & ) ;
            remove_function_type remove_function_value( &::SireMove::ZMatrixCoords::remove );
            
            ZMatrixCoords_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::remove
        
            typedef void ( ::SireMove::ZMatrixCoords::*remove_function_type )( ::SireMol::DihedralID const & ) ;
            remove_function_type remove_function_value( &::SireMove::ZMatrixCoords::remove );
            
            ZMatrixCoords_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::remove
        
            typedef void ( ::SireMove::ZMatrixCoords::*remove_function_type )( ::SireMove::ZMatrixLine const & ) ;
            remove_function_type remove_function_value( &::SireMove::ZMatrixCoords::remove );
            
            ZMatrixCoords_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("zmatline") ) );
        
        }
        { //::SireMove::ZMatrixCoords::set
        
            typedef void ( ::SireMove::ZMatrixCoords::*set_function_type )( ::SireMol::BondID const &,::SireUnits::Dimension::Length const & ) ;
            set_function_type set_function_value( &::SireMove::ZMatrixCoords::set );
            
            ZMatrixCoords_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("bond"), bp::arg("length") ) );
        
        }
        { //::SireMove::ZMatrixCoords::set
        
            typedef void ( ::SireMove::ZMatrixCoords::*set_function_type )( ::SireMol::AngleID const &,::SireUnits::Dimension::Angle const & ) ;
            set_function_type set_function_value( &::SireMove::ZMatrixCoords::set );
            
            ZMatrixCoords_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("angle"), bp::arg("size") ) );
        
        }
        { //::SireMove::ZMatrixCoords::set
        
            typedef void ( ::SireMove::ZMatrixCoords::*set_function_type )( ::SireMol::DihedralID const &,::SireUnits::Dimension::Angle const & ) ;
            set_function_type set_function_value( &::SireMove::ZMatrixCoords::set );
            
            ZMatrixCoords_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("dihedral"), bp::arg("size") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setAngle
        
            typedef void ( ::SireMove::ZMatrixCoords::*setAngle_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setAngle_function_type setAngle_function_value( &::SireMove::ZMatrixCoords::setAngle );
            
            ZMatrixCoords_exposer.def( 
                "setAngle"
                , setAngle_function_value
                , ( bp::arg("atom"), bp::arg("size") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setAngle
        
            typedef void ( ::SireMove::ZMatrixCoords::*setAngle_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setAngle_function_type setAngle_function_value( &::SireMove::ZMatrixCoords::setAngle );
            
            ZMatrixCoords_exposer.def( 
                "setAngle"
                , setAngle_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("size") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setAngleDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setAngleDelta_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setAngleDelta_function_type setAngleDelta_function_value( &::SireMove::ZMatrixCoords::setAngleDelta );
            
            ZMatrixCoords_exposer.def( 
                "setAngleDelta"
                , setAngleDelta_function_value
                , ( bp::arg("atom"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setAngleDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setAngleDelta_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setAngleDelta_function_type setAngleDelta_function_value( &::SireMove::ZMatrixCoords::setAngleDelta );
            
            ZMatrixCoords_exposer.def( 
                "setAngleDelta"
                , setAngleDelta_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setBond
        
            typedef void ( ::SireMove::ZMatrixCoords::*setBond_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Length const & ) ;
            setBond_function_type setBond_function_value( &::SireMove::ZMatrixCoords::setBond );
            
            ZMatrixCoords_exposer.def( 
                "setBond"
                , setBond_function_value
                , ( bp::arg("atom"), bp::arg("length") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setBond
        
            typedef void ( ::SireMove::ZMatrixCoords::*setBond_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Length const & ) ;
            setBond_function_type setBond_function_value( &::SireMove::ZMatrixCoords::setBond );
            
            ZMatrixCoords_exposer.def( 
                "setBond"
                , setBond_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("length") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setBondDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setBondDelta_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Length const & ) ;
            setBondDelta_function_type setBondDelta_function_value( &::SireMove::ZMatrixCoords::setBondDelta );
            
            ZMatrixCoords_exposer.def( 
                "setBondDelta"
                , setBondDelta_function_value
                , ( bp::arg("atom"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setBondDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setBondDelta_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Length const & ) ;
            setBondDelta_function_type setBondDelta_function_value( &::SireMove::ZMatrixCoords::setBondDelta );
            
            ZMatrixCoords_exposer.def( 
                "setBondDelta"
                , setBondDelta_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setDelta_function_type )( ::SireMol::BondID const &,::SireUnits::Dimension::Length const & ) ;
            setDelta_function_type setDelta_function_value( &::SireMove::ZMatrixCoords::setDelta );
            
            ZMatrixCoords_exposer.def( 
                "setDelta"
                , setDelta_function_value
                , ( bp::arg("bond"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setDelta_function_type )( ::SireMol::AngleID const &,::SireUnits::Dimension::Angle const & ) ;
            setDelta_function_type setDelta_function_value( &::SireMove::ZMatrixCoords::setDelta );
            
            ZMatrixCoords_exposer.def( 
                "setDelta"
                , setDelta_function_value
                , ( bp::arg("angle"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setDelta_function_type )( ::SireMol::DihedralID const &,::SireUnits::Dimension::Angle const & ) ;
            setDelta_function_type setDelta_function_value( &::SireMove::ZMatrixCoords::setDelta );
            
            ZMatrixCoords_exposer.def( 
                "setDelta"
                , setDelta_function_value
                , ( bp::arg("dihedral"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setDihedral
        
            typedef void ( ::SireMove::ZMatrixCoords::*setDihedral_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setDihedral_function_type setDihedral_function_value( &::SireMove::ZMatrixCoords::setDihedral );
            
            ZMatrixCoords_exposer.def( 
                "setDihedral"
                , setDihedral_function_value
                , ( bp::arg("atom"), bp::arg("size") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setDihedral
        
            typedef void ( ::SireMove::ZMatrixCoords::*setDihedral_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setDihedral_function_type setDihedral_function_value( &::SireMove::ZMatrixCoords::setDihedral );
            
            ZMatrixCoords_exposer.def( 
                "setDihedral"
                , setDihedral_function_value
                , ( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("size") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setDihedralDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setDihedralDelta_function_type )( ::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setDihedralDelta_function_type setDihedralDelta_function_value( &::SireMove::ZMatrixCoords::setDihedralDelta );
            
            ZMatrixCoords_exposer.def( 
                "setDihedralDelta"
                , setDihedralDelta_function_value
                , ( bp::arg("atom"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::setDihedralDelta
        
            typedef void ( ::SireMove::ZMatrixCoords::*setDihedralDelta_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireMol::AtomID const &,::SireUnits::Dimension::Angle const & ) ;
            setDihedralDelta_function_type setDihedralDelta_function_value( &::SireMove::ZMatrixCoords::setDihedralDelta );
            
            ZMatrixCoords_exposer.def( 
                "setDihedralDelta"
                , setDihedralDelta_function_value
                , ( bp::arg("atom"), bp::arg("bond"), bp::arg("angle"), bp::arg("dihedral"), bp::arg("delta") ) );
        
        }
        { //::SireMove::ZMatrixCoords::size
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*size_function_type )( ::SireMol::AngleID const & ) const;
            size_function_type size_function_value( &::SireMove::ZMatrixCoords::size );
            
            ZMatrixCoords_exposer.def( 
                "size"
                , size_function_value
                , ( bp::arg("angle") ) );
        
        }
        { //::SireMove::ZMatrixCoords::size
        
            typedef ::SireUnits::Dimension::Angle ( ::SireMove::ZMatrixCoords::*size_function_type )( ::SireMol::DihedralID const & ) const;
            size_function_type size_function_value( &::SireMove::ZMatrixCoords::size );
            
            ZMatrixCoords_exposer.def( 
                "size"
                , size_function_value
                , ( bp::arg("dihedral") ) );
        
        }
        { //::SireMove::ZMatrixCoords::toCartesian
        
            typedef ::SireMol::AtomCoords const & ( ::SireMove::ZMatrixCoords::*toCartesian_function_type )(  ) const;
            toCartesian_function_type toCartesian_function_value( &::SireMove::ZMatrixCoords::toCartesian );
            
            ZMatrixCoords_exposer.def( 
                "toCartesian"
                , toCartesian_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::ZMatrixCoords::toString
        
            typedef ::QString ( ::SireMove::ZMatrixCoords::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMove::ZMatrixCoords::toString );
            
            ZMatrixCoords_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMove::ZMatrixCoords::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::ZMatrixCoords::typeName );
            
            ZMatrixCoords_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMove::ZMatrixCoords::zmatrix
        
            typedef ::SireMove::ZMatrix const & ( ::SireMove::ZMatrixCoords::*zmatrix_function_type )(  ) const;
            zmatrix_function_type zmatrix_function_value( &::SireMove::ZMatrixCoords::zmatrix );
            
            ZMatrixCoords_exposer.def( 
                "zmatrix"
                , zmatrix_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        ZMatrixCoords_exposer.staticmethod( "typeName" );
        ZMatrixCoords_exposer.def( "__copy__", &__copy__);
        ZMatrixCoords_exposer.def( "__deepcopy__", &__copy__);
        ZMatrixCoords_exposer.def( "clone", &__copy__);
        ZMatrixCoords_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::ZMatrixCoords >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ZMatrixCoords_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::ZMatrixCoords >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ZMatrixCoords_exposer.def( "__str__", &__str__< ::SireMove::ZMatrixCoords > );
        ZMatrixCoords_exposer.def( "__repr__", &__str__< ::SireMove::ZMatrixCoords > );
    }

}
