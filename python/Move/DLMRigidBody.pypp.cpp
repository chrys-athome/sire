// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "DLMRigidBody.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/quaternion.h"

#include "SireStream/datastream.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "dlmrigidbody.h"

#include "ensemble.h"

#include "rbworkspace.h"

#include "dlmrigidbody.h"

SireMove::DLMRigidBody __copy__(const SireMove::DLMRigidBody &other){ return SireMove::DLMRigidBody(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_DLMRigidBody_class(){

    { //::SireMove::DLMRigidBody
        typedef bp::class_< SireMove::DLMRigidBody, bp::bases< SireMove::Integrator, SireBase::Property > > DLMRigidBody_exposer_t;
        DLMRigidBody_exposer_t DLMRigidBody_exposer = DLMRigidBody_exposer_t( "DLMRigidBody", bp::init< bp::optional< bool > >(( bp::arg("frequent_save_velocities")=(bool)(false) )) );
        bp::scope DLMRigidBody_scope( DLMRigidBody_exposer );
        DLMRigidBody_exposer.def( bp::init< SireMove::DLMRigidBody const & >(( bp::arg("other") )) );
        { //::SireMove::DLMRigidBody::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::DLMRigidBody::*createWorkspace_function_type )( ::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::DLMRigidBody::createWorkspace );
            
            DLMRigidBody_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMove::DLMRigidBody::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::DLMRigidBody::*createWorkspace_function_type )( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::DLMRigidBody::createWorkspace );
            
            DLMRigidBody_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMove::DLMRigidBody::ensemble
        
            typedef ::SireMove::Ensemble ( ::SireMove::DLMRigidBody::*ensemble_function_type )(  ) const;
            ensemble_function_type ensemble_function_value( &::SireMove::DLMRigidBody::ensemble );
            
            DLMRigidBody_exposer.def( 
                "ensemble"
                , ensemble_function_value );
        
        }
        { //::SireMove::DLMRigidBody::integrate
        
            typedef void ( ::SireMove::DLMRigidBody::*integrate_function_type )( ::SireMove::IntegratorWorkspace &,::SireCAS::Symbol const &,::SireUnits::Dimension::Time,int,bool ) const;
            integrate_function_type integrate_function_value( &::SireMove::DLMRigidBody::integrate );
            
            DLMRigidBody_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("workspace"), bp::arg("nrg_component"), bp::arg("timestep"), bp::arg("nmoves"), bp::arg("record_stats") ) );
        
        }
        { //::SireMove::DLMRigidBody::isTimeReversible
        
            typedef bool ( ::SireMove::DLMRigidBody::*isTimeReversible_function_type )(  ) const;
            isTimeReversible_function_type isTimeReversible_function_value( &::SireMove::DLMRigidBody::isTimeReversible );
            
            DLMRigidBody_exposer.def( 
                "isTimeReversible"
                , isTimeReversible_function_value );
        
        }
        DLMRigidBody_exposer.def( bp::self != bp::self );
        { //::SireMove::DLMRigidBody::operator=
        
            typedef ::SireMove::DLMRigidBody & ( ::SireMove::DLMRigidBody::*assign_function_type )( ::SireMove::DLMRigidBody const & ) ;
            assign_function_type assign_function_value( &::SireMove::DLMRigidBody::operator= );
            
            DLMRigidBody_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        DLMRigidBody_exposer.def( bp::self == bp::self );
        { //::SireMove::DLMRigidBody::toString
        
            typedef ::QString ( ::SireMove::DLMRigidBody::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMove::DLMRigidBody::toString );
            
            DLMRigidBody_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMove::DLMRigidBody::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::DLMRigidBody::typeName );
            
            DLMRigidBody_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        DLMRigidBody_exposer.staticmethod( "typeName" );
        DLMRigidBody_exposer.def( "__copy__", &__copy__);
        DLMRigidBody_exposer.def( "__deepcopy__", &__copy__);
        DLMRigidBody_exposer.def( "clone", &__copy__);
        DLMRigidBody_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::DLMRigidBody >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        DLMRigidBody_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::DLMRigidBody >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        DLMRigidBody_exposer.def( "__str__", &__str__< ::SireMove::DLMRigidBody > );
        DLMRigidBody_exposer.def( "__repr__", &__str__< ::SireMove::DLMRigidBody > );
    }

}
